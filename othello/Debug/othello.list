
othello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9d0  0800b9d0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9d0  0800b9d0  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9d0  0800b9d0  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9d0  0800b9d0  0001b9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9d4  0800b9d4  0001b9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800b9d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
 10 .bss          000008bc  200000f0  200000f0  000200f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009ac  200009ac  000200f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ded4  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003756  00000000  00000000  0003dff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00041750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b0  00000000  00000000  00042e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021314  00000000  00000000  000443c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf1e  00000000  00000000  000656d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6328  00000000  00000000  000825f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014891a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a88  00000000  00000000  00148970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b804 	.word	0x0800b804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800b804 	.word	0x0800b804

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000258 	.word	0x20000258
 800039c:	20000238 	.word	0x20000238
 80003a0:	20000256 	.word	0x20000256
 80003a4:	2000023c 	.word	0x2000023c
 80003a8:	20000244 	.word	0x20000244
 80003ac:	20000255 	.word	0x20000255

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f005 fafd 	bl	8005ab0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f003 ff18 	bl	80042ec <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f005 fc84 	bl	8005dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f005 fc7c 	bl	8005dd4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f005 fc70 	bl	8005dd4 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f003 fef0 	bl	80042ec <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f003 feea 	bl	80042ec <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f003 fee4 	bl	80042ec <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f003 fed5 	bl	80042ec <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f003 feca 	bl	80042ec <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000255 	.word	0x20000255
 80005a8:	20000241 	.word	0x20000241
 80005ac:	2000010c 	.word	0x2000010c
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000258 	.word	0x20000258
 80005b8:	20000238 	.word	0x20000238
 80005bc:	20000256 	.word	0x20000256
 80005c0:	20000244 	.word	0x20000244
 80005c4:	2000023c 	.word	0x2000023c
 80005c8:	20000240 	.word	0x20000240
 80005cc:	20000254 	.word	0x20000254

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	2000023c 	.word	0x2000023c
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000234 	.word	0x20000234

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f003 fdd2 	bl	80042ec <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000241 	.word	0x20000241
 80007ac:	20000234 	.word	0x20000234

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000240 	.word	0x20000240

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 fa7a 	bl	8005dd4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fa6e 	bl	8005dd4 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000023c 	.word	0x2000023c
 8000930:	20000258 	.word	0x20000258
 8000934:	20000238 	.word	0x20000238
 8000938:	20000255 	.word	0x20000255

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f005 fa42 	bl	8005dd4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f003 fccb 	bl	80042ec <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f005 fa37 	bl	8005dd4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f003 fcc0 	bl	80042ec <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f005 fa2c 	bl	8005dd4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f003 fcb5 	bl	80042ec <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000023c 	.word	0x2000023c
 800098c:	20000256 	.word	0x20000256

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f005 fa09 	bl	8005dd4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000023c 	.word	0x2000023c
 80009e0:	20000244 	.word	0x20000244

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f005 f9df 	bl	8005dd4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000023c 	.word	0x2000023c
 8000a34:	20000244 	.word	0x20000244

08000a38 <PWM_Change_Tone>:
TIM_HandleTypeDef *pwm_timer = &htim3; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel = TIM_CHANNEL_2;  // Specify configured PWM channel


void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	80fb      	strh	r3, [r7, #6]
 8000a44:	4613      	mov	r3, r2
 8000a46:	80bb      	strh	r3, [r7, #4]
  if (pwm_freq == 0 || pwm_freq > 20000)
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <PWM_Change_Tone+0x20>
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d937      	bls.n	8000ac8 <PWM_Change_Tone+0x90>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8000a58:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d105      	bne.n	8000a6c <PWM_Change_Tone+0x34>
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2200      	movs	r2, #0
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6a:	e08e      	b.n	8000b8a <PWM_Change_Tone+0x152>
 8000a6c:	4b49      	ldr	r3, [pc, #292]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d105      	bne.n	8000a80 <PWM_Change_Tone+0x48>
 8000a74:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a7e:	e084      	b.n	8000b8a <PWM_Change_Tone+0x152>
 8000a80:	4b44      	ldr	r3, [pc, #272]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d105      	bne.n	8000a94 <PWM_Change_Tone+0x5c>
 8000a88:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a92:	e07a      	b.n	8000b8a <PWM_Change_Tone+0x152>
 8000a94:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b0c      	cmp	r3, #12
 8000a9a:	d105      	bne.n	8000aa8 <PWM_Change_Tone+0x70>
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	e070      	b.n	8000b8a <PWM_Change_Tone+0x152>
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b10      	cmp	r3, #16
 8000aae:	d105      	bne.n	8000abc <PWM_Change_Tone+0x84>
 8000ab0:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aba:	e066      	b.n	8000b8a <PWM_Change_Tone+0x152>
 8000abc:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ac6:	e060      	b.n	8000b8a <PWM_Change_Tone+0x152>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000ac8:	f006 fc62 	bl	8007390 <HAL_RCC_GetSysClockFreq>
 8000acc:	61f8      	str	r0, [r7, #28]
    const uint16_t prescaler = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000ad2:	8b7b      	ldrh	r3, [r7, #26]
 8000ad4:	69fa      	ldr	r2, [r7, #28]
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	fb02 f303 	mul.w	r3, r2, r3
 8000aee:	4a2b      	ldr	r2, [pc, #172]	; (8000b9c <PWM_Change_Tone+0x164>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	09db      	lsrs	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

    pwm_timer->Instance->PSC = prescaler - 1;
 8000af8:	8b7b      	ldrh	r3, [r7, #26]
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer->Instance->ARR = period_cycles - 1;
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2201      	movs	r2, #1
 8000b18:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d105      	bne.n	8000b2e <PWM_Change_Tone+0xf6>
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000b2c:	e02d      	b.n	8000b8a <PWM_Change_Tone+0x152>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d105      	bne.n	8000b42 <PWM_Change_Tone+0x10a>
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b40:	e023      	b.n	8000b8a <PWM_Change_Tone+0x152>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	d105      	bne.n	8000b56 <PWM_Change_Tone+0x11e>
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000b54:	e019      	b.n	8000b8a <PWM_Change_Tone+0x152>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b0c      	cmp	r3, #12
 8000b5c:	d105      	bne.n	8000b6a <PWM_Change_Tone+0x132>
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b68:	e00f      	b.n	8000b8a <PWM_Change_Tone+0x152>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <PWM_Change_Tone+0x15c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b10      	cmp	r3, #16
 8000b70:	d105      	bne.n	8000b7e <PWM_Change_Tone+0x146>
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b7c:	e005      	b.n	8000b8a <PWM_Change_Tone+0x152>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <PWM_Change_Tone+0x160>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b88:	e7ff      	b.n	8000b8a <PWM_Change_Tone+0x152>
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000048 	.word	0x20000048
 8000b98:	20000044 	.word	0x20000044
 8000b9c:	10624dd3 	.word	0x10624dd3

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba6:	f003 fb3b 	bl	8004220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000baa:	f000 f8b1 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bae:	f000 fbab 	bl	8001308 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bb2:	f000 f973 	bl	8000e9c <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8000bb6:	f000 fb85 	bl	80012c4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000bba:	f000 fa3f 	bl	800103c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bbe:	f000 fb51 	bl	8001264 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000bc2:	f000 faff 	bl	80011c4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000bc6:	f000 f9a9 	bl	8000f1c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bca:	f000 fa85 	bl	80010d8 <MX_TIM3_Init>
  MX_ADC4_Init();
 8000bce:	f000 f907 	bl	8000de0 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	483d      	ldr	r0, [pc, #244]	; (8000ccc <main+0x12c>)
 8000bd8:	f005 f8fc 	bl	8005dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2120      	movs	r1, #32
 8000be0:	483a      	ldr	r0, [pc, #232]	; (8000ccc <main+0x12c>)
 8000be2:	f005 f8f7 	bl	8005dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	4838      	ldr	r0, [pc, #224]	; (8000ccc <main+0x12c>)
 8000bec:	f005 f8f2 	bl	8005dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	4835      	ldr	r0, [pc, #212]	; (8000ccc <main+0x12c>)
 8000bf6:	f005 f8ed 	bl	8005dd4 <HAL_GPIO_WritePin>

  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bfe:	9303      	str	r3, [sp, #12]
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1e:	482b      	ldr	r0, [pc, #172]	; (8000ccc <main+0x12c>)
 8000c20:	f7ff fb2e 	bl	8000280 <LiquidCrystal>
  begin(20, 4);
 8000c24:	2104      	movs	r1, #4
 8000c26:	2014      	movs	r0, #20
 8000c28:	f7ff fbc2 	bl	80003b0 <begin>

  createChar(5, s6);
 8000c2c:	4928      	ldr	r1, [pc, #160]	; (8000cd0 <main+0x130>)
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f7ff fdff 	bl	8000832 <createChar>
  createChar(7, s8);
 8000c34:	4927      	ldr	r1, [pc, #156]	; (8000cd4 <main+0x134>)
 8000c36:	2007      	movs	r0, #7
 8000c38:	f7ff fdfb 	bl	8000832 <createChar>
  createChar(6, s7);
 8000c3c:	4926      	ldr	r1, [pc, #152]	; (8000cd8 <main+0x138>)
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f7ff fdf7 	bl	8000832 <createChar>
  createChar(4, s5);
 8000c44:	4925      	ldr	r1, [pc, #148]	; (8000cdc <main+0x13c>)
 8000c46:	2004      	movs	r0, #4
 8000c48:	f7ff fdf3 	bl	8000832 <createChar>
  createChar(3, s4);
 8000c4c:	4924      	ldr	r1, [pc, #144]	; (8000ce0 <main+0x140>)
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f7ff fdef 	bl	8000832 <createChar>
  createChar(1, s2);
 8000c54:	4923      	ldr	r1, [pc, #140]	; (8000ce4 <main+0x144>)
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fdeb 	bl	8000832 <createChar>
  createChar(0, s1);
 8000c5c:	4922      	ldr	r1, [pc, #136]	; (8000ce8 <main+0x148>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fde7 	bl	8000832 <createChar>
  createChar(2, s3);
 8000c64:	4921      	ldr	r1, [pc, #132]	; (8000cec <main+0x14c>)
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff fde3 	bl	8000832 <createChar>

  setCursor(5,0);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2005      	movs	r0, #5
 8000c70:	f7ff fd6c 	bl	800074c <setCursor>
  write(5);
 8000c74:	2005      	movs	r0, #5
 8000c76:	f7ff fe13 	bl	80008a0 <write>

  setCursor(6,0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2006      	movs	r0, #6
 8000c7e:	f7ff fd65 	bl	800074c <setCursor>
  write(4);
 8000c82:	2004      	movs	r0, #4
 8000c84:	f7ff fe0c 	bl	80008a0 <write>

  setCursor(8, 0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2008      	movs	r0, #8
 8000c8c:	f7ff fd5e 	bl	800074c <setCursor>
  print("Othello");
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <main+0x150>)
 8000c92:	f7ff fda3 	bl	80007dc <print>

  setCursor(3,2);
 8000c96:	2102      	movs	r1, #2
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f7ff fd57 	bl	800074c <setCursor>
  print("Shiva Radmanesh");
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <main+0x154>)
 8000ca0:	f7ff fd9c 	bl	80007dc <print>


  HAL_ADC_Start_IT(&hadc4);
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <main+0x158>)
 8000ca6:	f003 fd43 	bl	8004730 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <main+0x15c>)
 8000cac:	f006 fe32 	bl	8007914 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim4);
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <main+0x160>)
 8000cb2:	f006 fe2f 	bl	8007914 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <main+0x164>)
 8000cba:	f006 ff4d 	bl	8007b58 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, data, sizeof(data));
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4911      	ldr	r1, [pc, #68]	; (8000d08 <main+0x168>)
 8000cc2:	4812      	ldr	r0, [pc, #72]	; (8000d0c <main+0x16c>)
 8000cc4:	f008 fa16 	bl	80090f4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <main+0x128>
 8000cca:	bf00      	nop
 8000ccc:	48000c00 	.word	0x48000c00
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	2000001c 	.word	0x2000001c
 8000ce0:	20000024 	.word	0x20000024
 8000ce4:	2000002c 	.word	0x2000002c
 8000ce8:	20000034 	.word	0x20000034
 8000cec:	2000003c 	.word	0x2000003c
 8000cf0:	0800b81c 	.word	0x0800b81c
 8000cf4:	0800b824 	.word	0x0800b824
 8000cf8:	2000045c 	.word	0x2000045c
 8000cfc:	2000038c 	.word	0x2000038c
 8000d00:	2000025c 	.word	0x2000025c
 8000d04:	200002f4 	.word	0x200002f4
 8000d08:	20000110 	.word	0x20000110
 8000d0c:	200003d8 	.word	0x200003d8

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b09e      	sub	sp, #120	; 0x78
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f009 fbca 	bl	800a4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	223c      	movs	r2, #60	; 0x3c
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f009 fbbc 	bl	800a4b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d40:	2303      	movs	r3, #3
 8000d42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d52:	2310      	movs	r3, #16
 8000d54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d64:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 fa8c 	bl	8006288 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d76:	f000 fbdd 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d94:	2101      	movs	r1, #1
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 f97e 	bl	8007098 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000da2:	f000 fbc7 	bl	8001534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <SystemClock_Config+0xcc>)
 8000da8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000db8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 fb9d 	bl	8007504 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dd0:	f000 fbb0 	bl	8001534 <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3778      	adds	r7, #120	; 0x78
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	00021122 	.word	0x00021122

08000de0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000df8:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <MX_ADC4_Init+0xb8>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000e4e:	4811      	ldr	r0, [pc, #68]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e50:	f003 fa8e 	bl	8004370 <HAL_ADC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8000e5a:	f000 fb6b 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_ADC4_Init+0xb4>)
 8000e7c:	f004 f8da 	bl	8005034 <HAL_ADC_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000e86:	f000 fb55 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000045c 	.word	0x2000045c
 8000e98:	50000500 	.word	0x50000500

08000e9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <MX_I2C1_Init+0x78>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <MX_I2C1_Init+0x7c>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ed8:	f004 ffd1 	bl	8005e7e <HAL_I2C_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ee2:	f000 fb27 	bl	8001534 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eea:	f005 f857 	bl	8005f9c <HAL_I2CEx_ConfigAnalogFilter>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef4:	f000 fb1e 	bl	8001534 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000efc:	f005 f899 	bl	8006032 <HAL_I2CEx_ConfigDigitalFilter>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f000 fb15 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200002a8 	.word	0x200002a8
 8000f14:	40005400 	.word	0x40005400
 8000f18:	2000090e 	.word	0x2000090e

08000f1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b096      	sub	sp, #88	; 0x58
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	222c      	movs	r2, #44	; 0x2c
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f009 fab5 	bl	800a4b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4e:	4b39      	ldr	r3, [pc, #228]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f50:	4a39      	ldr	r2, [pc, #228]	; (8001038 <MX_TIM1_Init+0x11c>)
 8000f52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b32      	ldr	r3, [pc, #200]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f7a:	482e      	ldr	r0, [pc, #184]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f7c:	f006 fd34 	bl	80079e8 <HAL_TIM_OC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f000 fad5 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4825      	ldr	r0, [pc, #148]	; (8001034 <MX_TIM1_Init+0x118>)
 8000f9e:	f007 feab 	bl	8008cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f000 fac4 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4818      	ldr	r0, [pc, #96]	; (8001034 <MX_TIM1_Init+0x118>)
 8000fd2:	f006 ffe1 	bl	8007f98 <HAL_TIM_OC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fdc:	f000 faaa 	bl	8001534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM1_Init+0x118>)
 8001016:	f007 feef 	bl	8008df8 <HAL_TIMEx_ConfigBreakDeadTime>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001020:	f000 fa88 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM1_Init+0x118>)
 8001026:	f000 fbaf 	bl	8001788 <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3758      	adds	r7, #88	; 0x58
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000340 	.word	0x20000340
 8001038:	40012c00 	.word	0x40012c00

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_TIM2_Init+0x98>)
 800105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001064:	f640 125f 	movw	r2, #2399	; 0x95f
 8001068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM2_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001072:	f242 7210 	movw	r2, #10000	; 0x2710
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_TIM2_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001086:	f006 fbed 	bl	8007864 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 fa50 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_TIM2_Init+0x98>)
 80010a2:	f007 f907 	bl	80082b4 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80010ac:	f000 fa42 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_TIM2_Init+0x98>)
 80010be:	f007 fe1b 	bl	8008cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80010c8:	f000 fa34 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000038c 	.word	0x2000038c

080010d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	; 0x38
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <MX_TIM3_Init+0xe4>)
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <MX_TIM3_Init+0xe8>)
 800110e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_TIM3_Init+0xe4>)
 8001112:	2248      	movs	r2, #72	; 0x48
 8001114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <MX_TIM3_Init+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_TIM3_Init+0xe4>)
 800111e:	2264      	movs	r2, #100	; 0x64
 8001120:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_TIM3_Init+0xe4>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_TIM3_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800112e:	4823      	ldr	r0, [pc, #140]	; (80011bc <MX_TIM3_Init+0xe4>)
 8001130:	f006 fb98 	bl	8007864 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800113a:	f000 f9fb 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001148:	4619      	mov	r1, r3
 800114a:	481c      	ldr	r0, [pc, #112]	; (80011bc <MX_TIM3_Init+0xe4>)
 800114c:	f007 f8b2 	bl	80082b4 <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001156:	f000 f9ed 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <MX_TIM3_Init+0xe4>)
 800115c:	f006 fc9b 	bl	8007a96 <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001166:	f000 f9e5 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <MX_TIM3_Init+0xe4>)
 800117a:	f007 fdbd 	bl	8008cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001184:	f000 f9d6 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001188:	2360      	movs	r3, #96	; 0x60
 800118a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2204      	movs	r2, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <MX_TIM3_Init+0xe4>)
 80011a0:	f006 ff74 	bl	800808c <HAL_TIM_PWM_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011aa:	f000 f9c3 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <MX_TIM3_Init+0xe4>)
 80011b0:	f000 faea 	bl	8001788 <HAL_TIM_MspPostInit>

}
 80011b4:	bf00      	nop
 80011b6:	3738      	adds	r7, #56	; 0x38
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002f4 	.word	0x200002f4
 80011c0:	40000400 	.word	0x40000400

080011c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM4_Init+0x98>)
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <MX_TIM4_Init+0x9c>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 479;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_TIM4_Init+0x98>)
 80011ea:	f240 12df 	movw	r2, #479	; 0x1df
 80011ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_TIM4_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_TIM4_Init+0x98>)
 80011f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_TIM4_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM4_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800120a:	4814      	ldr	r0, [pc, #80]	; (800125c <MX_TIM4_Init+0x98>)
 800120c:	f006 fb2a 	bl	8007864 <HAL_TIM_Base_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001216:	f000 f98d 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_TIM4_Init+0x98>)
 8001228:	f007 f844 	bl	80082b4 <HAL_TIM_ConfigClockSource>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001232:	f000 f97f 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_TIM4_Init+0x98>)
 8001244:	f007 fd58 	bl	8008cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800124e:	f000 f971 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000025c 	.word	0x2000025c
 8001260:	40000800 	.word	0x40000800

08001264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_USART2_UART_Init+0x58>)
 800126a:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <MX_USART2_UART_Init+0x5c>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_USART2_UART_Init+0x58>)
 8001270:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_USART2_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_USART2_UART_Init+0x58>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_USART2_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_USART2_UART_Init+0x58>)
 80012a8:	f007 fe42 	bl	8008f30 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012b2:	f000 f93f 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200003d8 	.word	0x200003d8
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_USB_PCD_Init+0x3c>)
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <MX_USB_PCD_Init+0x40>)
 80012cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USB_PCD_Init+0x3c>)
 80012d0:	2208      	movs	r2, #8
 80012d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_USB_PCD_Init+0x3c>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USB_PCD_Init+0x3c>)
 80012dc:	2202      	movs	r2, #2
 80012de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_USB_PCD_Init+0x3c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USB_PCD_Init+0x3c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_USB_PCD_Init+0x3c>)
 80012ee:	f004 feec 	bl	80060ca <HAL_PCD_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80012f8:	f000 f91c 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200004ac 	.word	0x200004ac
 8001304:	40005c00 	.word	0x40005c00

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131e:	4b80      	ldr	r3, [pc, #512]	; (8001520 <MX_GPIO_Init+0x218>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a7f      	ldr	r2, [pc, #508]	; (8001520 <MX_GPIO_Init+0x218>)
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b7d      	ldr	r3, [pc, #500]	; (8001520 <MX_GPIO_Init+0x218>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b7a      	ldr	r3, [pc, #488]	; (8001520 <MX_GPIO_Init+0x218>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a79      	ldr	r2, [pc, #484]	; (8001520 <MX_GPIO_Init+0x218>)
 800133c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001340:	6153      	str	r3, [r2, #20]
 8001342:	4b77      	ldr	r3, [pc, #476]	; (8001520 <MX_GPIO_Init+0x218>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800134e:	4b74      	ldr	r3, [pc, #464]	; (8001520 <MX_GPIO_Init+0x218>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	4a73      	ldr	r2, [pc, #460]	; (8001520 <MX_GPIO_Init+0x218>)
 8001354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001358:	6153      	str	r3, [r2, #20]
 800135a:	4b71      	ldr	r3, [pc, #452]	; (8001520 <MX_GPIO_Init+0x218>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b6e      	ldr	r3, [pc, #440]	; (8001520 <MX_GPIO_Init+0x218>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	4a6d      	ldr	r2, [pc, #436]	; (8001520 <MX_GPIO_Init+0x218>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6153      	str	r3, [r2, #20]
 8001372:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <MX_GPIO_Init+0x218>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b68      	ldr	r3, [pc, #416]	; (8001520 <MX_GPIO_Init+0x218>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a67      	ldr	r2, [pc, #412]	; (8001520 <MX_GPIO_Init+0x218>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001388:	6153      	str	r3, [r2, #20]
 800138a:	4b65      	ldr	r3, [pc, #404]	; (8001520 <MX_GPIO_Init+0x218>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001396:	4b62      	ldr	r3, [pc, #392]	; (8001520 <MX_GPIO_Init+0x218>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a61      	ldr	r2, [pc, #388]	; (8001520 <MX_GPIO_Init+0x218>)
 800139c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013a0:	6153      	str	r3, [r2, #20]
 80013a2:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <MX_GPIO_Init+0x218>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80013ae:	2200      	movs	r2, #0
 80013b0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80013b4:	485b      	ldr	r0, [pc, #364]	; (8001524 <MX_GPIO_Init+0x21c>)
 80013b6:	f004 fd0d 	bl	8005dd4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	210f      	movs	r1, #15
 80013be:	485a      	ldr	r0, [pc, #360]	; (8001528 <MX_GPIO_Init+0x220>)
 80013c0:	f004 fd08 	bl	8005dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2110      	movs	r1, #16
 80013c8:	4858      	ldr	r0, [pc, #352]	; (800152c <MX_GPIO_Init+0x224>)
 80013ca:	f004 fd03 	bl	8005dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	21f0      	movs	r1, #240	; 0xf0
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f004 fcfd 	bl	8005dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	21f0      	movs	r1, #240	; 0xf0
 80013de:	4854      	ldr	r0, [pc, #336]	; (8001530 <MX_GPIO_Init+0x228>)
 80013e0:	f004 fcf8 	bl	8005dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80013e4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80013e8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4849      	ldr	r0, [pc, #292]	; (8001524 <MX_GPIO_Init+0x21c>)
 80013fe:	f004 fb57 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001402:	230f      	movs	r3, #15
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4843      	ldr	r0, [pc, #268]	; (8001528 <MX_GPIO_Init+0x220>)
 800141a:	f004 fb49 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800141e:	2301      	movs	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001428:	2302      	movs	r3, #2
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f004 fb3b 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800143a:	2310      	movs	r3, #16
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4836      	ldr	r0, [pc, #216]	; (800152c <MX_GPIO_Init+0x224>)
 8001452:	f004 fb2d 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23f0      	movs	r3, #240	; 0xf0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f004 fb1e 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001480:	2302      	movs	r3, #2
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	4827      	ldr	r0, [pc, #156]	; (8001528 <MX_GPIO_Init+0x220>)
 800148c:	f004 fb10 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001490:	230e      	movs	r3, #14
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001494:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800149a:	2302      	movs	r3, #2
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4822      	ldr	r0, [pc, #136]	; (8001530 <MX_GPIO_Init+0x228>)
 80014a6:	f004 fb03 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014aa:	23f0      	movs	r3, #240	; 0xf0
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	481b      	ldr	r0, [pc, #108]	; (8001530 <MX_GPIO_Init+0x228>)
 80014c2:	f004 faf5 	bl	8005ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2101      	movs	r1, #1
 80014ca:	2006      	movs	r0, #6
 80014cc:	f004 fa43 	bl	8005956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014d0:	2006      	movs	r0, #6
 80014d2:	f004 fa5c 	bl	800598e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2101      	movs	r1, #1
 80014da:	2007      	movs	r0, #7
 80014dc:	f004 fa3b 	bl	8005956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014e0:	2007      	movs	r0, #7
 80014e2:	f004 fa54 	bl	800598e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2101      	movs	r1, #1
 80014ea:	2008      	movs	r0, #8
 80014ec:	f004 fa33 	bl	8005956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80014f0:	2008      	movs	r0, #8
 80014f2:	f004 fa4c 	bl	800598e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	2009      	movs	r0, #9
 80014fc:	f004 fa2b 	bl	8005956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001500:	2009      	movs	r0, #9
 8001502:	f004 fa44 	bl	800598e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2101      	movs	r1, #1
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f004 fa23 	bl	8005956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001510:	2028      	movs	r0, #40	; 0x28
 8001512:	f004 fa3c 	bl	800598e <HAL_NVIC_EnableIRQ>

}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	; 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	48001000 	.word	0x48001000
 8001528:	48000800 	.word	0x48000800
 800152c:	48001400 	.word	0x48001400
 8001530:	48000c00 	.word	0x48000c00

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x44>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_MspInit+0x44>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x44>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x44>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x44>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x44>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001576:	2005      	movs	r0, #5
 8001578:	f004 f9e2 	bl	8005940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC4)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_ADC_MspInit+0x84>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12c      	bne.n	8001604 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_ADC_MspInit+0x88>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_ADC_MspInit+0x88>)
 80015b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_ADC_MspInit+0x88>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_ADC_MspInit+0x88>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_ADC_MspInit+0x88>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6153      	str	r3, [r2, #20]
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_ADC_MspInit+0x88>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB12     ------> ADC4_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e0:	2303      	movs	r3, #3
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <HAL_ADC_MspInit+0x8c>)
 80015f0:	f004 fa5e 	bl	8005ab0 <HAL_GPIO_Init>

    /* ADC4 interrupt Init */
    HAL_NVIC_SetPriority(ADC4_IRQn, 1, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2101      	movs	r1, #1
 80015f8:	203d      	movs	r0, #61	; 0x3d
 80015fa:	f004 f9ac 	bl	8005956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 80015fe:	203d      	movs	r0, #61	; 0x3d
 8001600:	f004 f9c5 	bl	800598e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	50000500 	.word	0x50000500
 8001610:	40021000 	.word	0x40021000
 8001614:	48000400 	.word	0x48000400

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_I2C_MspInit+0x7c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d127      	bne.n	800168a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_I2C_MspInit+0x80>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_I2C_MspInit+0x80>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_I2C_MspInit+0x80>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001652:	23c0      	movs	r3, #192	; 0xc0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001656:	2312      	movs	r3, #18
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001662:	2304      	movs	r3, #4
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <HAL_I2C_MspInit+0x84>)
 800166e:	f004 fa1f 	bl	8005ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_I2C_MspInit+0x80>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_I2C_MspInit+0x80>)
 8001678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_I2C_MspInit+0x80>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40005400 	.word	0x40005400
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400

080016a0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_TIM_OC_MspInit+0x38>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10b      	bne.n	80016ca <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_TIM_OC_MspInit+0x3c>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <HAL_TIM_OC_MspInit+0x3c>)
 80016b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_TIM_OC_MspInit+0x3c>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40012c00 	.word	0x40012c00
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d114      	bne.n	800171c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a21      	ldr	r2, [pc, #132]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2102      	movs	r1, #2
 800170e:	201c      	movs	r0, #28
 8001710:	f004 f921 	bl	8005956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001714:	201c      	movs	r0, #28
 8001716:	f004 f93a 	bl	800598e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800171a:	e02a      	b.n	8001772 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a17      	ldr	r2, [pc, #92]	; (8001780 <HAL_TIM_Base_MspInit+0xa0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10c      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a14      	ldr	r2, [pc, #80]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
}
 800173e:	e018      	b.n	8001772 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_TIM_Base_MspInit+0xa4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d113      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2102      	movs	r1, #2
 8001766:	201e      	movs	r0, #30
 8001768:	f004 f8f5 	bl	8005956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800176c:	201e      	movs	r0, #30
 800176e:	f004 f90e 	bl	800598e <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40000400 	.word	0x40000400
 8001784:	40000800 	.word	0x40000800

08001788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_TIM_MspPostInit+0xac>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d11e      	bne.n	80017e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <HAL_TIM_MspPostInit+0xb0>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	4a22      	ldr	r2, [pc, #136]	; (8001838 <HAL_TIM_MspPostInit+0xb0>)
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	6153      	str	r3, [r2, #20]
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_TIM_MspPostInit+0xb0>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017d4:	2306      	movs	r3, #6
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f004 f965 	bl	8005ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017e6:	e020      	b.n	800182a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_TIM_MspPostInit+0xb4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d11b      	bne.n	800182a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_TIM_MspPostInit+0xb0>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_TIM_MspPostInit+0xb0>)
 80017f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_TIM_MspPostInit+0xb0>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800181a:	2302      	movs	r3, #2
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <HAL_TIM_MspPostInit+0xb8>)
 8001826:	f004 f943 	bl	8005ab0 <HAL_GPIO_Init>
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40021000 	.word	0x40021000
 800183c:	40000400 	.word	0x40000400
 8001840:	48000800 	.word	0x48000800

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_UART_MspInit+0x8c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d130      	bne.n	80018c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_UART_MspInit+0x90>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_UART_MspInit+0x90>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001896:	230c      	movs	r3, #12
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a6:	2307      	movs	r3, #7
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f004 f8fc 	bl	8005ab0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	2026      	movs	r0, #38	; 0x26
 80018be:	f004 f84a 	bl	8005956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c2:	2026      	movs	r0, #38	; 0x26
 80018c4:	f004 f863 	bl	800598e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_PCD_MspInit+0x80>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d129      	bne.n	800194e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_PCD_MspInit+0x84>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_PCD_MspInit+0x84>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	6153      	str	r3, [r2, #20]
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_PCD_MspInit+0x84>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001912:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001924:	230e      	movs	r3, #14
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f004 f8bd 	bl	8005ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_PCD_MspInit+0x84>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_PCD_MspInit+0x84>)
 800193c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_PCD_MspInit+0x84>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40005c00 	.word	0x40005c00
 800195c:	40021000 	.word	0x40021000

08001960 <startBoard>:





void startBoard(){
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
	int i, j;
    for(i = 0; i < 8; i++){
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	e014      	b.n	8001996 <startBoard+0x36>
        for(j = 0; j< 8; j++){
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	e00b      	b.n	800198a <startBoard+0x2a>
            board[i][j] = -1;
 8001972:	4914      	ldr	r1, [pc, #80]	; (80019c4 <startBoard+0x64>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	00da      	lsls	r2, r3, #3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(j = 0; j< 8; j++){
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b07      	cmp	r3, #7
 800198e:	ddf0      	ble.n	8001972 <startBoard+0x12>
    for(i = 0; i < 8; i++){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b07      	cmp	r3, #7
 800199a:	dde7      	ble.n	800196c <startBoard+0xc>
        }
    }

    board[3][4] = 1;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <startBoard+0x64>)
 800199e:	2201      	movs	r2, #1
 80019a0:	671a      	str	r2, [r3, #112]	; 0x70
    board[4][4] = 0;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <startBoard+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    board[4][3] = 1;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <startBoard+0x64>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    board[3][3] = 0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <startBoard+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	66da      	str	r2, [r3, #108]	; 0x6c

}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	20000898 	.word	0x20000898

080019c8 <printBoard>:

void printBoard(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	int i, j;
	for(i=0; i< 8; i+=2){
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	e0ea      	b.n	8001baa <printBoard+0x1e2>
		for(j=0; j<8; j++){
 80019d4:	2300      	movs	r3, #0
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	e0e0      	b.n	8001b9c <printBoard+0x1d4>
			setCursor(j, i/2);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2d8      	uxtb	r0, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0fda      	lsrs	r2, r3, #31
 80019e2:	4413      	add	r3, r2
 80019e4:	105b      	asrs	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7fe feaf 	bl	800074c <setCursor>

			if(board[i][j] == -1 && board[i+1][j] == -1){
 80019ee:	4973      	ldr	r1, [pc, #460]	; (8001bbc <printBoard+0x1f4>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	00da      	lsls	r2, r3, #3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d10e      	bne.n	8001a20 <printBoard+0x58>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3301      	adds	r3, #1
 8001a06:	496d      	ldr	r1, [pc, #436]	; (8001bbc <printBoard+0x1f4>)
 8001a08:	00da      	lsls	r2, r3, #3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a16:	d103      	bne.n	8001a20 <printBoard+0x58>
				print(" ");
 8001a18:	4869      	ldr	r0, [pc, #420]	; (8001bc0 <printBoard+0x1f8>)
 8001a1a:	f7fe fedf 	bl	80007dc <print>
 8001a1e:	e0ba      	b.n	8001b96 <printBoard+0x1ce>
			}

			else if(board[i][j] == -1 && board[i+1][j] == 0){
 8001a20:	4966      	ldr	r1, [pc, #408]	; (8001bbc <printBoard+0x1f4>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	00da      	lsls	r2, r3, #3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a32:	d10d      	bne.n	8001a50 <printBoard+0x88>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4960      	ldr	r1, [pc, #384]	; (8001bbc <printBoard+0x1f4>)
 8001a3a:	00da      	lsls	r2, r3, #3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <printBoard+0x88>
				write(0);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7fe ff29 	bl	80008a0 <write>
 8001a4e:	e0a2      	b.n	8001b96 <printBoard+0x1ce>
			}

			else if(board[i][j] == 0 && board[i+1][j] == -1){
 8001a50:	495a      	ldr	r1, [pc, #360]	; (8001bbc <printBoard+0x1f4>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	00da      	lsls	r2, r3, #3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10e      	bne.n	8001a80 <printBoard+0xb8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4955      	ldr	r1, [pc, #340]	; (8001bbc <printBoard+0x1f4>)
 8001a68:	00da      	lsls	r2, r3, #3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a76:	d103      	bne.n	8001a80 <printBoard+0xb8>
				write(1);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7fe ff11 	bl	80008a0 <write>
 8001a7e:	e08a      	b.n	8001b96 <printBoard+0x1ce>
			}

			else if(board[i][j] == -1 && board[i+1][j] == 1){
 8001a80:	494e      	ldr	r1, [pc, #312]	; (8001bbc <printBoard+0x1f4>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	00da      	lsls	r2, r3, #3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a92:	d10d      	bne.n	8001ab0 <printBoard+0xe8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4948      	ldr	r1, [pc, #288]	; (8001bbc <printBoard+0x1f4>)
 8001a9a:	00da      	lsls	r2, r3, #3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d103      	bne.n	8001ab0 <printBoard+0xe8>
				write(2);
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7fe fef9 	bl	80008a0 <write>
 8001aae:	e072      	b.n	8001b96 <printBoard+0x1ce>
			}
			else if(board[i][j] == 1 && board[i+1][j] == -1){
 8001ab0:	4942      	ldr	r1, [pc, #264]	; (8001bbc <printBoard+0x1f4>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	00da      	lsls	r2, r3, #3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10e      	bne.n	8001ae0 <printBoard+0x118>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	493d      	ldr	r1, [pc, #244]	; (8001bbc <printBoard+0x1f4>)
 8001ac8:	00da      	lsls	r2, r3, #3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad6:	d103      	bne.n	8001ae0 <printBoard+0x118>
				write(3);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f7fe fee1 	bl	80008a0 <write>
 8001ade:	e05a      	b.n	8001b96 <printBoard+0x1ce>
			}

			else if(board[i][j] == 1 && board[i+1][j] == -0){
 8001ae0:	4936      	ldr	r1, [pc, #216]	; (8001bbc <printBoard+0x1f4>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	00da      	lsls	r2, r3, #3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d10d      	bne.n	8001b0e <printBoard+0x146>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4931      	ldr	r1, [pc, #196]	; (8001bbc <printBoard+0x1f4>)
 8001af8:	00da      	lsls	r2, r3, #3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <printBoard+0x146>
				write(4);
 8001b06:	2004      	movs	r0, #4
 8001b08:	f7fe feca 	bl	80008a0 <write>
 8001b0c:	e043      	b.n	8001b96 <printBoard+0x1ce>
			}

			else if(board[i][j] == 0 && board[i+1][j] == 1){
 8001b0e:	492b      	ldr	r1, [pc, #172]	; (8001bbc <printBoard+0x1f4>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	00da      	lsls	r2, r3, #3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <printBoard+0x174>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4925      	ldr	r1, [pc, #148]	; (8001bbc <printBoard+0x1f4>)
 8001b26:	00da      	lsls	r2, r3, #3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d103      	bne.n	8001b3c <printBoard+0x174>
				write(5);
 8001b34:	2005      	movs	r0, #5
 8001b36:	f7fe feb3 	bl	80008a0 <write>
 8001b3a:	e02c      	b.n	8001b96 <printBoard+0x1ce>
			}

			else if(board[i][j] == 0 && board[i+1][j] == 0){
 8001b3c:	491f      	ldr	r1, [pc, #124]	; (8001bbc <printBoard+0x1f4>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	00da      	lsls	r2, r3, #3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10d      	bne.n	8001b6a <printBoard+0x1a2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3301      	adds	r3, #1
 8001b52:	491a      	ldr	r1, [pc, #104]	; (8001bbc <printBoard+0x1f4>)
 8001b54:	00da      	lsls	r2, r3, #3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <printBoard+0x1a2>
				write(6);
 8001b62:	2006      	movs	r0, #6
 8001b64:	f7fe fe9c 	bl	80008a0 <write>
 8001b68:	e015      	b.n	8001b96 <printBoard+0x1ce>
			}

			else if(board[i][j] == 1 && board[i+1][j] == 1){
 8001b6a:	4914      	ldr	r1, [pc, #80]	; (8001bbc <printBoard+0x1f4>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	00da      	lsls	r2, r3, #3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10c      	bne.n	8001b96 <printBoard+0x1ce>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	490e      	ldr	r1, [pc, #56]	; (8001bbc <printBoard+0x1f4>)
 8001b82:	00da      	lsls	r2, r3, #3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <printBoard+0x1ce>
				write(7);
 8001b90:	2007      	movs	r0, #7
 8001b92:	f7fe fe85 	bl	80008a0 <write>
		for(j=0; j<8; j++){
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	f77f af1b 	ble.w	80019da <printBoard+0x12>
	for(i=0; i< 8; i+=2){
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	f77f af11 	ble.w	80019d4 <printBoard+0xc>
			}

		}
	}

}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000898 	.word	0x20000898
 8001bc0:	0800b834 	.word	0x0800b834

08001bc4 <printTurn>:

void printTurn(){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	setCursor(14, 0);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	200e      	movs	r0, #14
 8001bcc:	f7fe fdbe 	bl	800074c <setCursor>
	if(turn == 0){
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <printTurn+0x28>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <printTurn+0x1c>
		print("W");
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <printTurn+0x2c>)
 8001bda:	f7fe fdff 	bl	80007dc <print>
	}
	else{
		print("B");
	}
}
 8001bde:	e002      	b.n	8001be6 <printTurn+0x22>
		print("B");
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <printTurn+0x30>)
 8001be2:	f7fe fdfb 	bl	80007dc <print>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000005c 	.word	0x2000005c
 8001bf0:	0800b838 	.word	0x0800b838
 8001bf4:	0800b83c 	.word	0x0800b83c

08001bf8 <printLocation>:

void printLocation(){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    switch(y){
 8001bfc:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <printLocation+0xe4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	d861      	bhi.n	8001cc8 <printLocation+0xd0>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <printLocation+0x14>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c2d 	.word	0x08001c2d
 8001c10:	08001c3f 	.word	0x08001c3f
 8001c14:	08001c51 	.word	0x08001c51
 8001c18:	08001c63 	.word	0x08001c63
 8001c1c:	08001c81 	.word	0x08001c81
 8001c20:	08001c93 	.word	0x08001c93
 8001c24:	08001ca5 	.word	0x08001ca5
 8001c28:	08001cb7 	.word	0x08001cb7
        case 0:
             sprintf(currentLocation, "A%d",x+1);
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <printLocation+0xe8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	461a      	mov	r2, r3
 8001c34:	492b      	ldr	r1, [pc, #172]	; (8001ce4 <printLocation+0xec>)
 8001c36:	482c      	ldr	r0, [pc, #176]	; (8001ce8 <printLocation+0xf0>)
 8001c38:	f008 fcd4 	bl	800a5e4 <siprintf>
             break;
 8001c3c:	e044      	b.n	8001cc8 <printLocation+0xd0>

        case 1:
             sprintf(currentLocation, "B%d",x+1);
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <printLocation+0xe8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	461a      	mov	r2, r3
 8001c46:	4929      	ldr	r1, [pc, #164]	; (8001cec <printLocation+0xf4>)
 8001c48:	4827      	ldr	r0, [pc, #156]	; (8001ce8 <printLocation+0xf0>)
 8001c4a:	f008 fccb 	bl	800a5e4 <siprintf>
             break;
 8001c4e:	e03b      	b.n	8001cc8 <printLocation+0xd0>

        case 2:
             sprintf(currentLocation, "C%d",x+1);
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <printLocation+0xe8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	461a      	mov	r2, r3
 8001c58:	4925      	ldr	r1, [pc, #148]	; (8001cf0 <printLocation+0xf8>)
 8001c5a:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <printLocation+0xf0>)
 8001c5c:	f008 fcc2 	bl	800a5e4 <siprintf>
             break;
 8001c60:	e032      	b.n	8001cc8 <printLocation+0xd0>

        case 3:
             printf("x: %d\n", x);
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <printLocation+0xe8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4822      	ldr	r0, [pc, #136]	; (8001cf4 <printLocation+0xfc>)
 8001c6a:	f008 fc2d 	bl	800a4c8 <iprintf>
             sprintf(currentLocation, "D%d",x+1);
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <printLocation+0xe8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	461a      	mov	r2, r3
 8001c76:	4920      	ldr	r1, [pc, #128]	; (8001cf8 <printLocation+0x100>)
 8001c78:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <printLocation+0xf0>)
 8001c7a:	f008 fcb3 	bl	800a5e4 <siprintf>
             break;
 8001c7e:	e023      	b.n	8001cc8 <printLocation+0xd0>

        case 4:
             sprintf(currentLocation, "E%d",x+1);
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <printLocation+0xe8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	461a      	mov	r2, r3
 8001c88:	491c      	ldr	r1, [pc, #112]	; (8001cfc <printLocation+0x104>)
 8001c8a:	4817      	ldr	r0, [pc, #92]	; (8001ce8 <printLocation+0xf0>)
 8001c8c:	f008 fcaa 	bl	800a5e4 <siprintf>
             break;
 8001c90:	e01a      	b.n	8001cc8 <printLocation+0xd0>

        case 5:
             sprintf(currentLocation, "F%d",x+1);
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <printLocation+0xe8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4919      	ldr	r1, [pc, #100]	; (8001d00 <printLocation+0x108>)
 8001c9c:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <printLocation+0xf0>)
 8001c9e:	f008 fca1 	bl	800a5e4 <siprintf>
             break;
 8001ca2:	e011      	b.n	8001cc8 <printLocation+0xd0>

        case 6:
             sprintf(currentLocation, "G%d",x+1);
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <printLocation+0xe8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	461a      	mov	r2, r3
 8001cac:	4915      	ldr	r1, [pc, #84]	; (8001d04 <printLocation+0x10c>)
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <printLocation+0xf0>)
 8001cb0:	f008 fc98 	bl	800a5e4 <siprintf>
             break;
 8001cb4:	e008      	b.n	8001cc8 <printLocation+0xd0>

        case 7:
             sprintf(currentLocation, "H%d",x+1);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <printLocation+0xe8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4912      	ldr	r1, [pc, #72]	; (8001d08 <printLocation+0x110>)
 8001cc0:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <printLocation+0xf0>)
 8001cc2:	f008 fc8f 	bl	800a5e4 <siprintf>
             break;
 8001cc6:	bf00      	nop
    }
    setCursor(17, 0);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2011      	movs	r0, #17
 8001ccc:	f7fe fd3e 	bl	800074c <setCursor>
    print(currentLocation);
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <printLocation+0xf0>)
 8001cd2:	f7fe fd83 	bl	80007dc <print>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000050 	.word	0x20000050
 8001ce0:	2000004c 	.word	0x2000004c
 8001ce4:	0800b840 	.word	0x0800b840
 8001ce8:	20000148 	.word	0x20000148
 8001cec:	0800b844 	.word	0x0800b844
 8001cf0:	0800b848 	.word	0x0800b848
 8001cf4:	0800b84c 	.word	0x0800b84c
 8001cf8:	0800b854 	.word	0x0800b854
 8001cfc:	0800b858 	.word	0x0800b858
 8001d00:	0800b85c 	.word	0x0800b85c
 8001d04:	0800b860 	.word	0x0800b860
 8001d08:	0800b864 	.word	0x0800b864

08001d0c <min>:
            change[i][j] = 0;
        }
    }
}

int min(int a, int b){
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
    return(a > b) ? b : a;
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	bfa8      	it	ge
 8001d1e:	4613      	movge	r3, r2
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <max>:

int max(int a, int b){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    return(a < b) ? b : a;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	bfb8      	it	lt
 8001d3e:	4613      	movlt	r3, r2
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <isValid>:

int isValid(int turn, int mi, int mj){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
    int i, j;

    int opponent = (turn + 1) %2;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	bfb8      	it	lt
 8001d64:	425b      	neglt	r3, r3
 8001d66:	617b      	str	r3, [r7, #20]
    if(board[mi][mj] != -1){
 8001d68:	499b      	ldr	r1, [pc, #620]	; (8001fd8 <isValid+0x28c>)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	00da      	lsls	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7a:	d001      	beq.n	8001d80 <isValid+0x34>
        return(0);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e1ab      	b.n	80020d8 <isValid+0x38c>
    }
    //up
    for(i = mi- 1; board[i][mj]==opponent && i >= 0; i--);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	e002      	b.n	8001d8e <isValid+0x42>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	4992      	ldr	r1, [pc, #584]	; (8001fd8 <isValid+0x28c>)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	00da      	lsls	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d102      	bne.n	8001da8 <isValid+0x5c>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	daef      	bge.n	8001d88 <isValid+0x3c>
    if(i >= 0 && mi-1!=i){
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db13      	blt.n	8001dd6 <isValid+0x8a>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d00e      	beq.n	8001dd6 <isValid+0x8a>
        if(board[i][mj] == turn){
 8001db8:	4987      	ldr	r1, [pc, #540]	; (8001fd8 <isValid+0x28c>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	00da      	lsls	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d104      	bne.n	8001dd6 <isValid+0x8a>
            printf("1\n");
 8001dcc:	4883      	ldr	r0, [pc, #524]	; (8001fdc <isValid+0x290>)
 8001dce:	f008 fc01 	bl	800a5d4 <puts>
            return(1);
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e180      	b.n	80020d8 <isValid+0x38c>

        }
    }
    //down
    for(i = mi+ 1; board[i][mj]==opponent && i < 8; i++);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	e002      	b.n	8001de4 <isValid+0x98>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	497c      	ldr	r1, [pc, #496]	; (8001fd8 <isValid+0x28c>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	00da      	lsls	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d102      	bne.n	8001dfe <isValid+0xb2>
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b07      	cmp	r3, #7
 8001dfc:	ddef      	ble.n	8001dde <isValid+0x92>
    if(i < 8 && mi+1!=i){
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	2b07      	cmp	r3, #7
 8001e02:	dc13      	bgt.n	8001e2c <isValid+0xe0>
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	3301      	adds	r3, #1
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d00e      	beq.n	8001e2c <isValid+0xe0>
        if(board[i][mj] == turn){
 8001e0e:	4972      	ldr	r1, [pc, #456]	; (8001fd8 <isValid+0x28c>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	00da      	lsls	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d104      	bne.n	8001e2c <isValid+0xe0>
            printf("2\n");
 8001e22:	486f      	ldr	r0, [pc, #444]	; (8001fe0 <isValid+0x294>)
 8001e24:	f008 fbd6 	bl	800a5d4 <puts>
            return(1);
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e155      	b.n	80020d8 <isValid+0x38c>

        }
    }
    //left
    for(j = mj - 1; board[mi][j]==opponent && j >= 0; j--);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e002      	b.n	8001e3a <isValid+0xee>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4967      	ldr	r1, [pc, #412]	; (8001fd8 <isValid+0x28c>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	00da      	lsls	r2, r3, #3
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	4413      	add	r3, r2
 8001e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d102      	bne.n	8001e54 <isValid+0x108>
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	daef      	bge.n	8001e34 <isValid+0xe8>
    if(j >= 0 && mj-1!=j){
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db13      	blt.n	8001e82 <isValid+0x136>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d00e      	beq.n	8001e82 <isValid+0x136>
        if(board[mi][j] == turn){
 8001e64:	495c      	ldr	r1, [pc, #368]	; (8001fd8 <isValid+0x28c>)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	00da      	lsls	r2, r3, #3
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d104      	bne.n	8001e82 <isValid+0x136>
            printf("3\n");
 8001e78:	485a      	ldr	r0, [pc, #360]	; (8001fe4 <isValid+0x298>)
 8001e7a:	f008 fbab 	bl	800a5d4 <puts>
            return(1);
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e12a      	b.n	80020d8 <isValid+0x38c>

        }
    }
    //right
    for(j = mj + 1; board[mi][j]==opponent && j < 8; j++);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3301      	adds	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	e002      	b.n	8001e90 <isValid+0x144>
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	4951      	ldr	r1, [pc, #324]	; (8001fd8 <isValid+0x28c>)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	00da      	lsls	r2, r3, #3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d102      	bne.n	8001eaa <isValid+0x15e>
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	ddef      	ble.n	8001e8a <isValid+0x13e>
    if(j < 8 && mj+1!=j){
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b07      	cmp	r3, #7
 8001eae:	dc13      	bgt.n	8001ed8 <isValid+0x18c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d00e      	beq.n	8001ed8 <isValid+0x18c>
        if(board[mi][j] == turn){
 8001eba:	4947      	ldr	r1, [pc, #284]	; (8001fd8 <isValid+0x28c>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	00da      	lsls	r2, r3, #3
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d104      	bne.n	8001ed8 <isValid+0x18c>
            printf("4\n");
 8001ece:	4846      	ldr	r0, [pc, #280]	; (8001fe8 <isValid+0x29c>)
 8001ed0:	f008 fb80 	bl	800a5d4 <puts>
            return(1);
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0ff      	b.n	80020d8 <isValid+0x38c>

        }
    }
    //left up diagonal
    for(i = mi-1, j = mj-1; board[i][j]==opponent && i>=0 && j>=0; i--, j--);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	e005      	b.n	8001ef2 <isValid+0x1a6>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	4939      	ldr	r1, [pc, #228]	; (8001fd8 <isValid+0x28c>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	00da      	lsls	r2, r3, #3
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4413      	add	r3, r2
 8001efc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d105      	bne.n	8001f12 <isValid+0x1c6>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db02      	blt.n	8001f12 <isValid+0x1c6>
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	dae9      	bge.n	8001ee6 <isValid+0x19a>
    if(i >=0 && j >= 0 && mi-1!=i && mj-1!=j){
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db1b      	blt.n	8001f50 <isValid+0x204>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db18      	blt.n	8001f50 <isValid+0x204>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d013      	beq.n	8001f50 <isValid+0x204>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d00e      	beq.n	8001f50 <isValid+0x204>
        if(board[i][j] == turn){
 8001f32:	4929      	ldr	r1, [pc, #164]	; (8001fd8 <isValid+0x28c>)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	00da      	lsls	r2, r3, #3
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d104      	bne.n	8001f50 <isValid+0x204>
            printf("5\n");
 8001f46:	4829      	ldr	r0, [pc, #164]	; (8001fec <isValid+0x2a0>)
 8001f48:	f008 fb44 	bl	800a5d4 <puts>
            return(1);
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0c3      	b.n	80020d8 <isValid+0x38c>

        }
    }
    //right down diagonal
    for(i = mi+1, j = mj+1; board[i][j]==opponent && i<8 && j<8; i++, j++);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3301      	adds	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e005      	b.n	8001f6a <isValid+0x21e>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	491b      	ldr	r1, [pc, #108]	; (8001fd8 <isValid+0x28c>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	00da      	lsls	r2, r3, #3
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4413      	add	r3, r2
 8001f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d105      	bne.n	8001f8a <isValid+0x23e>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	2b07      	cmp	r3, #7
 8001f82:	dc02      	bgt.n	8001f8a <isValid+0x23e>
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b07      	cmp	r3, #7
 8001f88:	dde9      	ble.n	8001f5e <isValid+0x212>
    if(i < 8 && j < 8 && mi+1!=i && mj+1!=j){
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	dc1b      	bgt.n	8001fc8 <isValid+0x27c>
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b07      	cmp	r3, #7
 8001f94:	dc18      	bgt.n	8001fc8 <isValid+0x27c>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d013      	beq.n	8001fc8 <isValid+0x27c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d00e      	beq.n	8001fc8 <isValid+0x27c>
        if(board[i][j] == turn){
 8001faa:	490b      	ldr	r1, [pc, #44]	; (8001fd8 <isValid+0x28c>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	00da      	lsls	r2, r3, #3
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d104      	bne.n	8001fc8 <isValid+0x27c>
            printf("6\n");
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <isValid+0x2a4>)
 8001fc0:	f008 fb08 	bl	800a5d4 <puts>
            return(1);
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e087      	b.n	80020d8 <isValid+0x38c>

        }
    }
    //right up diagonal
    for(i = mi-1, j = mj+1; board[i][j]==opponent && i>=0 && j<8; i--, j++);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e014      	b.n	8002000 <isValid+0x2b4>
 8001fd6:	bf00      	nop
 8001fd8:	20000898 	.word	0x20000898
 8001fdc:	0800b868 	.word	0x0800b868
 8001fe0:	0800b86c 	.word	0x0800b86c
 8001fe4:	0800b870 	.word	0x0800b870
 8001fe8:	0800b874 	.word	0x0800b874
 8001fec:	0800b878 	.word	0x0800b878
 8001ff0:	0800b87c 	.word	0x0800b87c
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <isValid+0x394>)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	00da      	lsls	r2, r3, #3
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d105      	bne.n	8002020 <isValid+0x2d4>
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db02      	blt.n	8002020 <isValid+0x2d4>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b07      	cmp	r3, #7
 800201e:	dde9      	ble.n	8001ff4 <isValid+0x2a8>
    if(i >=0 && j < 8 && mi-1!=i && mj+1!=j){
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db1b      	blt.n	800205e <isValid+0x312>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b07      	cmp	r3, #7
 800202a:	dc18      	bgt.n	800205e <isValid+0x312>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3b01      	subs	r3, #1
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	429a      	cmp	r2, r3
 8002034:	d013      	beq.n	800205e <isValid+0x312>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3301      	adds	r3, #1
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	429a      	cmp	r2, r3
 800203e:	d00e      	beq.n	800205e <isValid+0x312>
        if(board[i][j] == turn){
 8002040:	4927      	ldr	r1, [pc, #156]	; (80020e0 <isValid+0x394>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	00da      	lsls	r2, r3, #3
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4413      	add	r3, r2
 800204a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d104      	bne.n	800205e <isValid+0x312>
            printf("7\n");
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <isValid+0x398>)
 8002056:	f008 fabd 	bl	800a5d4 <puts>
            return(1);
 800205a:	2301      	movs	r3, #1
 800205c:	e03c      	b.n	80020d8 <isValid+0x38c>

        }
    }
    //left down diagonal
    for(i = mi+1, j = mj-1; board[i][j]==opponent && i<8 && j>=0; i++, j--);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	e005      	b.n	8002078 <isValid+0x32c>
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3301      	adds	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3b01      	subs	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	4919      	ldr	r1, [pc, #100]	; (80020e0 <isValid+0x394>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	00da      	lsls	r2, r3, #3
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4413      	add	r3, r2
 8002082:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	d105      	bne.n	8002098 <isValid+0x34c>
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b07      	cmp	r3, #7
 8002090:	dc02      	bgt.n	8002098 <isValid+0x34c>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	dae9      	bge.n	800206c <isValid+0x320>
    if(i < 8 && j >= 0 && mi+1!=i && mj-1!=j){
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b07      	cmp	r3, #7
 800209c:	dc1b      	bgt.n	80020d6 <isValid+0x38a>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db18      	blt.n	80020d6 <isValid+0x38a>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d013      	beq.n	80020d6 <isValid+0x38a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d00e      	beq.n	80020d6 <isValid+0x38a>
        if(board[i][j] == turn){
 80020b8:	4909      	ldr	r1, [pc, #36]	; (80020e0 <isValid+0x394>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	00da      	lsls	r2, r3, #3
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4413      	add	r3, r2
 80020c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d104      	bne.n	80020d6 <isValid+0x38a>
            printf("8\n");
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <isValid+0x39c>)
 80020ce:	f008 fa81 	bl	800a5d4 <puts>
            return(1);
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <isValid+0x38c>
            printf("%d %d \n", i , j);

        }
    }
    return(0);
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000898 	.word	0x20000898
 80020e4:	0800b880 	.word	0x0800b880
 80020e8:	0800b884 	.word	0x0800b884

080020ec <canPlay>:

int canPlay(int turn){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    int i, j;
    int opponent = (turn + 1) %2;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3301      	adds	r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	bfb8      	it	lt
 8002100:	425b      	neglt	r3, r3
 8002102:	61fb      	str	r3, [r7, #28]
    int right, left, up, down;

    for(i = 0; i < 8; i++){
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	e091      	b.n	800222e <canPlay+0x142>
        for(j = 0; j < 8; j++){
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	e087      	b.n	8002220 <canPlay+0x134>
            if(board[i][j] == -1){
 8002110:	494b      	ldr	r1, [pc, #300]	; (8002240 <canPlay+0x154>)
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	00da      	lsls	r2, r3, #3
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	4413      	add	r3, r2
 800211a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d17a      	bne.n	800221a <canPlay+0x12e>
                left = max(j-1, 0);
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	3b01      	subs	r3, #1
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fdfe 	bl	8001d2c <max>
 8002130:	61b8      	str	r0, [r7, #24]
                right = min(j+1, 7);
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	3301      	adds	r3, #1
 8002136:	2107      	movs	r1, #7
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fde7 	bl	8001d0c <min>
 800213e:	6178      	str	r0, [r7, #20]
                up = max(i-1, 0);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	3b01      	subs	r3, #1
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fdf0 	bl	8001d2c <max>
 800214c:	6138      	str	r0, [r7, #16]
                down = min(i+1, 7);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	2107      	movs	r1, #7
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fdd9 	bl	8001d0c <min>
 800215a:	60f8      	str	r0, [r7, #12]

                if(board[i][left] == opponent || board[i][right] == opponent
 800215c:	4938      	ldr	r1, [pc, #224]	; (8002240 <canPlay+0x154>)
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	00da      	lsls	r2, r3, #3
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4413      	add	r3, r2
 8002166:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	429a      	cmp	r2, r3
 800216e:	d045      	beq.n	80021fc <canPlay+0x110>
 8002170:	4933      	ldr	r1, [pc, #204]	; (8002240 <canPlay+0x154>)
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	00da      	lsls	r2, r3, #3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	4413      	add	r3, r2
 800217a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	429a      	cmp	r2, r3
 8002182:	d03b      	beq.n	80021fc <canPlay+0x110>
                   || board[down][j] == opponent || board[up][j] == opponent
 8002184:	492e      	ldr	r1, [pc, #184]	; (8002240 <canPlay+0x154>)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	00da      	lsls	r2, r3, #3
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	4413      	add	r3, r2
 800218e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	d031      	beq.n	80021fc <canPlay+0x110>
 8002198:	4929      	ldr	r1, [pc, #164]	; (8002240 <canPlay+0x154>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	00da      	lsls	r2, r3, #3
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	4413      	add	r3, r2
 80021a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d027      	beq.n	80021fc <canPlay+0x110>
                   || board[up][left] == opponent || board[up][right] == opponent
 80021ac:	4924      	ldr	r1, [pc, #144]	; (8002240 <canPlay+0x154>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	00da      	lsls	r2, r3, #3
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4413      	add	r3, r2
 80021b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d01d      	beq.n	80021fc <canPlay+0x110>
 80021c0:	491f      	ldr	r1, [pc, #124]	; (8002240 <canPlay+0x154>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	00da      	lsls	r2, r3, #3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4413      	add	r3, r2
 80021ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d013      	beq.n	80021fc <canPlay+0x110>
                   || board[down][left] == opponent || board[up][right] == opponent){
 80021d4:	491a      	ldr	r1, [pc, #104]	; (8002240 <canPlay+0x154>)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	00da      	lsls	r2, r3, #3
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d009      	beq.n	80021fc <canPlay+0x110>
 80021e8:	4915      	ldr	r1, [pc, #84]	; (8002240 <canPlay+0x154>)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	00da      	lsls	r2, r3, #3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4413      	add	r3, r2
 80021f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d10e      	bne.n	800221a <canPlay+0x12e>

                       if(isValid(turn, i, j) == 1){
 80021fc:	6a3a      	ldr	r2, [r7, #32]
 80021fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fda3 	bl	8001d4c <isValid>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <canPlay+0x12e>
                           printf("i:%d  j:%d \n", i, j);
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <canPlay+0x158>)
 8002212:	f008 f959 	bl	800a4c8 <iprintf>
                           return(1);
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <canPlay+0x14c>
        for(j = 0; j < 8; j++){
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	3301      	adds	r3, #1
 800221e:	623b      	str	r3, [r7, #32]
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b07      	cmp	r3, #7
 8002224:	f77f af74 	ble.w	8002110 <canPlay+0x24>
    for(i = 0; i < 8; i++){
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	3301      	adds	r3, #1
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	2b07      	cmp	r3, #7
 8002232:	f77f af6a 	ble.w	800210a <canPlay+0x1e>
                   }
            }

        }
    }
    return(0);
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000898 	.word	0x20000898
 8002244:	0800b888 	.word	0x0800b888

08002248 <sandwich>:

void sandwich(int turn, int mi, int mj){
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
    int i, j, k , z;
    int opponent = (turn + 1) %2;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	bfb8      	it	lt
 8002260:	425b      	neglt	r3, r3
 8002262:	617b      	str	r3, [r7, #20]
    board[mi][mj] = turn;
 8002264:	4993      	ldr	r1, [pc, #588]	; (80024b4 <sandwich+0x26c>)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	00da      	lsls	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    change[mi][mj] = 1;
 8002274:	4990      	ldr	r1, [pc, #576]	; (80024b8 <sandwich+0x270>)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	00da      	lsls	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	2201      	movs	r2, #1
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    //up

    for(i = mi- 1; board[i][mj]==opponent && i >= 0; i--);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3b01      	subs	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	e002      	b.n	8002292 <sandwich+0x4a>
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	3b01      	subs	r3, #1
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	4988      	ldr	r1, [pc, #544]	; (80024b4 <sandwich+0x26c>)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	00da      	lsls	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d102      	bne.n	80022ac <sandwich+0x64>
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	daef      	bge.n	800228c <sandwich+0x44>
    if(i >= 0 && mi-1!=i){
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db2c      	blt.n	800230c <sandwich+0xc4>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d027      	beq.n	800230c <sandwich+0xc4>
        if(board[i][mj] == turn){
 80022bc:	497d      	ldr	r1, [pc, #500]	; (80024b4 <sandwich+0x26c>)
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	00da      	lsls	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d11d      	bne.n	800230c <sandwich+0xc4>
            printf("1\n");
 80022d0:	487a      	ldr	r0, [pc, #488]	; (80024bc <sandwich+0x274>)
 80022d2:	f008 f97f 	bl	800a5d4 <puts>

            for(k = i+1; k < mi; k++){
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	e012      	b.n	8002304 <sandwich+0xbc>
                board[k][mj] = turn;
 80022de:	4975      	ldr	r1, [pc, #468]	; (80024b4 <sandwich+0x26c>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	00da      	lsls	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[k][mj] = 1;
 80022ee:	4972      	ldr	r1, [pc, #456]	; (80024b8 <sandwich+0x270>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	00da      	lsls	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	2201      	movs	r2, #1
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(k = i+1; k < mi; k++){
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbe8      	blt.n	80022de <sandwich+0x96>
            }
        }
    }

    //down
    for(i = mi+ 1; board[i][mj]==opponent && i < 8; i++);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	3301      	adds	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	e002      	b.n	800231a <sandwich+0xd2>
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	3301      	adds	r3, #1
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	4966      	ldr	r1, [pc, #408]	; (80024b4 <sandwich+0x26c>)
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	00da      	lsls	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	429a      	cmp	r2, r3
 800232c:	d102      	bne.n	8002334 <sandwich+0xec>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	2b07      	cmp	r3, #7
 8002332:	ddef      	ble.n	8002314 <sandwich+0xcc>
    if(i < 8 && mi+1!=i){
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	2b07      	cmp	r3, #7
 8002338:	dc2c      	bgt.n	8002394 <sandwich+0x14c>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002340:	429a      	cmp	r2, r3
 8002342:	d027      	beq.n	8002394 <sandwich+0x14c>
        if(board[i][mj] == turn){
 8002344:	495b      	ldr	r1, [pc, #364]	; (80024b4 <sandwich+0x26c>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	00da      	lsls	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d11d      	bne.n	8002394 <sandwich+0x14c>
            printf("2\n");
 8002358:	4859      	ldr	r0, [pc, #356]	; (80024c0 <sandwich+0x278>)
 800235a:	f008 f93b 	bl	800a5d4 <puts>

            for(k=i-1; k > mi; k--){
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	3b01      	subs	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	e012      	b.n	800238c <sandwich+0x144>
                board[k][mj] = turn;
 8002366:	4953      	ldr	r1, [pc, #332]	; (80024b4 <sandwich+0x26c>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	00da      	lsls	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[k][mj] = 1;
 8002376:	4950      	ldr	r1, [pc, #320]	; (80024b8 <sandwich+0x270>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	00da      	lsls	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	2201      	movs	r2, #1
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(k=i-1; k > mi; k--){
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b01      	subs	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	dce8      	bgt.n	8002366 <sandwich+0x11e>
            }

        }
    }
    //left
    for(j = mj - 1; board[mi][j]==opponent && j >= 0; j--);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	e002      	b.n	80023a2 <sandwich+0x15a>
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	3b01      	subs	r3, #1
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	4944      	ldr	r1, [pc, #272]	; (80024b4 <sandwich+0x26c>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	00da      	lsls	r2, r3, #3
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	4413      	add	r3, r2
 80023ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d102      	bne.n	80023bc <sandwich+0x174>
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	daef      	bge.n	800239c <sandwich+0x154>
    if(j >= 0 && mj-1!=j){
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db2c      	blt.n	800241c <sandwich+0x1d4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	6a3a      	ldr	r2, [r7, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d027      	beq.n	800241c <sandwich+0x1d4>
        if(board[mi][j] == turn){
 80023cc:	4939      	ldr	r1, [pc, #228]	; (80024b4 <sandwich+0x26c>)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	00da      	lsls	r2, r3, #3
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	4413      	add	r3, r2
 80023d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d11d      	bne.n	800241c <sandwich+0x1d4>
            printf("3\n");
 80023e0:	4838      	ldr	r0, [pc, #224]	; (80024c4 <sandwich+0x27c>)
 80023e2:	f008 f8f7 	bl	800a5d4 <puts>

            for(z=j+1; z<mj; z++){
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	3301      	adds	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e012      	b.n	8002414 <sandwich+0x1cc>
                board[mi][z] = turn;
 80023ee:	4931      	ldr	r1, [pc, #196]	; (80024b4 <sandwich+0x26c>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	00da      	lsls	r2, r3, #3
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	4413      	add	r3, r2
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[mi][z] = 1;
 80023fe:	492e      	ldr	r1, [pc, #184]	; (80024b8 <sandwich+0x270>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	00da      	lsls	r2, r3, #3
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	2201      	movs	r2, #1
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(z=j+1; z<mj; z++){
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	3301      	adds	r3, #1
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbe8      	blt.n	80023ee <sandwich+0x1a6>
            }

        }
    }
    //right
    for(j = mj + 1; board[mi][j]==opponent && j < 8; j++);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	e002      	b.n	800242a <sandwich+0x1e2>
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	3301      	adds	r3, #1
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	4922      	ldr	r1, [pc, #136]	; (80024b4 <sandwich+0x26c>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	00da      	lsls	r2, r3, #3
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	4413      	add	r3, r2
 8002434:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	429a      	cmp	r2, r3
 800243c:	d102      	bne.n	8002444 <sandwich+0x1fc>
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	2b07      	cmp	r3, #7
 8002442:	ddef      	ble.n	8002424 <sandwich+0x1dc>
    if(j < 8 && mj+1!=j){
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b07      	cmp	r3, #7
 8002448:	dc2c      	bgt.n	80024a4 <sandwich+0x25c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3301      	adds	r3, #1
 800244e:	6a3a      	ldr	r2, [r7, #32]
 8002450:	429a      	cmp	r2, r3
 8002452:	d027      	beq.n	80024a4 <sandwich+0x25c>
        if(board[mi][j] == turn){
 8002454:	4917      	ldr	r1, [pc, #92]	; (80024b4 <sandwich+0x26c>)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	00da      	lsls	r2, r3, #3
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	4413      	add	r3, r2
 800245e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d11d      	bne.n	80024a4 <sandwich+0x25c>
            printf("4\n");
 8002468:	4817      	ldr	r0, [pc, #92]	; (80024c8 <sandwich+0x280>)
 800246a:	f008 f8b3 	bl	800a5d4 <puts>

            for(z=j-1; z>mj; z--){
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	3b01      	subs	r3, #1
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e012      	b.n	800249c <sandwich+0x254>
                board[mi][z] = turn;
 8002476:	490f      	ldr	r1, [pc, #60]	; (80024b4 <sandwich+0x26c>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	00da      	lsls	r2, r3, #3
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4413      	add	r3, r2
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[mi][z] = 1;
 8002486:	490c      	ldr	r1, [pc, #48]	; (80024b8 <sandwich+0x270>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	00da      	lsls	r2, r3, #3
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	2201      	movs	r2, #1
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(z=j-1; z>mj; z--){
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3b01      	subs	r3, #1
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dce8      	bgt.n	8002476 <sandwich+0x22e>
            }

        }
    }
    //left up diagonal
    for(i = mi-1, j = mj-1; board[i][j]==opponent && i>=0 && j>=0; i--, j--);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	e012      	b.n	80024d8 <sandwich+0x290>
 80024b2:	bf00      	nop
 80024b4:	20000898 	.word	0x20000898
 80024b8:	20000798 	.word	0x20000798
 80024bc:	0800b868 	.word	0x0800b868
 80024c0:	0800b86c 	.word	0x0800b86c
 80024c4:	0800b870 	.word	0x0800b870
 80024c8:	0800b874 	.word	0x0800b874
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	3b01      	subs	r3, #1
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	498b      	ldr	r1, [pc, #556]	; (8002708 <sandwich+0x4c0>)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	00da      	lsls	r2, r3, #3
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	4413      	add	r3, r2
 80024e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d105      	bne.n	80024f8 <sandwich+0x2b0>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db02      	blt.n	80024f8 <sandwich+0x2b0>
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	dae9      	bge.n	80024cc <sandwich+0x284>
    if(i >=0 && j >= 0 && mi-1!=i && mj-1!=j){
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db3e      	blt.n	800257c <sandwich+0x334>
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db3b      	blt.n	800257c <sandwich+0x334>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3b01      	subs	r3, #1
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	429a      	cmp	r2, r3
 800250c:	d036      	beq.n	800257c <sandwich+0x334>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3b01      	subs	r3, #1
 8002512:	6a3a      	ldr	r2, [r7, #32]
 8002514:	429a      	cmp	r2, r3
 8002516:	d031      	beq.n	800257c <sandwich+0x334>
        if(board[i][j] == turn){
 8002518:	497b      	ldr	r1, [pc, #492]	; (8002708 <sandwich+0x4c0>)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	00da      	lsls	r2, r3, #3
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	4413      	add	r3, r2
 8002522:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d127      	bne.n	800257c <sandwich+0x334>
            printf("5\n");
 800252c:	4877      	ldr	r0, [pc, #476]	; (800270c <sandwich+0x4c4>)
 800252e:	f008 f851 	bl	800a5d4 <puts>

            for(k=i+1,z=j+1; k<mi && z<mj; k++,z++){
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	3301      	adds	r3, #1
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e015      	b.n	800256c <sandwich+0x324>
                board[k][z] = turn;
 8002540:	4971      	ldr	r1, [pc, #452]	; (8002708 <sandwich+0x4c0>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	00da      	lsls	r2, r3, #3
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[k][z] = 1;
 8002550:	496f      	ldr	r1, [pc, #444]	; (8002710 <sandwich+0x4c8>)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	00da      	lsls	r2, r3, #3
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	2201      	movs	r2, #1
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(k=i+1,z=j+1; k<mi && z<mj; k++,z++){
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3301      	adds	r3, #1
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	429a      	cmp	r2, r3
 8002572:	da03      	bge.n	800257c <sandwich+0x334>
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	dbe1      	blt.n	8002540 <sandwich+0x2f8>
            }

        }
    }
    //right down diagonal
    for(i = mi+1, j = mj+1; board[i][j]==opponent && i<8 && j<8; i++, j++);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3301      	adds	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3301      	adds	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	e005      	b.n	8002596 <sandwich+0x34e>
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	3301      	adds	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	3301      	adds	r3, #1
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	495c      	ldr	r1, [pc, #368]	; (8002708 <sandwich+0x4c0>)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	00da      	lsls	r2, r3, #3
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	4413      	add	r3, r2
 80025a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d105      	bne.n	80025b6 <sandwich+0x36e>
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	2b07      	cmp	r3, #7
 80025ae:	dc02      	bgt.n	80025b6 <sandwich+0x36e>
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2b07      	cmp	r3, #7
 80025b4:	dde9      	ble.n	800258a <sandwich+0x342>
    if(i < 8 && j < 8 && mi+1!=i && mj+1!=j){
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	2b07      	cmp	r3, #7
 80025ba:	dc3e      	bgt.n	800263a <sandwich+0x3f2>
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	2b07      	cmp	r3, #7
 80025c0:	dc3b      	bgt.n	800263a <sandwich+0x3f2>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3301      	adds	r3, #1
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d036      	beq.n	800263a <sandwich+0x3f2>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3301      	adds	r3, #1
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d031      	beq.n	800263a <sandwich+0x3f2>
        if(board[i][j] == turn){
 80025d6:	494c      	ldr	r1, [pc, #304]	; (8002708 <sandwich+0x4c0>)
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	00da      	lsls	r2, r3, #3
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	4413      	add	r3, r2
 80025e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d127      	bne.n	800263a <sandwich+0x3f2>
            printf("6\n");
 80025ea:	484a      	ldr	r0, [pc, #296]	; (8002714 <sandwich+0x4cc>)
 80025ec:	f007 fff2 	bl	800a5d4 <puts>

            for(k=i-1, z=j-1; k>mi && z>mj; k--, z--){
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	3b01      	subs	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	e015      	b.n	800262a <sandwich+0x3e2>
                board[k][z] = turn;
 80025fe:	4942      	ldr	r1, [pc, #264]	; (8002708 <sandwich+0x4c0>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	00da      	lsls	r2, r3, #3
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[k][z] = 1;
 800260e:	4940      	ldr	r1, [pc, #256]	; (8002710 <sandwich+0x4c8>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	00da      	lsls	r2, r3, #3
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	2201      	movs	r2, #1
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(k=i-1, z=j-1; k>mi && z>mj; k--, z--){
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b01      	subs	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	3b01      	subs	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	dd03      	ble.n	800263a <sandwich+0x3f2>
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	dce1      	bgt.n	80025fe <sandwich+0x3b6>
            }

        }
    }
    //right up diagonal
    for(i = mi-1, j = mj+1; board[i][j]==opponent && i>=0 && j<8; i--, j++);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3301      	adds	r3, #1
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	e005      	b.n	8002654 <sandwich+0x40c>
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3b01      	subs	r3, #1
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	3301      	adds	r3, #1
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	492c      	ldr	r1, [pc, #176]	; (8002708 <sandwich+0x4c0>)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	00da      	lsls	r2, r3, #3
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	4413      	add	r3, r2
 800265e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	429a      	cmp	r2, r3
 8002666:	d105      	bne.n	8002674 <sandwich+0x42c>
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	db02      	blt.n	8002674 <sandwich+0x42c>
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	2b07      	cmp	r3, #7
 8002672:	dde9      	ble.n	8002648 <sandwich+0x400>
    if(i >=0 && j < 8 && mi-1!=i && mj+1!=j){
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	db3e      	blt.n	80026f8 <sandwich+0x4b0>
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	2b07      	cmp	r3, #7
 800267e:	dc3b      	bgt.n	80026f8 <sandwich+0x4b0>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3b01      	subs	r3, #1
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	429a      	cmp	r2, r3
 8002688:	d036      	beq.n	80026f8 <sandwich+0x4b0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3301      	adds	r3, #1
 800268e:	6a3a      	ldr	r2, [r7, #32]
 8002690:	429a      	cmp	r2, r3
 8002692:	d031      	beq.n	80026f8 <sandwich+0x4b0>
        if(board[i][j] == turn){
 8002694:	491c      	ldr	r1, [pc, #112]	; (8002708 <sandwich+0x4c0>)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	4413      	add	r3, r2
 800269e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d127      	bne.n	80026f8 <sandwich+0x4b0>
            printf("7\n");
 80026a8:	481b      	ldr	r0, [pc, #108]	; (8002718 <sandwich+0x4d0>)
 80026aa:	f007 ff93 	bl	800a5d4 <puts>

            for(k=i+1, z=j-1; k<mi && z>mj; k++, z--){
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	e015      	b.n	80026e8 <sandwich+0x4a0>
                board[k][z] = turn;
 80026bc:	4912      	ldr	r1, [pc, #72]	; (8002708 <sandwich+0x4c0>)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	00da      	lsls	r2, r3, #3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4413      	add	r3, r2
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[k][z] = 1;
 80026cc:	4910      	ldr	r1, [pc, #64]	; (8002710 <sandwich+0x4c8>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	00da      	lsls	r2, r3, #3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4413      	add	r3, r2
 80026d6:	2201      	movs	r2, #1
 80026d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(k=i+1, z=j-1; k<mi && z>mj; k++, z--){
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	3301      	adds	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	da03      	bge.n	80026f8 <sandwich+0x4b0>
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dce1      	bgt.n	80026bc <sandwich+0x474>

        }
    }

    //left down diagonal
    for(i = mi+1, j = mj-1; board[i][j]==opponent && i<8 && j>=0; i++, j--);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3301      	adds	r3, #1
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3b01      	subs	r3, #1
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	e010      	b.n	8002728 <sandwich+0x4e0>
 8002706:	bf00      	nop
 8002708:	20000898 	.word	0x20000898
 800270c:	0800b878 	.word	0x0800b878
 8002710:	20000798 	.word	0x20000798
 8002714:	0800b87c 	.word	0x0800b87c
 8002718:	0800b880 	.word	0x0800b880
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	3301      	adds	r3, #1
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	3b01      	subs	r3, #1
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	492d      	ldr	r1, [pc, #180]	; (80027e0 <sandwich+0x598>)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	00da      	lsls	r2, r3, #3
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	4413      	add	r3, r2
 8002732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	d105      	bne.n	8002748 <sandwich+0x500>
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	2b07      	cmp	r3, #7
 8002740:	dc02      	bgt.n	8002748 <sandwich+0x500>
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b00      	cmp	r3, #0
 8002746:	dae9      	bge.n	800271c <sandwich+0x4d4>
    if(i < 8 && j >= 0 && mi+1!=i && mj-1!=j){
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	2b07      	cmp	r3, #7
 800274c:	dc43      	bgt.n	80027d6 <sandwich+0x58e>
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db40      	blt.n	80027d6 <sandwich+0x58e>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3301      	adds	r3, #1
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	429a      	cmp	r2, r3
 800275c:	d03b      	beq.n	80027d6 <sandwich+0x58e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3b01      	subs	r3, #1
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	429a      	cmp	r2, r3
 8002766:	d036      	beq.n	80027d6 <sandwich+0x58e>
        if(board[i][j] == turn){
 8002768:	491d      	ldr	r1, [pc, #116]	; (80027e0 <sandwich+0x598>)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	00da      	lsls	r2, r3, #3
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	4413      	add	r3, r2
 8002772:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d12c      	bne.n	80027d6 <sandwich+0x58e>
            printf("8\n");
 800277c:	4819      	ldr	r0, [pc, #100]	; (80027e4 <sandwich+0x59c>)
 800277e:	f007 ff29 	bl	800a5d4 <puts>
            printf("%d %d \n", i , j);
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002786:	4818      	ldr	r0, [pc, #96]	; (80027e8 <sandwich+0x5a0>)
 8002788:	f007 fe9e 	bl	800a4c8 <iprintf>

            for(k=i-1, z=j+1; k>mi && z<mj; k--, z++){
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	3b01      	subs	r3, #1
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	3301      	adds	r3, #1
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	e015      	b.n	80027c6 <sandwich+0x57e>
                board[k][z] = turn;
 800279a:	4911      	ldr	r1, [pc, #68]	; (80027e0 <sandwich+0x598>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                change[k][z] = 1;
 80027aa:	4910      	ldr	r1, [pc, #64]	; (80027ec <sandwich+0x5a4>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	00da      	lsls	r2, r3, #3
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	2201      	movs	r2, #1
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(k=i-1, z=j+1; k>mi && z<mj; k--, z++){
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b01      	subs	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	3301      	adds	r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dd03      	ble.n	80027d6 <sandwich+0x58e>
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dbe1      	blt.n	800279a <sandwich+0x552>

        }
    }


}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000898 	.word	0x20000898
 80027e4:	0800b884 	.word	0x0800b884
 80027e8:	0800b898 	.word	0x0800b898
 80027ec:	20000798 	.word	0x20000798

080027f0 <resetLED>:

void resetLED(){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fa:	4817      	ldr	r0, [pc, #92]	; (8002858 <resetLED+0x68>)
 80027fc:	f003 faea 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002806:	4814      	ldr	r0, [pc, #80]	; (8002858 <resetLED+0x68>)
 8002808:	f003 fae4 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002812:	4811      	ldr	r0, [pc, #68]	; (8002858 <resetLED+0x68>)
 8002814:	f003 fade 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800281e:	480e      	ldr	r0, [pc, #56]	; (8002858 <resetLED+0x68>)
 8002820:	f003 fad8 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800282a:	480b      	ldr	r0, [pc, #44]	; (8002858 <resetLED+0x68>)
 800282c:	f003 fad2 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002836:	4808      	ldr	r0, [pc, #32]	; (8002858 <resetLED+0x68>)
 8002838:	f003 facc 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <resetLED+0x68>)
 8002844:	f003 fac6 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284e:	4802      	ldr	r0, [pc, #8]	; (8002858 <resetLED+0x68>)
 8002850:	f003 fac0 	bl	8005dd4 <HAL_GPIO_WritePin>

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	48001000 	.word	0x48001000

0800285c <getScore>:

int getScore(int player){
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    int score = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
    int i, j;

    for(i=0; i<8; i++){
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e018      	b.n	80028a0 <getScore+0x44>
        for(j=0; j<8; j++){
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e00f      	b.n	8002894 <getScore+0x38>
            if(board[i][j] == player){
 8002874:	490f      	ldr	r1, [pc, #60]	; (80028b4 <getScore+0x58>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	00da      	lsls	r2, r3, #3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4413      	add	r3, r2
 800287e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d102      	bne.n	800288e <getScore+0x32>
                score++;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
        for(j=0; j<8; j++){
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3301      	adds	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b07      	cmp	r3, #7
 8002898:	ddec      	ble.n	8002874 <getScore+0x18>
    for(i=0; i<8; i++){
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3301      	adds	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	dde3      	ble.n	800286e <getScore+0x12>
            }
        }
    }

    return(score);
 80028a6:	697b      	ldr	r3, [r7, #20]

}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	20000898 	.word	0x20000898

080028b8 <getWinner>:

int getWinner(){
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

	if(whiteScore > blackScore)
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <getWinner+0x34>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <getWinner+0x38>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dd01      	ble.n	80028cc <getWinner+0x14>
		return 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e009      	b.n	80028e0 <getWinner+0x28>
	if(whiteScore < blackScore)
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <getWinner+0x34>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <getWinner+0x38>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	da01      	bge.n	80028dc <getWinner+0x24>
		return 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	e001      	b.n	80028e0 <getWinner+0x28>

	return -1;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000138 	.word	0x20000138
 80028f0:	2000013c 	.word	0x2000013c

080028f4 <printScore>:

void printScore(){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	setCursor(14, 2);
 80028f8:	2102      	movs	r1, #2
 80028fa:	200e      	movs	r0, #14
 80028fc:	f7fd ff26 	bl	800074c <setCursor>
	print(whiteStr);
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <printScore+0x24>)
 8002902:	f7fd ff6b 	bl	80007dc <print>
	setCursor(14, 3);
 8002906:	2103      	movs	r1, #3
 8002908:	200e      	movs	r0, #14
 800290a:	f7fd ff1f 	bl	800074c <setCursor>
	print(blackStr);
 800290e:	4803      	ldr	r0, [pc, #12]	; (800291c <printScore+0x28>)
 8002910:	f7fd ff64 	bl	80007dc <print>
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000014c 	.word	0x2000014c
 800291c:	20000154 	.word	0x20000154

08002920 <getY>:

int getY(char c){
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]

    if(c == 'A' || c == 'a')
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b41      	cmp	r3, #65	; 0x41
 800292e:	d002      	beq.n	8002936 <getY+0x16>
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	2b61      	cmp	r3, #97	; 0x61
 8002934:	d101      	bne.n	800293a <getY+0x1a>
        return(0);
 8002936:	2300      	movs	r3, #0
 8002938:	e039      	b.n	80029ae <getY+0x8e>

    else if(c == 'B' || c == 'b')
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	2b42      	cmp	r3, #66	; 0x42
 800293e:	d002      	beq.n	8002946 <getY+0x26>
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2b62      	cmp	r3, #98	; 0x62
 8002944:	d101      	bne.n	800294a <getY+0x2a>
        return(1);
 8002946:	2301      	movs	r3, #1
 8002948:	e031      	b.n	80029ae <getY+0x8e>

    else if(c == 'C' || c =='c')
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2b43      	cmp	r3, #67	; 0x43
 800294e:	d002      	beq.n	8002956 <getY+0x36>
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	2b63      	cmp	r3, #99	; 0x63
 8002954:	d101      	bne.n	800295a <getY+0x3a>
        return(2);
 8002956:	2302      	movs	r3, #2
 8002958:	e029      	b.n	80029ae <getY+0x8e>

    else if(c == 'D' || c =='d')
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b44      	cmp	r3, #68	; 0x44
 800295e:	d002      	beq.n	8002966 <getY+0x46>
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d101      	bne.n	800296a <getY+0x4a>
        return(3);
 8002966:	2303      	movs	r3, #3
 8002968:	e021      	b.n	80029ae <getY+0x8e>

    else if(c == 'E' || c =='e')
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b45      	cmp	r3, #69	; 0x45
 800296e:	d002      	beq.n	8002976 <getY+0x56>
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	2b65      	cmp	r3, #101	; 0x65
 8002974:	d101      	bne.n	800297a <getY+0x5a>
        return(4);
 8002976:	2304      	movs	r3, #4
 8002978:	e019      	b.n	80029ae <getY+0x8e>

     else if(c == 'F' || c =='f')
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	2b46      	cmp	r3, #70	; 0x46
 800297e:	d002      	beq.n	8002986 <getY+0x66>
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	2b66      	cmp	r3, #102	; 0x66
 8002984:	d101      	bne.n	800298a <getY+0x6a>
        return(5);
 8002986:	2305      	movs	r3, #5
 8002988:	e011      	b.n	80029ae <getY+0x8e>

    else if(c == 'G' || c =='g')
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b47      	cmp	r3, #71	; 0x47
 800298e:	d002      	beq.n	8002996 <getY+0x76>
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b67      	cmp	r3, #103	; 0x67
 8002994:	d101      	bne.n	800299a <getY+0x7a>
        return(6);
 8002996:	2306      	movs	r3, #6
 8002998:	e009      	b.n	80029ae <getY+0x8e>

    else if(c == 'H' || c =='f')
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	2b48      	cmp	r3, #72	; 0x48
 800299e:	d002      	beq.n	80029a6 <getY+0x86>
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	2b66      	cmp	r3, #102	; 0x66
 80029a4:	d101      	bne.n	80029aa <getY+0x8a>
        return(7);
 80029a6:	2307      	movs	r3, #7
 80029a8:	e001      	b.n	80029ae <getY+0x8e>

    return(-1);
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295

}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <getTurn>:

int getTurn(char c){
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
    if(c == 'B' || c =='b')
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b42      	cmp	r3, #66	; 0x42
 80029c8:	d002      	beq.n	80029d0 <getTurn+0x16>
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b62      	cmp	r3, #98	; 0x62
 80029ce:	d101      	bne.n	80029d4 <getTurn+0x1a>
        return 1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e009      	b.n	80029e8 <getTurn+0x2e>
    if(c == 'W' || c == 'w')
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2b57      	cmp	r3, #87	; 0x57
 80029d8:	d002      	beq.n	80029e0 <getTurn+0x26>
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b77      	cmp	r3, #119	; 0x77
 80029de:	d101      	bne.n	80029e4 <getTurn+0x2a>
        return 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e001      	b.n	80029e8 <getTurn+0x2e>
    return -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <number2BCD>:

void number2BCD(int i){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	int x1 = i&1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
	int x2 = i&2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	613b      	str	r3, [r7, #16]
	int x3 = i&4;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
	int x4 = i&8;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	60bb      	str	r3, [r7, #8]
	if(x1>0) x1 = 1;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	dd01      	ble.n	8002a26 <number2BCD+0x32>
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
	if(x2>0) x2 = 1;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	dd01      	ble.n	8002a30 <number2BCD+0x3c>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	613b      	str	r3, [r7, #16]
	if(x3>0) x3 = 1;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	dd01      	ble.n	8002a3a <number2BCD+0x46>
 8002a36:	2301      	movs	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
	if(x4>0) x4 = 1;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dd01      	ble.n	8002a44 <number2BCD+0x50>
 8002a40:	2301      	movs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, x1);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <number2BCD+0x90>)
 8002a4e:	f003 f9c1 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, x2);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	2102      	movs	r1, #2
 8002a5a:	480a      	ldr	r0, [pc, #40]	; (8002a84 <number2BCD+0x90>)
 8002a5c:	f003 f9ba 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, x3);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	2104      	movs	r1, #4
 8002a68:	4806      	ldr	r0, [pc, #24]	; (8002a84 <number2BCD+0x90>)
 8002a6a:	f003 f9b3 	bl	8005dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, x4);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	2108      	movs	r1, #8
 8002a76:	4803      	ldr	r0, [pc, #12]	; (8002a84 <number2BCD+0x90>)
 8002a78:	f003 f9ac 	bl	8005dd4 <HAL_GPIO_WritePin>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	48000800 	.word	0x48000800

08002a88 <sendBoard>:


void sendBoard(int mode){
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    int i, j;
    if(mode ==0)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <sendBoard+0x16>
        uart_Board[0] = 'U';
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <sendBoard+0xd4>)
 8002a98:	2255      	movs	r2, #85	; 0x55
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e005      	b.n	8002aaa <sendBoard+0x22>
    else if(mode == 1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <sendBoard+0x22>
        uart_Board[0] = 'S';
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <sendBoard+0xd4>)
 8002aa6:	2253      	movs	r2, #83	; 0x53
 8002aa8:	701a      	strb	r2, [r3, #0]

    uart_Board[1] = ' ';
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <sendBoard+0xd4>)
 8002aac:	2220      	movs	r2, #32
 8002aae:	705a      	strb	r2, [r3, #1]
    uart_Board[66] = ' ';
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <sendBoard+0xd4>)
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    uart_Board[67] = 'T';
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <sendBoard+0xd4>)
 8002aba:	2254      	movs	r2, #84	; 0x54
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    uart_Board[68] = ' ';
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <sendBoard+0xd4>)
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    uart_Board[69] = turn + '0';
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <sendBoard+0xd8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3330      	adds	r3, #48	; 0x30
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <sendBoard+0xd4>)
 8002ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    uart_Board[70] = '\n';
 8002ad8:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <sendBoard+0xd4>)
 8002ada:	220a      	movs	r2, #10
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46


    for(i=0; i<8; i++){
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e02f      	b.n	8002b46 <sendBoard+0xbe>
        for(j=0; j<8;j++){
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	e026      	b.n	8002b3a <sendBoard+0xb2>
            if(board[i][j] != -1)
 8002aec:	491d      	ldr	r1, [pc, #116]	; (8002b64 <sendBoard+0xdc>)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	00da      	lsls	r2, r3, #3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4413      	add	r3, r2
 8002af6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d011      	beq.n	8002b24 <sendBoard+0x9c>
                uart_Board[(i*8)+j+2] = board[i][j] + '0';
 8002b00:	4918      	ldr	r1, [pc, #96]	; (8002b64 <sendBoard+0xdc>)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	00da      	lsls	r2, r3, #3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	00d9      	lsls	r1, r3, #3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	440b      	add	r3, r1
 8002b18:	3302      	adds	r3, #2
 8002b1a:	3230      	adds	r2, #48	; 0x30
 8002b1c:	b2d1      	uxtb	r1, r2
 8002b1e:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <sendBoard+0xd4>)
 8002b20:	54d1      	strb	r1, [r2, r3]
 8002b22:	e007      	b.n	8002b34 <sendBoard+0xac>
            else
                 uart_Board[(i*8)+j+2] = '2';
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	00da      	lsls	r2, r3, #3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <sendBoard+0xd4>)
 8002b30:	2132      	movs	r1, #50	; 0x32
 8002b32:	54d1      	strb	r1, [r2, r3]
        for(j=0; j<8;j++){
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b07      	cmp	r3, #7
 8002b3e:	ddd5      	ble.n	8002aec <sendBoard+0x64>
    for(i=0; i<8; i++){
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b07      	cmp	r3, #7
 8002b4a:	ddcc      	ble.n	8002ae6 <sendBoard+0x5e>
        }
    }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	200001c4 	.word	0x200001c4
 8002b60:	2000005c 	.word	0x2000005c
 8002b64:	20000898 	.word	0x20000898

08002b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <NMI_Handler+0x4>

08002b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <HardFault_Handler+0x4>

08002b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <MemManage_Handler+0x4>

08002b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b7e:	e7fe      	b.n	8002b7e <BusFault_Handler+0x4>

08002b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <UsageFault_Handler+0x4>

08002b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb4:	f001 fb7a 	bl	80042ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if(state == 1){
 8002bb8:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <SysTick_Handler+0x20c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	f040 80b0 	bne.w	8002d22 <SysTick_Handler+0x172>

		  switch(counter % 4){
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	; (8002dc0 <SysTick_Handler+0x210>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	425a      	negs	r2, r3
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	f002 0203 	and.w	r2, r2, #3
 8002bd0:	bf58      	it	pl
 8002bd2:	4253      	negpl	r3, r2
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	f200 809f 	bhi.w	8002d18 <SysTick_Handler+0x168>
 8002bda:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <SysTick_Handler+0x30>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002c35 	.word	0x08002c35
 8002be8:	08002c85 	.word	0x08002c85
 8002bec:	08002cc9 	.word	0x08002cc9
			  case 0:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	21f0      	movs	r1, #240	; 0xf0
 8002bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf8:	f003 f8ec 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2170      	movs	r1, #112	; 0x70
 8002c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c04:	f003 f8e6 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	486d      	ldr	r0, [pc, #436]	; (8002dc4 <SysTick_Handler+0x214>)
 8002c0e:	f003 f8e1 	bl	8005dd4 <HAL_GPIO_WritePin>
				  number2BCD(time%10);
 8002c12:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <SysTick_Handler+0x218>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <SysTick_Handler+0x21c>)
 8002c18:	fb83 1302 	smull	r1, r3, r3, r2
 8002c1c:	1099      	asrs	r1, r3, #2
 8002c1e:	17d3      	asrs	r3, r2, #31
 8002c20:	1ac9      	subs	r1, r1, r3
 8002c22:	460b      	mov	r3, r1
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	1ad1      	subs	r1, r2, r3
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	f7ff fee1 	bl	80029f4 <number2BCD>
				  break;
 8002c32:	e071      	b.n	8002d18 <SysTick_Handler+0x168>


			  case(1):
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8002c34:	2201      	movs	r2, #1
 8002c36:	2140      	movs	r1, #64	; 0x40
 8002c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c3c:	f003 f8ca 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	21b0      	movs	r1, #176	; 0xb0
 8002c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c48:	f003 f8c4 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1);
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2110      	movs	r1, #16
 8002c50:	485c      	ldr	r0, [pc, #368]	; (8002dc4 <SysTick_Handler+0x214>)
 8002c52:	f003 f8bf 	bl	8005dd4 <HAL_GPIO_WritePin>
				  number2BCD((time/10) % 10);
 8002c56:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <SysTick_Handler+0x218>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5c      	ldr	r2, [pc, #368]	; (8002dcc <SysTick_Handler+0x21c>)
 8002c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002c60:	1092      	asrs	r2, r2, #2
 8002c62:	17db      	asrs	r3, r3, #31
 8002c64:	1ad2      	subs	r2, r2, r3
 8002c66:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <SysTick_Handler+0x21c>)
 8002c68:	fb83 1302 	smull	r1, r3, r3, r2
 8002c6c:	1099      	asrs	r1, r3, #2
 8002c6e:	17d3      	asrs	r3, r2, #31
 8002c70:	1ac9      	subs	r1, r1, r3
 8002c72:	460b      	mov	r3, r1
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	1ad1      	subs	r1, r2, r3
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	f7ff feb9 	bl	80029f4 <number2BCD>
				  break;
 8002c82:	e049      	b.n	8002d18 <SysTick_Handler+0x168>


			  case 2:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8002c84:	2201      	movs	r2, #1
 8002c86:	2120      	movs	r1, #32
 8002c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8c:	f003 f8a2 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_7, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	21d0      	movs	r1, #208	; 0xd0
 8002c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c98:	f003 f89c 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	4848      	ldr	r0, [pc, #288]	; (8002dc4 <SysTick_Handler+0x214>)
 8002ca2:	f003 f897 	bl	8005dd4 <HAL_GPIO_WritePin>
				  number2BCD(remain % 10);
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <SysTick_Handler+0x220>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <SysTick_Handler+0x21c>)
 8002cac:	fb83 1302 	smull	r1, r3, r3, r2
 8002cb0:	1099      	asrs	r1, r3, #2
 8002cb2:	17d3      	asrs	r3, r2, #31
 8002cb4:	1ac9      	subs	r1, r1, r3
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	1ad1      	subs	r1, r2, r3
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	f7ff fe97 	bl	80029f4 <number2BCD>
				  break;
 8002cc6:	e027      	b.n	8002d18 <SysTick_Handler+0x168>


			  case 3:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2110      	movs	r1, #16
 8002ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd0:	f003 f880 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_5 | GPIO_PIN_6, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	21e0      	movs	r1, #224	; 0xe0
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f003 f87a 	bl	8005dd4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	4837      	ldr	r0, [pc, #220]	; (8002dc4 <SysTick_Handler+0x214>)
 8002ce6:	f003 f875 	bl	8005dd4 <HAL_GPIO_WritePin>
				  number2BCD((remain/10)%10);
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <SysTick_Handler+0x220>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <SysTick_Handler+0x21c>)
 8002cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8002cf4:	1092      	asrs	r2, r2, #2
 8002cf6:	17db      	asrs	r3, r3, #31
 8002cf8:	1ad2      	subs	r2, r2, r3
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <SysTick_Handler+0x21c>)
 8002cfc:	fb83 1302 	smull	r1, r3, r3, r2
 8002d00:	1099      	asrs	r1, r3, #2
 8002d02:	17d3      	asrs	r3, r2, #31
 8002d04:	1ac9      	subs	r1, r1, r3
 8002d06:	460b      	mov	r3, r1
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	1ad1      	subs	r1, r2, r3
 8002d10:	4608      	mov	r0, r1
 8002d12:	f7ff fe6f 	bl	80029f4 <number2BCD>
				  break;
 8002d16:	bf00      	nop
			  }
		   counter++;
 8002d18:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <SysTick_Handler+0x210>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <SysTick_Handler+0x210>)
 8002d20:	6013      	str	r3, [r2, #0]

  }
  if(remain<=10 && remain > 0 && state == 1){
 8002d22:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <SysTick_Handler+0x220>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b0a      	cmp	r3, #10
 8002d28:	dc24      	bgt.n	8002d74 <SysTick_Handler+0x1c4>
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <SysTick_Handler+0x220>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dd20      	ble.n	8002d74 <SysTick_Handler+0x1c4>
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <SysTick_Handler+0x20c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d11c      	bne.n	8002d74 <SysTick_Handler+0x1c4>
		  if(HAL_GetTick() % (remain*50) == 0){
 8002d3a:	f001 facb 	bl	80042d4 <HAL_GetTick>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <SysTick_Handler+0x220>)
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	2132      	movs	r1, #50	; 0x32
 8002d46:	fb01 f202 	mul.w	r2, r1, r2
 8002d4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d4e:	fb02 f201 	mul.w	r2, r2, r1
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <SysTick_Handler+0x1bc>
			      PWM_Change_Tone(1568, 100);
 8002d58:	2164      	movs	r1, #100	; 0x64
 8002d5a:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8002d5e:	f7fd fe6b 	bl	8000a38 <PWM_Change_Tone>
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <SysTick_Handler+0x224>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2264      	movs	r2, #100	; 0x64
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
 8002d6a:	e003      	b.n	8002d74 <SysTick_Handler+0x1c4>

		  }
		  else
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <SysTick_Handler+0x224>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38




  }
  if(!buzzAlarm && state == 1){
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <SysTick_Handler+0x228>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d110      	bne.n	8002d9e <SysTick_Handler+0x1ee>
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <SysTick_Handler+0x20c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10c      	bne.n	8002d9e <SysTick_Handler+0x1ee>
	  if(HAL_GetTick() - effect > 1000){
 8002d84:	f001 faa6 	bl	80042d4 <HAL_GetTick>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <SysTick_Handler+0x22c>)
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d94:	d903      	bls.n	8002d9e <SysTick_Handler+0x1ee>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <SysTick_Handler+0x224>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38

	  }
  }


  if(HAL_GetTick()- invalidStart > 3000){
 8002d9e:	f001 fa99 	bl	80042d4 <HAL_GetTick>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <SysTick_Handler+0x230>)
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d902      	bls.n	8002db8 <SysTick_Handler+0x208>
	  invalidAlarm = 0;
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <SysTick_Handler+0x234>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000128 	.word	0x20000128
 8002dc0:	20000144 	.word	0x20000144
 8002dc4:	48001400 	.word	0x48001400
 8002dc8:	20000068 	.word	0x20000068
 8002dcc:	66666667 	.word	0x66666667
 8002dd0:	2000006c 	.word	0x2000006c
 8002dd4:	200002f4 	.word	0x200002f4
 8002dd8:	20000220 	.word	0x20000220
 8002ddc:	20000224 	.word	0x20000224
 8002de0:	20000130 	.word	0x20000130
 8002de4:	2000012c 	.word	0x2000012c

08002de8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f003 f823 	bl	8005e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(HAL_GetTick() - lastEx0 >= 500){
 8002df2:	f001 fa6f 	bl	80042d4 <HAL_GetTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <EXTI0_IRQHandler+0x90>)
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e02:	d330      	bcc.n	8002e66 <EXTI0_IRQHandler+0x7e>
	  clear();
 8002e04:	f7fd fc98 	bl	8000738 <clear>
	  startBoard();
 8002e08:	f7fe fdaa 	bl	8001960 <startBoard>
	  printBoard();
 8002e0c:	f7fe fddc 	bl	80019c8 <printBoard>
	  printTurn();
 8002e10:	f7fe fed8 	bl	8001bc4 <printTurn>
	  printLocation();
 8002e14:	f7fe fef0 	bl	8001bf8 <printLocation>

	  whiteScore = getScore(0);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff fd1f 	bl	800285c <getScore>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <EXTI0_IRQHandler+0x94>)
 8002e22:	6013      	str	r3, [r2, #0]
	  blackScore = getScore(1);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7ff fd19 	bl	800285c <getScore>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <EXTI0_IRQHandler+0x98>)
 8002e2e:	6013      	str	r3, [r2, #0]

	  sprintf(whiteStr, "W: %d ", whiteScore);
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <EXTI0_IRQHandler+0x94>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4913      	ldr	r1, [pc, #76]	; (8002e84 <EXTI0_IRQHandler+0x9c>)
 8002e38:	4813      	ldr	r0, [pc, #76]	; (8002e88 <EXTI0_IRQHandler+0xa0>)
 8002e3a:	f007 fbd3 	bl	800a5e4 <siprintf>
	  sprintf(blackStr, "B: %d ", blackScore);
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <EXTI0_IRQHandler+0x98>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	4911      	ldr	r1, [pc, #68]	; (8002e8c <EXTI0_IRQHandler+0xa4>)
 8002e46:	4812      	ldr	r0, [pc, #72]	; (8002e90 <EXTI0_IRQHandler+0xa8>)
 8002e48:	f007 fbcc 	bl	800a5e4 <siprintf>

	  printScore();
 8002e4c:	f7ff fd52 	bl	80028f4 <printScore>
	  state = 1;
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <EXTI0_IRQHandler+0xac>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <EXTI0_IRQHandler+0xb0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
	  remain = time;
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <EXTI0_IRQHandler+0xb4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <EXTI0_IRQHandler+0xb8>)
 8002e64:	6013      	str	r3, [r2, #0]
  }
  lastEx0 = HAL_GetTick();
 8002e66:	f001 fa35 	bl	80042d4 <HAL_GetTick>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <EXTI0_IRQHandler+0x90>)
 8002e70:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000114 	.word	0x20000114
 8002e7c:	20000138 	.word	0x20000138
 8002e80:	2000013c 	.word	0x2000013c
 8002e84:	0800b8a0 	.word	0x0800b8a0
 8002e88:	2000014c 	.word	0x2000014c
 8002e8c:	0800b8a8 	.word	0x0800b8a8
 8002e90:	20000154 	.word	0x20000154
 8002e94:	20000128 	.word	0x20000128
 8002e98:	200002f4 	.word	0x200002f4
 8002e9c:	20000068 	.word	0x20000068
 8002ea0:	2000006c 	.word	0x2000006c

08002ea4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002ea8:	2002      	movs	r0, #2
 8002eaa:	f002 ffc5 	bl	8005e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if(HAL_GetTick() - lastEx1 >= 500 && state == 1){
 8002eae:	f001 fa11 	bl	80042d4 <HAL_GetTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a2c      	ldr	r2, [pc, #176]	; (8002f68 <EXTI1_IRQHandler+0xc4>)
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ebe:	d34b      	bcc.n	8002f58 <EXTI1_IRQHandler+0xb4>
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <EXTI1_IRQHandler+0xc8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d147      	bne.n	8002f58 <EXTI1_IRQHandler+0xb4>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2110      	movs	r1, #16
 8002ecc:	4828      	ldr	r0, [pc, #160]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002ece:	f002 ff81 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	4826      	ldr	r0, [pc, #152]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002ed8:	f002 ff7c 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	4823      	ldr	r0, [pc, #140]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002ee2:	f002 ff77 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	4821      	ldr	r0, [pc, #132]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002eec:	f002 ff72 	bl	8005dd4 <HAL_GPIO_WritePin>

	  //left

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2120      	movs	r1, #32
 8002ef4:	481e      	ldr	r0, [pc, #120]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002ef6:	f002 ff6d 	bl	8005dd4 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 8002efa:	2102      	movs	r1, #2
 8002efc:	481c      	ldr	r0, [pc, #112]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002efe:	f002 ff51 	bl	8005da4 <HAL_GPIO_ReadPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <EXTI1_IRQHandler+0x8c>
		  resetLED();
 8002f08:	f7ff fc72 	bl	80027f0 <resetLED>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f12:	4818      	ldr	r0, [pc, #96]	; (8002f74 <EXTI1_IRQHandler+0xd0>)
 8002f14:	f002 ff5e 	bl	8005dd4 <HAL_GPIO_WritePin>
		  y = max(0, y-1);
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <EXTI1_IRQHandler+0xd4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	4619      	mov	r1, r3
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fe ff03 	bl	8001d2c <max>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <EXTI1_IRQHandler+0xd4>)
 8002f2a:	6013      	str	r3, [r2, #0]
		  printLocation();
 8002f2c:	f7fe fe64 	bl	8001bf8 <printLocation>
	  }




	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002f30:	2201      	movs	r2, #1
 8002f32:	2110      	movs	r1, #16
 8002f34:	480e      	ldr	r0, [pc, #56]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002f36:	f002 ff4d 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	480c      	ldr	r0, [pc, #48]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002f40:	f002 ff48 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002f44:	2201      	movs	r2, #1
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	4809      	ldr	r0, [pc, #36]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002f4a:	f002 ff43 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	4807      	ldr	r0, [pc, #28]	; (8002f70 <EXTI1_IRQHandler+0xcc>)
 8002f54:	f002 ff3e 	bl	8005dd4 <HAL_GPIO_WritePin>

  }
  lastEx1 = HAL_GetTick();
 8002f58:	f001 f9bc 	bl	80042d4 <HAL_GetTick>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b01      	ldr	r3, [pc, #4]	; (8002f68 <EXTI1_IRQHandler+0xc4>)
 8002f62:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000118 	.word	0x20000118
 8002f6c:	20000128 	.word	0x20000128
 8002f70:	48000c00 	.word	0x48000c00
 8002f74:	48001000 	.word	0x48001000
 8002f78:	20000050 	.word	0x20000050

08002f7c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002f82:	2004      	movs	r0, #4
 8002f84:	f002 ff58 	bl	8005e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  if(HAL_GetTick() - lastEx2 >= 500  && state == 1){
 8002f88:	f001 f9a4 	bl	80042d4 <HAL_GetTick>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4a46      	ldr	r2, [pc, #280]	; (80030a8 <EXTI2_TSC_IRQHandler+0x12c>)
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f98:	d37b      	bcc.n	8003092 <EXTI2_TSC_IRQHandler+0x116>
 8002f9a:	4b44      	ldr	r3, [pc, #272]	; (80030ac <EXTI2_TSC_IRQHandler+0x130>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d177      	bne.n	8003092 <EXTI2_TSC_IRQHandler+0x116>



   	  for(int i =0; i<2; i++){
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	e071      	b.n	800308c <EXTI2_TSC_IRQHandler+0x110>

   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2110      	movs	r1, #16
 8002fac:	4840      	ldr	r0, [pc, #256]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8002fae:	f002 ff11 	bl	8005dd4 <HAL_GPIO_WritePin>
   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2120      	movs	r1, #32
 8002fb6:	483e      	ldr	r0, [pc, #248]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8002fb8:	f002 ff0c 	bl	8005dd4 <HAL_GPIO_WritePin>
   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	483b      	ldr	r0, [pc, #236]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8002fc2:	f002 ff07 	bl	8005dd4 <HAL_GPIO_WritePin>
   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	4839      	ldr	r0, [pc, #228]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8002fcc:	f002 ff02 	bl	8005dd4 <HAL_GPIO_WritePin>

   		  //up
   		  if(i == 0){
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d120      	bne.n	8003018 <EXTI2_TSC_IRQHandler+0x9c>
   		   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2140      	movs	r1, #64	; 0x40
 8002fda:	4835      	ldr	r0, [pc, #212]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8002fdc:	f002 fefa 	bl	8005dd4 <HAL_GPIO_WritePin>
   		   	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 8002fe0:	2104      	movs	r1, #4
 8002fe2:	4833      	ldr	r0, [pc, #204]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8002fe4:	f002 fede 	bl	8005da4 <HAL_GPIO_ReadPin>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d037      	beq.n	800305e <EXTI2_TSC_IRQHandler+0xe2>
   		   		  resetLED();
 8002fee:	f7ff fbff 	bl	80027f0 <resetLED>
   		   		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ff8:	482e      	ldr	r0, [pc, #184]	; (80030b4 <EXTI2_TSC_IRQHandler+0x138>)
 8002ffa:	f002 feeb 	bl	8005dd4 <HAL_GPIO_WritePin>
   		   		  x = max(0, x-1);
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <EXTI2_TSC_IRQHandler+0x13c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	4619      	mov	r1, r3
 8003006:	2000      	movs	r0, #0
 8003008:	f7fe fe90 	bl	8001d2c <max>
 800300c:	4603      	mov	r3, r0
 800300e:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <EXTI2_TSC_IRQHandler+0x13c>)
 8003010:	6013      	str	r3, [r2, #0]
   		   		  printLocation();
 8003012:	f7fe fdf1 	bl	8001bf8 <printLocation>
 8003016:	e022      	b.n	800305e <EXTI2_TSC_IRQHandler+0xe2>
   		   	  }
   		  }
   		  //down
   		  else if(i == 1){
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d11f      	bne.n	800305e <EXTI2_TSC_IRQHandler+0xe2>
   		   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 800301e:	2201      	movs	r2, #1
 8003020:	2110      	movs	r1, #16
 8003022:	4823      	ldr	r0, [pc, #140]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8003024:	f002 fed6 	bl	8005dd4 <HAL_GPIO_WritePin>
   		   	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 8003028:	2104      	movs	r1, #4
 800302a:	4821      	ldr	r0, [pc, #132]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 800302c:	f002 feba 	bl	8005da4 <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <EXTI2_TSC_IRQHandler+0xe2>
   		   		  resetLED();
 8003036:	f7ff fbdb 	bl	80027f0 <resetLED>
   		   		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800303a:	2201      	movs	r2, #1
 800303c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003040:	481c      	ldr	r0, [pc, #112]	; (80030b4 <EXTI2_TSC_IRQHandler+0x138>)
 8003042:	f002 fec7 	bl	8005dd4 <HAL_GPIO_WritePin>
   		   		  x = min(x+1, 7);
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <EXTI2_TSC_IRQHandler+0x13c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	2107      	movs	r1, #7
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fe5c 	bl	8001d0c <min>
 8003054:	4603      	mov	r3, r0
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <EXTI2_TSC_IRQHandler+0x13c>)
 8003058:	6013      	str	r3, [r2, #0]
   		   		  printLocation();
 800305a:	f7fe fdcd 	bl	8001bf8 <printLocation>
   		   	  }
   		  }

   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 800305e:	2201      	movs	r2, #1
 8003060:	2110      	movs	r1, #16
 8003062:	4813      	ldr	r0, [pc, #76]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8003064:	f002 feb6 	bl	8005dd4 <HAL_GPIO_WritePin>
   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8003068:	2201      	movs	r2, #1
 800306a:	2120      	movs	r1, #32
 800306c:	4810      	ldr	r0, [pc, #64]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 800306e:	f002 feb1 	bl	8005dd4 <HAL_GPIO_WritePin>
   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8003072:	2201      	movs	r2, #1
 8003074:	2140      	movs	r1, #64	; 0x40
 8003076:	480e      	ldr	r0, [pc, #56]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8003078:	f002 feac 	bl	8005dd4 <HAL_GPIO_WritePin>
   	   	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800307c:	2201      	movs	r2, #1
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	480b      	ldr	r0, [pc, #44]	; (80030b0 <EXTI2_TSC_IRQHandler+0x134>)
 8003082:	f002 fea7 	bl	8005dd4 <HAL_GPIO_WritePin>
   	  for(int i =0; i<2; i++){
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3301      	adds	r3, #1
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	dd8a      	ble.n	8002fa8 <EXTI2_TSC_IRQHandler+0x2c>

   	  }
  }
     lastEx2 = HAL_GetTick();
 8003092:	f001 f91f 	bl	80042d4 <HAL_GetTick>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <EXTI2_TSC_IRQHandler+0x12c>)
 800309c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000011c 	.word	0x2000011c
 80030ac:	20000128 	.word	0x20000128
 80030b0:	48000c00 	.word	0x48000c00
 80030b4:	48001000 	.word	0x48001000
 80030b8:	2000004c 	.word	0x2000004c

080030bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80030c0:	2008      	movs	r0, #8
 80030c2:	f002 feb9 	bl	8005e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  if(HAL_GetTick() - lastEx3 >= 500  && state == 1){
 80030c6:	f001 f905 	bl	80042d4 <HAL_GetTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <EXTI3_IRQHandler+0xc4>)
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030d6:	d34b      	bcc.n	8003170 <EXTI3_IRQHandler+0xb4>
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <EXTI3_IRQHandler+0xc8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d147      	bne.n	8003170 <EXTI3_IRQHandler+0xb4>

 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2110      	movs	r1, #16
 80030e4:	4828      	ldr	r0, [pc, #160]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 80030e6:	f002 fe75 	bl	8005dd4 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2120      	movs	r1, #32
 80030ee:	4826      	ldr	r0, [pc, #152]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 80030f0:	f002 fe70 	bl	8005dd4 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2140      	movs	r1, #64	; 0x40
 80030f8:	4823      	ldr	r0, [pc, #140]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 80030fa:	f002 fe6b 	bl	8005dd4 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 80030fe:	2200      	movs	r2, #0
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	4821      	ldr	r0, [pc, #132]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 8003104:	f002 fe66 	bl	8005dd4 <HAL_GPIO_WritePin>

 	  //right

 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8003108:	2201      	movs	r2, #1
 800310a:	2120      	movs	r1, #32
 800310c:	481e      	ldr	r0, [pc, #120]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 800310e:	f002 fe61 	bl	8005dd4 <HAL_GPIO_WritePin>
 	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 8003112:	2108      	movs	r1, #8
 8003114:	481c      	ldr	r0, [pc, #112]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 8003116:	f002 fe45 	bl	8005da4 <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <EXTI3_IRQHandler+0x8c>
 		  resetLED();
 8003120:	f7ff fb66 	bl	80027f0 <resetLED>
 		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8003124:	2201      	movs	r2, #1
 8003126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800312a:	4818      	ldr	r0, [pc, #96]	; (800318c <EXTI3_IRQHandler+0xd0>)
 800312c:	f002 fe52 	bl	8005dd4 <HAL_GPIO_WritePin>
 		  y = min(y+1, 7);
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <EXTI3_IRQHandler+0xd4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	2107      	movs	r1, #7
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe fde7 	bl	8001d0c <min>
 800313e:	4603      	mov	r3, r0
 8003140:	4a13      	ldr	r2, [pc, #76]	; (8003190 <EXTI3_IRQHandler+0xd4>)
 8003142:	6013      	str	r3, [r2, #0]
 		  printLocation();
 8003144:	f7fe fd58 	bl	8001bf8 <printLocation>
 	  }



 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8003148:	2201      	movs	r2, #1
 800314a:	2110      	movs	r1, #16
 800314c:	480e      	ldr	r0, [pc, #56]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 800314e:	f002 fe41 	bl	8005dd4 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8003152:	2201      	movs	r2, #1
 8003154:	2120      	movs	r1, #32
 8003156:	480c      	ldr	r0, [pc, #48]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 8003158:	f002 fe3c 	bl	8005dd4 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800315c:	2201      	movs	r2, #1
 800315e:	2140      	movs	r1, #64	; 0x40
 8003160:	4809      	ldr	r0, [pc, #36]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 8003162:	f002 fe37 	bl	8005dd4 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8003166:	2201      	movs	r2, #1
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	4807      	ldr	r0, [pc, #28]	; (8003188 <EXTI3_IRQHandler+0xcc>)
 800316c:	f002 fe32 	bl	8005dd4 <HAL_GPIO_WritePin>

   }
   lastEx3 = HAL_GetTick();
 8003170:	f001 f8b0 	bl	80042d4 <HAL_GetTick>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	4b01      	ldr	r3, [pc, #4]	; (8003180 <EXTI3_IRQHandler+0xc4>)
 800317a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000120 	.word	0x20000120
 8003184:	20000128 	.word	0x20000128
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48001000 	.word	0x48001000
 8003190:	20000050 	.word	0x20000050

08003194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b090      	sub	sp, #64	; 0x40
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800319a:	48dd      	ldr	r0, [pc, #884]	; (8003510 <TIM2_IRQHandler+0x37c>)
 800319c:	f004 fddc 	bl	8007d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  if(invalidAlarm == 1){
 80031a0:	4bdc      	ldr	r3, [pc, #880]	; (8003514 <TIM2_IRQHandler+0x380>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d127      	bne.n	80031f8 <TIM2_IRQHandler+0x64>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80031a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ac:	48da      	ldr	r0, [pc, #872]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031ae:	f002 fe29 	bl	8005e04 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80031b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031b6:	48d8      	ldr	r0, [pc, #864]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031b8:	f002 fe24 	bl	8005e04 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80031bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031c0:	48d5      	ldr	r0, [pc, #852]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031c2:	f002 fe1f 	bl	8005e04 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80031c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031ca:	48d3      	ldr	r0, [pc, #844]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031cc:	f002 fe1a 	bl	8005e04 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 80031d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031d4:	48d0      	ldr	r0, [pc, #832]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031d6:	f002 fe15 	bl	8005e04 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 80031da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031de:	48ce      	ldr	r0, [pc, #824]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031e0:	f002 fe10 	bl	8005e04 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 80031e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031e8:	48cb      	ldr	r0, [pc, #812]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031ea:	f002 fe0b 	bl	8005e04 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 80031ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f2:	48c9      	ldr	r0, [pc, #804]	; (8003518 <TIM2_IRQHandler+0x384>)
 80031f4:	f002 fe06 	bl	8005e04 <HAL_GPIO_TogglePin>

  }

  if(state == 0){
 80031f8:	4bc8      	ldr	r3, [pc, #800]	; (800351c <TIM2_IRQHandler+0x388>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 8173 	bne.w	80034e8 <TIM2_IRQHandler+0x354>
	  if(clock%6 ==0){
 8003202:	4bc7      	ldr	r3, [pc, #796]	; (8003520 <TIM2_IRQHandler+0x38c>)
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	4bc7      	ldr	r3, [pc, #796]	; (8003524 <TIM2_IRQHandler+0x390>)
 8003208:	fb83 3201 	smull	r3, r2, r3, r1
 800320c:	17cb      	asrs	r3, r1, #31
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	1aca      	subs	r2, r1, r3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d12f      	bne.n	800327e <TIM2_IRQHandler+0xea>
		  PWM_Change_Tone(1568, 80);
 800321e:	2150      	movs	r1, #80	; 0x50
 8003220:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8003224:	f7fd fc08 	bl	8000a38 <PWM_Change_Tone>
		  setCursor(5,0);
 8003228:	2100      	movs	r1, #0
 800322a:	2005      	movs	r0, #5
 800322c:	f7fd fa8e 	bl	800074c <setCursor>
		   write(5);
 8003230:	2005      	movs	r0, #5
 8003232:	f7fd fb35 	bl	80008a0 <write>
		   setCursor(6,0);
 8003236:	2100      	movs	r1, #0
 8003238:	2006      	movs	r0, #6
 800323a:	f7fd fa87 	bl	800074c <setCursor>
		   write(4);
 800323e:	2004      	movs	r0, #4
 8003240:	f7fd fb2e 	bl	80008a0 <write>

		   setCursor(19, 0);
 8003244:	2100      	movs	r1, #0
 8003246:	2013      	movs	r0, #19
 8003248:	f7fd fa80 	bl	800074c <setCursor>
		   write(7);
 800324c:	2007      	movs	r0, #7
 800324e:	f7fd fb27 	bl	80008a0 <write>

		   setCursor(0, 0);
 8003252:	2100      	movs	r1, #0
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fa79 	bl	800074c <setCursor>
		   write(7);
 800325a:	2007      	movs	r0, #7
 800325c:	f7fd fb20 	bl	80008a0 <write>

		   setCursor(18, 2);
 8003260:	2102      	movs	r1, #2
 8003262:	2012      	movs	r0, #18
 8003264:	f7fd fa72 	bl	800074c <setCursor>
		   write(6);
 8003268:	2006      	movs	r0, #6
 800326a:	f7fd fb19 	bl	80008a0 <write>

		   setCursor(1, 2);
 800326e:	2102      	movs	r1, #2
 8003270:	2001      	movs	r0, #1
 8003272:	f7fd fa6b 	bl	800074c <setCursor>
		   write(6);
 8003276:	2006      	movs	r0, #6
 8003278:	f7fd fb12 	bl	80008a0 <write>
 800327c:	e134      	b.n	80034e8 <TIM2_IRQHandler+0x354>



	  }
	  else if(clock%6 == 1){
 800327e:	4ba8      	ldr	r3, [pc, #672]	; (8003520 <TIM2_IRQHandler+0x38c>)
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	4ba8      	ldr	r3, [pc, #672]	; (8003524 <TIM2_IRQHandler+0x390>)
 8003284:	fb83 3201 	smull	r3, r2, r3, r1
 8003288:	17cb      	asrs	r3, r1, #31
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	1aca      	subs	r2, r1, r3
 8003296:	2a01      	cmp	r2, #1
 8003298:	d12f      	bne.n	80032fa <TIM2_IRQHandler+0x166>
		  PWM_Change_Tone(1046, 80);
 800329a:	2150      	movs	r1, #80	; 0x50
 800329c:	f240 4016 	movw	r0, #1046	; 0x416
 80032a0:	f7fd fbca 	bl	8000a38 <PWM_Change_Tone>
		  setCursor(5,0);
 80032a4:	2100      	movs	r1, #0
 80032a6:	2005      	movs	r0, #5
 80032a8:	f7fd fa50 	bl	800074c <setCursor>
		   write(4);
 80032ac:	2004      	movs	r0, #4
 80032ae:	f7fd faf7 	bl	80008a0 <write>

		   setCursor(6,0);
 80032b2:	2100      	movs	r1, #0
 80032b4:	2006      	movs	r0, #6
 80032b6:	f7fd fa49 	bl	800074c <setCursor>
		   write(5);
 80032ba:	2005      	movs	r0, #5
 80032bc:	f7fd faf0 	bl	80008a0 <write>

		   setCursor(19, 1);
 80032c0:	2101      	movs	r1, #1
 80032c2:	2013      	movs	r0, #19
 80032c4:	f7fd fa42 	bl	800074c <setCursor>
		   write(7);
 80032c8:	2007      	movs	r0, #7
 80032ca:	f7fd fae9 	bl	80008a0 <write>

		   setCursor(0, 1);
 80032ce:	2101      	movs	r1, #1
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7fd fa3b 	bl	800074c <setCursor>
		   write(7);
 80032d6:	2007      	movs	r0, #7
 80032d8:	f7fd fae2 	bl	80008a0 <write>

		   setCursor(18, 1);
 80032dc:	2101      	movs	r1, #1
 80032de:	2012      	movs	r0, #18
 80032e0:	f7fd fa34 	bl	800074c <setCursor>
		   write(6);
 80032e4:	2006      	movs	r0, #6
 80032e6:	f7fd fadb 	bl	80008a0 <write>

		   setCursor(1, 1);
 80032ea:	2101      	movs	r1, #1
 80032ec:	2001      	movs	r0, #1
 80032ee:	f7fd fa2d 	bl	800074c <setCursor>
		   write(6);
 80032f2:	2006      	movs	r0, #6
 80032f4:	f7fd fad4 	bl	80008a0 <write>
 80032f8:	e0f6      	b.n	80034e8 <TIM2_IRQHandler+0x354>


	  }
	  else if(clock %6 ==2){
 80032fa:	4b89      	ldr	r3, [pc, #548]	; (8003520 <TIM2_IRQHandler+0x38c>)
 80032fc:	6819      	ldr	r1, [r3, #0]
 80032fe:	4b89      	ldr	r3, [pc, #548]	; (8003524 <TIM2_IRQHandler+0x390>)
 8003300:	fb83 3201 	smull	r3, r2, r3, r1
 8003304:	17cb      	asrs	r3, r1, #31
 8003306:	1ad2      	subs	r2, r2, r3
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	1aca      	subs	r2, r1, r3
 8003312:	2a02      	cmp	r2, #2
 8003314:	d12f      	bne.n	8003376 <TIM2_IRQHandler+0x1e2>

		  PWM_Change_Tone(1174, 50);
 8003316:	2132      	movs	r1, #50	; 0x32
 8003318:	f240 4096 	movw	r0, #1174	; 0x496
 800331c:	f7fd fb8c 	bl	8000a38 <PWM_Change_Tone>
		  setCursor(5,0);
 8003320:	2100      	movs	r1, #0
 8003322:	2005      	movs	r0, #5
 8003324:	f7fd fa12 	bl	800074c <setCursor>
		   write(5);
 8003328:	2005      	movs	r0, #5
 800332a:	f7fd fab9 	bl	80008a0 <write>
		   setCursor(6,0);
 800332e:	2100      	movs	r1, #0
 8003330:	2006      	movs	r0, #6
 8003332:	f7fd fa0b 	bl	800074c <setCursor>
		   write(4);
 8003336:	2004      	movs	r0, #4
 8003338:	f7fd fab2 	bl	80008a0 <write>

		   setCursor(19, 2);
 800333c:	2102      	movs	r1, #2
 800333e:	2013      	movs	r0, #19
 8003340:	f7fd fa04 	bl	800074c <setCursor>
		   write(7);
 8003344:	2007      	movs	r0, #7
 8003346:	f7fd faab 	bl	80008a0 <write>

		   setCursor(0, 2);
 800334a:	2102      	movs	r1, #2
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd f9fd 	bl	800074c <setCursor>
		   write(7);
 8003352:	2007      	movs	r0, #7
 8003354:	f7fd faa4 	bl	80008a0 <write>

		   setCursor(18, 0);
 8003358:	2100      	movs	r1, #0
 800335a:	2012      	movs	r0, #18
 800335c:	f7fd f9f6 	bl	800074c <setCursor>
		   write(6);
 8003360:	2006      	movs	r0, #6
 8003362:	f7fd fa9d 	bl	80008a0 <write>

		   setCursor(1, 0);
 8003366:	2100      	movs	r1, #0
 8003368:	2001      	movs	r0, #1
 800336a:	f7fd f9ef 	bl	800074c <setCursor>
		   write(6);
 800336e:	2006      	movs	r0, #6
 8003370:	f7fd fa96 	bl	80008a0 <write>
 8003374:	e0b8      	b.n	80034e8 <TIM2_IRQHandler+0x354>

	  }
	  else if(clock % 6 ==3){
 8003376:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <TIM2_IRQHandler+0x38c>)
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <TIM2_IRQHandler+0x390>)
 800337c:	fb83 3201 	smull	r3, r2, r3, r1
 8003380:	17cb      	asrs	r3, r1, #31
 8003382:	1ad2      	subs	r2, r2, r3
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	1aca      	subs	r2, r1, r3
 800338e:	2a03      	cmp	r2, #3
 8003390:	d12f      	bne.n	80033f2 <TIM2_IRQHandler+0x25e>
		  PWM_Change_Tone(1318, 50);
 8003392:	2132      	movs	r1, #50	; 0x32
 8003394:	f240 5026 	movw	r0, #1318	; 0x526
 8003398:	f7fd fb4e 	bl	8000a38 <PWM_Change_Tone>
		  setCursor(5,0);
 800339c:	2100      	movs	r1, #0
 800339e:	2005      	movs	r0, #5
 80033a0:	f7fd f9d4 	bl	800074c <setCursor>
		   write(4);
 80033a4:	2004      	movs	r0, #4
 80033a6:	f7fd fa7b 	bl	80008a0 <write>

		   setCursor(6,0);
 80033aa:	2100      	movs	r1, #0
 80033ac:	2006      	movs	r0, #6
 80033ae:	f7fd f9cd 	bl	800074c <setCursor>
		   write(5);
 80033b2:	2005      	movs	r0, #5
 80033b4:	f7fd fa74 	bl	80008a0 <write>

		   setCursor(19, 0);
 80033b8:	2100      	movs	r1, #0
 80033ba:	2013      	movs	r0, #19
 80033bc:	f7fd f9c6 	bl	800074c <setCursor>
//		   write(6);
		   print(" ");
 80033c0:	4859      	ldr	r0, [pc, #356]	; (8003528 <TIM2_IRQHandler+0x394>)
 80033c2:	f7fd fa0b 	bl	80007dc <print>

		   setCursor(0, 0);
 80033c6:	2100      	movs	r1, #0
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7fd f9bf 	bl	800074c <setCursor>
//		   write(7);
		   print(" ");
 80033ce:	4856      	ldr	r0, [pc, #344]	; (8003528 <TIM2_IRQHandler+0x394>)
 80033d0:	f7fd fa04 	bl	80007dc <print>

		   setCursor(18, 2);
 80033d4:	2102      	movs	r1, #2
 80033d6:	2012      	movs	r0, #18
 80033d8:	f7fd f9b8 	bl	800074c <setCursor>
		   print(" ");
 80033dc:	4852      	ldr	r0, [pc, #328]	; (8003528 <TIM2_IRQHandler+0x394>)
 80033de:	f7fd f9fd 	bl	80007dc <print>

		   setCursor(1, 2);
 80033e2:	2102      	movs	r1, #2
 80033e4:	2001      	movs	r0, #1
 80033e6:	f7fd f9b1 	bl	800074c <setCursor>
		   print(" ");
 80033ea:	484f      	ldr	r0, [pc, #316]	; (8003528 <TIM2_IRQHandler+0x394>)
 80033ec:	f7fd f9f6 	bl	80007dc <print>
 80033f0:	e07a      	b.n	80034e8 <TIM2_IRQHandler+0x354>

	  }

	  else if(clock%6 == 4){
 80033f2:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <TIM2_IRQHandler+0x38c>)
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <TIM2_IRQHandler+0x390>)
 80033f8:	fb83 3201 	smull	r3, r2, r3, r1
 80033fc:	17cb      	asrs	r3, r1, #31
 80033fe:	1ad2      	subs	r2, r2, r3
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	1aca      	subs	r2, r1, r3
 800340a:	2a04      	cmp	r2, #4
 800340c:	d12f      	bne.n	800346e <TIM2_IRQHandler+0x2da>
		  PWM_Change_Tone(1174, 50);
 800340e:	2132      	movs	r1, #50	; 0x32
 8003410:	f240 4096 	movw	r0, #1174	; 0x496
 8003414:	f7fd fb10 	bl	8000a38 <PWM_Change_Tone>
		  setCursor(5,0);
 8003418:	2100      	movs	r1, #0
 800341a:	2005      	movs	r0, #5
 800341c:	f7fd f996 	bl	800074c <setCursor>
		   write(5);
 8003420:	2005      	movs	r0, #5
 8003422:	f7fd fa3d 	bl	80008a0 <write>

		   setCursor(6,0);
 8003426:	2100      	movs	r1, #0
 8003428:	2006      	movs	r0, #6
 800342a:	f7fd f98f 	bl	800074c <setCursor>
		   write(4);
 800342e:	2004      	movs	r0, #4
 8003430:	f7fd fa36 	bl	80008a0 <write>

		   setCursor(19, 1);
 8003434:	2101      	movs	r1, #1
 8003436:	2013      	movs	r0, #19
 8003438:	f7fd f988 	bl	800074c <setCursor>
//		   write(6);
		   print(" ");
 800343c:	483a      	ldr	r0, [pc, #232]	; (8003528 <TIM2_IRQHandler+0x394>)
 800343e:	f7fd f9cd 	bl	80007dc <print>

		   setCursor(0, 1);
 8003442:	2101      	movs	r1, #1
 8003444:	2000      	movs	r0, #0
 8003446:	f7fd f981 	bl	800074c <setCursor>
//		   write(7);
		   print(" ");
 800344a:	4837      	ldr	r0, [pc, #220]	; (8003528 <TIM2_IRQHandler+0x394>)
 800344c:	f7fd f9c6 	bl	80007dc <print>

		   setCursor(18, 1);
 8003450:	2101      	movs	r1, #1
 8003452:	2012      	movs	r0, #18
 8003454:	f7fd f97a 	bl	800074c <setCursor>
		   print(" ");
 8003458:	4833      	ldr	r0, [pc, #204]	; (8003528 <TIM2_IRQHandler+0x394>)
 800345a:	f7fd f9bf 	bl	80007dc <print>

		   setCursor(1, 1);
 800345e:	2101      	movs	r1, #1
 8003460:	2001      	movs	r0, #1
 8003462:	f7fd f973 	bl	800074c <setCursor>
		   print(" ");
 8003466:	4830      	ldr	r0, [pc, #192]	; (8003528 <TIM2_IRQHandler+0x394>)
 8003468:	f7fd f9b8 	bl	80007dc <print>
 800346c:	e03c      	b.n	80034e8 <TIM2_IRQHandler+0x354>

	  }
	  else if(clock %6==5){
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <TIM2_IRQHandler+0x38c>)
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <TIM2_IRQHandler+0x390>)
 8003474:	fb83 3201 	smull	r3, r2, r3, r1
 8003478:	17cb      	asrs	r3, r1, #31
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	1aca      	subs	r2, r1, r3
 8003486:	2a05      	cmp	r2, #5
 8003488:	d12e      	bne.n	80034e8 <TIM2_IRQHandler+0x354>

		  PWM_Change_Tone(1046, 50);
 800348a:	2132      	movs	r1, #50	; 0x32
 800348c:	f240 4016 	movw	r0, #1046	; 0x416
 8003490:	f7fd fad2 	bl	8000a38 <PWM_Change_Tone>
		  setCursor(5,0);
 8003494:	2100      	movs	r1, #0
 8003496:	2005      	movs	r0, #5
 8003498:	f7fd f958 	bl	800074c <setCursor>
		   write(4);
 800349c:	2004      	movs	r0, #4
 800349e:	f7fd f9ff 	bl	80008a0 <write>
		   setCursor(6,0);
 80034a2:	2100      	movs	r1, #0
 80034a4:	2006      	movs	r0, #6
 80034a6:	f7fd f951 	bl	800074c <setCursor>
		   write(5);
 80034aa:	2005      	movs	r0, #5
 80034ac:	f7fd f9f8 	bl	80008a0 <write>

		   setCursor(19, 2);
 80034b0:	2102      	movs	r1, #2
 80034b2:	2013      	movs	r0, #19
 80034b4:	f7fd f94a 	bl	800074c <setCursor>
//		   write(6);
		   print(" ");
 80034b8:	481b      	ldr	r0, [pc, #108]	; (8003528 <TIM2_IRQHandler+0x394>)
 80034ba:	f7fd f98f 	bl	80007dc <print>

		   setCursor(0, 2);
 80034be:	2102      	movs	r1, #2
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fd f943 	bl	800074c <setCursor>
//		   write(7);
		   print(" ");
 80034c6:	4818      	ldr	r0, [pc, #96]	; (8003528 <TIM2_IRQHandler+0x394>)
 80034c8:	f7fd f988 	bl	80007dc <print>

		   setCursor(18, 0);
 80034cc:	2100      	movs	r1, #0
 80034ce:	2012      	movs	r0, #18
 80034d0:	f7fd f93c 	bl	800074c <setCursor>
		   print(" ");
 80034d4:	4814      	ldr	r0, [pc, #80]	; (8003528 <TIM2_IRQHandler+0x394>)
 80034d6:	f7fd f981 	bl	80007dc <print>

		   setCursor(1, 0);
 80034da:	2100      	movs	r1, #0
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fd f935 	bl	800074c <setCursor>
		   print(" ");
 80034e2:	4811      	ldr	r0, [pc, #68]	; (8003528 <TIM2_IRQHandler+0x394>)
 80034e4:	f7fd f97a 	bl	80007dc <print>
	  }


  }

  if(state == 2){
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <TIM2_IRQHandler+0x388>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f040 81b9 	bne.w	8003864 <TIM2_IRQHandler+0x6d0>

	  if(winner != -1){
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <TIM2_IRQHandler+0x398>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	f000 80d2 	beq.w	80036a2 <TIM2_IRQHandler+0x50e>
		  if(clock % 2 == 0){
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <TIM2_IRQHandler+0x38c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d172      	bne.n	80035f0 <TIM2_IRQHandler+0x45c>
			  for(int i=0; i<20; i++){
 800350a:	2300      	movs	r3, #0
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800350e:	e01e      	b.n	800354e <TIM2_IRQHandler+0x3ba>
 8003510:	2000038c 	.word	0x2000038c
 8003514:	2000012c 	.word	0x2000012c
 8003518:	48001000 	.word	0x48001000
 800351c:	20000128 	.word	0x20000128
 8003520:	20000134 	.word	0x20000134
 8003524:	2aaaaaab 	.word	0x2aaaaaab
 8003528:	0800b834 	.word	0x0800b834
 800352c:	20000064 	.word	0x20000064
				  setCursor(i, 0);
 8003530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd f908 	bl	800074c <setCursor>
				  write(winner);
 800353c:	4ba4      	ldr	r3, [pc, #656]	; (80037d0 <TIM2_IRQHandler+0x63c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd f9ac 	bl	80008a0 <write>
			  for(int i=0; i<20; i++){
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	3301      	adds	r3, #1
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003550:	2b13      	cmp	r3, #19
 8003552:	dded      	ble.n	8003530 <TIM2_IRQHandler+0x39c>
			  }

			  for(int j=1; j<3; j++){
 8003554:	2301      	movs	r3, #1
 8003556:	63bb      	str	r3, [r7, #56]	; 0x38
 8003558:	e00e      	b.n	8003578 <TIM2_IRQHandler+0x3e4>
				  setCursor(19, j);
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	2013      	movs	r0, #19
 8003562:	f7fd f8f3 	bl	800074c <setCursor>
				  write(winner);
 8003566:	4b9a      	ldr	r3, [pc, #616]	; (80037d0 <TIM2_IRQHandler+0x63c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd f997 	bl	80008a0 <write>
			  for(int j=1; j<3; j++){
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	3301      	adds	r3, #1
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
 8003578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357a:	2b02      	cmp	r3, #2
 800357c:	dded      	ble.n	800355a <TIM2_IRQHandler+0x3c6>
			  }

			  for(int i=19; i>=0; i--){
 800357e:	2313      	movs	r3, #19
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
 8003582:	e00e      	b.n	80035a2 <TIM2_IRQHandler+0x40e>
				  setCursor(i, 3);
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2103      	movs	r1, #3
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd f8de 	bl	800074c <setCursor>
				  write(winner);
 8003590:	4b8f      	ldr	r3, [pc, #572]	; (80037d0 <TIM2_IRQHandler+0x63c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd f982 	bl	80008a0 <write>
			  for(int i=19; i>=0; i--){
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	3b01      	subs	r3, #1
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
 80035a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	daed      	bge.n	8003584 <TIM2_IRQHandler+0x3f0>
			  }

			  for(int j=2; j>0; j--){
 80035a8:	2302      	movs	r3, #2
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
 80035ac:	e00e      	b.n	80035cc <TIM2_IRQHandler+0x438>
				  setCursor(0, j);
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7fd f8c9 	bl	800074c <setCursor>
				  write(winner);
 80035ba:	4b85      	ldr	r3, [pc, #532]	; (80037d0 <TIM2_IRQHandler+0x63c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd f96d 	bl	80008a0 <write>
			  for(int j=2; j>0; j--){
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	3b01      	subs	r3, #1
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	dced      	bgt.n	80035ae <TIM2_IRQHandler+0x41a>
			  }

			  setCursor(8, 1);
 80035d2:	2101      	movs	r1, #1
 80035d4:	2008      	movs	r0, #8
 80035d6:	f7fd f8b9 	bl	800074c <setCursor>
			  print(whiteStr);
 80035da:	487e      	ldr	r0, [pc, #504]	; (80037d4 <TIM2_IRQHandler+0x640>)
 80035dc:	f7fd f8fe 	bl	80007dc <print>
			  setCursor(8, 2);
 80035e0:	2102      	movs	r1, #2
 80035e2:	2008      	movs	r0, #8
 80035e4:	f7fd f8b2 	bl	800074c <setCursor>
			  print(blackStr);
 80035e8:	487b      	ldr	r0, [pc, #492]	; (80037d8 <TIM2_IRQHandler+0x644>)
 80035ea:	f7fd f8f7 	bl	80007dc <print>
 80035ee:	e10a      	b.n	8003806 <TIM2_IRQHandler+0x672>
		  }

		  else{

			  for(int i=0; i<20; i++){
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f4:	e00b      	b.n	800360e <TIM2_IRQHandler+0x47a>
				  setCursor(i, 0);
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd f8a5 	bl	800074c <setCursor>
				  print(" ");
 8003602:	4876      	ldr	r0, [pc, #472]	; (80037dc <TIM2_IRQHandler+0x648>)
 8003604:	f7fd f8ea 	bl	80007dc <print>
			  for(int i=0; i<20; i++){
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	3301      	adds	r3, #1
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	2b13      	cmp	r3, #19
 8003612:	ddf0      	ble.n	80035f6 <TIM2_IRQHandler+0x462>
			  }

			  for(int j=1; j<3; j++){
 8003614:	2301      	movs	r3, #1
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
 8003618:	e00b      	b.n	8003632 <TIM2_IRQHandler+0x49e>
				  setCursor(19, j);
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	2013      	movs	r0, #19
 8003622:	f7fd f893 	bl	800074c <setCursor>
				  print(" ");
 8003626:	486d      	ldr	r0, [pc, #436]	; (80037dc <TIM2_IRQHandler+0x648>)
 8003628:	f7fd f8d8 	bl	80007dc <print>
			  for(int j=1; j<3; j++){
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	3301      	adds	r3, #1
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	2b02      	cmp	r3, #2
 8003636:	ddf0      	ble.n	800361a <TIM2_IRQHandler+0x486>
			  }

			  for(int i=19; i>=0; i--){
 8003638:	2313      	movs	r3, #19
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	e00b      	b.n	8003656 <TIM2_IRQHandler+0x4c2>
				  setCursor(i, 3);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2103      	movs	r1, #3
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd f881 	bl	800074c <setCursor>
				  print(" ");
 800364a:	4864      	ldr	r0, [pc, #400]	; (80037dc <TIM2_IRQHandler+0x648>)
 800364c:	f7fd f8c6 	bl	80007dc <print>
			  for(int i=19; i>=0; i--){
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	3b01      	subs	r3, #1
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	daf0      	bge.n	800363e <TIM2_IRQHandler+0x4aa>
			  }

			  for(int j=2; j>0; j--){
 800365c:	2302      	movs	r3, #2
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	e00b      	b.n	800367a <TIM2_IRQHandler+0x4e6>
				  setCursor(0, j);
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	4619      	mov	r1, r3
 8003668:	2000      	movs	r0, #0
 800366a:	f7fd f86f 	bl	800074c <setCursor>
				  print(" ");
 800366e:	485b      	ldr	r0, [pc, #364]	; (80037dc <TIM2_IRQHandler+0x648>)
 8003670:	f7fd f8b4 	bl	80007dc <print>
			  for(int j=2; j>0; j--){
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	3b01      	subs	r3, #1
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2b00      	cmp	r3, #0
 800367e:	dcf0      	bgt.n	8003662 <TIM2_IRQHandler+0x4ce>
			  }

			  if(winner == 0)
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <TIM2_IRQHandler+0x63c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <TIM2_IRQHandler+0x4fe>
				  setCursor(8, 1);
 8003688:	2101      	movs	r1, #1
 800368a:	2008      	movs	r0, #8
 800368c:	f7fd f85e 	bl	800074c <setCursor>
 8003690:	e003      	b.n	800369a <TIM2_IRQHandler+0x506>

			  else
				  setCursor(8, 2);
 8003692:	2102      	movs	r1, #2
 8003694:	2008      	movs	r0, #8
 8003696:	f7fd f859 	bl	800074c <setCursor>

			  print("     ");
 800369a:	4851      	ldr	r0, [pc, #324]	; (80037e0 <TIM2_IRQHandler+0x64c>)
 800369c:	f7fd f89e 	bl	80007dc <print>
 80036a0:	e0b1      	b.n	8003806 <TIM2_IRQHandler+0x672>
		  }

	  }
	  else{
		  if(clock % 2 == 0){
 80036a2:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <TIM2_IRQHandler+0x650>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d156      	bne.n	800375c <TIM2_IRQHandler+0x5c8>
			  for(int i=0; i<20; i++){
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e00b      	b.n	80036cc <TIM2_IRQHandler+0x538>
				  setCursor(i, 0);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd f846 	bl	800074c <setCursor>
				  write(0);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fd f8ed 	bl	80008a0 <write>
			  for(int i=0; i<20; i++){
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b13      	cmp	r3, #19
 80036d0:	ddf0      	ble.n	80036b4 <TIM2_IRQHandler+0x520>
			  }

			  for(int j=1; j<3; j++){
 80036d2:	2301      	movs	r3, #1
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e00b      	b.n	80036f0 <TIM2_IRQHandler+0x55c>
				  setCursor(19, j);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4619      	mov	r1, r3
 80036de:	2013      	movs	r0, #19
 80036e0:	f7fd f834 	bl	800074c <setCursor>
				  write(0);
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fd f8db 	bl	80008a0 <write>
			  for(int j=1; j<3; j++){
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	ddf0      	ble.n	80036d8 <TIM2_IRQHandler+0x544>
			  }

			  for(int i=19; i>=0; i--){
 80036f6:	2313      	movs	r3, #19
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e00b      	b.n	8003714 <TIM2_IRQHandler+0x580>
				  setCursor(i, 3);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2103      	movs	r1, #3
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd f822 	bl	800074c <setCursor>
				  write(0);
 8003708:	2000      	movs	r0, #0
 800370a:	f7fd f8c9 	bl	80008a0 <write>
			  for(int i=19; i>=0; i--){
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3b01      	subs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	daf0      	bge.n	80036fc <TIM2_IRQHandler+0x568>
			  }

			  for(int j=2; j>0; j--){
 800371a:	2302      	movs	r3, #2
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	e00b      	b.n	8003738 <TIM2_IRQHandler+0x5a4>
				  setCursor(0, j);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	2000      	movs	r0, #0
 8003728:	f7fd f810 	bl	800074c <setCursor>
				  write(0);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd f8b7 	bl	80008a0 <write>
			  for(int j=2; j>0; j--){
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3b01      	subs	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	dcf0      	bgt.n	8003720 <TIM2_IRQHandler+0x58c>
			  }

			  setCursor(8, 1);
 800373e:	2101      	movs	r1, #1
 8003740:	2008      	movs	r0, #8
 8003742:	f7fd f803 	bl	800074c <setCursor>
			  print(whiteStr);
 8003746:	4823      	ldr	r0, [pc, #140]	; (80037d4 <TIM2_IRQHandler+0x640>)
 8003748:	f7fd f848 	bl	80007dc <print>
			  setCursor(8, 2);
 800374c:	2102      	movs	r1, #2
 800374e:	2008      	movs	r0, #8
 8003750:	f7fc fffc 	bl	800074c <setCursor>
			  print(blackStr);
 8003754:	4820      	ldr	r0, [pc, #128]	; (80037d8 <TIM2_IRQHandler+0x644>)
 8003756:	f7fd f841 	bl	80007dc <print>
 800375a:	e054      	b.n	8003806 <TIM2_IRQHandler+0x672>
		  }

		  else{

			  for(int i=0; i<20; i++){
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e00b      	b.n	800377a <TIM2_IRQHandler+0x5e6>
				  setCursor(i, 0);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc ffef 	bl	800074c <setCursor>
				  write(1);
 800376e:	2001      	movs	r0, #1
 8003770:	f7fd f896 	bl	80008a0 <write>
			  for(int i=0; i<20; i++){
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b13      	cmp	r3, #19
 800377e:	ddf0      	ble.n	8003762 <TIM2_IRQHandler+0x5ce>
			  }

			  for(int j=1; j<3; j++){
 8003780:	2301      	movs	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	e00b      	b.n	800379e <TIM2_IRQHandler+0x60a>
				  setCursor(19, j);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	2013      	movs	r0, #19
 800378e:	f7fc ffdd 	bl	800074c <setCursor>
				  write(1);
 8003792:	2001      	movs	r0, #1
 8003794:	f7fd f884 	bl	80008a0 <write>
			  for(int j=1; j<3; j++){
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	ddf0      	ble.n	8003786 <TIM2_IRQHandler+0x5f2>
			  }

			  for(int i=19; i>=0; i--){
 80037a4:	2313      	movs	r3, #19
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	e00b      	b.n	80037c2 <TIM2_IRQHandler+0x62e>
				  setCursor(i, 3);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2103      	movs	r1, #3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc ffcb 	bl	800074c <setCursor>
				  write(1);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fd f872 	bl	80008a0 <write>
			  for(int i=19; i>=0; i--){
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	daf0      	bge.n	80037aa <TIM2_IRQHandler+0x616>
			  }

			  for(int j=2; j>0; j--){
 80037c8:	2302      	movs	r3, #2
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	e018      	b.n	8003800 <TIM2_IRQHandler+0x66c>
 80037ce:	bf00      	nop
 80037d0:	20000064 	.word	0x20000064
 80037d4:	2000014c 	.word	0x2000014c
 80037d8:	20000154 	.word	0x20000154
 80037dc:	0800b834 	.word	0x0800b834
 80037e0:	0800b8b0 	.word	0x0800b8b0
 80037e4:	20000134 	.word	0x20000134
				  setCursor(0, j);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7fc ffac 	bl	800074c <setCursor>
				  write(1);
 80037f4:	2001      	movs	r0, #1
 80037f6:	f7fd f853 	bl	80008a0 <write>
			  for(int j=2; j>0; j--){
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	dcf0      	bgt.n	80037e8 <TIM2_IRQHandler+0x654>

		  }

	  }

	  switch(clock%4){
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <TIM2_IRQHandler+0x6e4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	425a      	negs	r2, r3
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	f002 0203 	and.w	r2, r2, #3
 8003814:	bf58      	it	pl
 8003816:	4253      	negpl	r3, r2
 8003818:	2b03      	cmp	r3, #3
 800381a:	d824      	bhi.n	8003866 <TIM2_IRQHandler+0x6d2>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <TIM2_IRQHandler+0x690>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003835 	.word	0x08003835
 8003828:	08003841 	.word	0x08003841
 800382c:	0800384d 	.word	0x0800384d
 8003830:	08003859 	.word	0x08003859
	 	  case 0:
	 		  PWM_Change_Tone(1568, 40);
 8003834:	2128      	movs	r1, #40	; 0x28
 8003836:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 800383a:	f7fd f8fd 	bl	8000a38 <PWM_Change_Tone>
	 		  break;
 800383e:	e012      	b.n	8003866 <TIM2_IRQHandler+0x6d2>
	 	  case 1:
	 		  PWM_Change_Tone(1318, 40);
 8003840:	2128      	movs	r1, #40	; 0x28
 8003842:	f240 5026 	movw	r0, #1318	; 0x526
 8003846:	f7fd f8f7 	bl	8000a38 <PWM_Change_Tone>
	 		  break;
 800384a:	e00c      	b.n	8003866 <TIM2_IRQHandler+0x6d2>
	 	  case 2:
	 		  PWM_Change_Tone(1174, 40);
 800384c:	2128      	movs	r1, #40	; 0x28
 800384e:	f240 4096 	movw	r0, #1174	; 0x496
 8003852:	f7fd f8f1 	bl	8000a38 <PWM_Change_Tone>
	 		  break;
 8003856:	e006      	b.n	8003866 <TIM2_IRQHandler+0x6d2>
	 	  case 3:
	 		  PWM_Change_Tone(1046, 40);
 8003858:	2128      	movs	r1, #40	; 0x28
 800385a:	f240 4016 	movw	r0, #1046	; 0x416
 800385e:	f7fd f8eb 	bl	8000a38 <PWM_Change_Tone>
	 		  break;
 8003862:	e000      	b.n	8003866 <TIM2_IRQHandler+0x6d2>
	 	  }


  }
 8003864:	bf00      	nop

  clock = clock + 1;
 8003866:	4b04      	ldr	r3, [pc, #16]	; (8003878 <TIM2_IRQHandler+0x6e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3301      	adds	r3, #1
 800386c:	4a02      	ldr	r2, [pc, #8]	; (8003878 <TIM2_IRQHandler+0x6e4>)
 800386e:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	3740      	adds	r7, #64	; 0x40
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000134 	.word	0x20000134

0800387c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003880:	4838      	ldr	r0, [pc, #224]	; (8003964 <TIM4_IRQHandler+0xe8>)
 8003882:	f004 fa69 	bl	8007d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  if(state == 1){
 8003886:	4b38      	ldr	r3, [pc, #224]	; (8003968 <TIM4_IRQHandler+0xec>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d168      	bne.n	8003960 <TIM4_IRQHandler+0xe4>
	  remain = remain - 1;
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <TIM4_IRQHandler+0xf0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3b01      	subs	r3, #1
 8003894:	4a35      	ldr	r2, [pc, #212]	; (800396c <TIM4_IRQHandler+0xf0>)
 8003896:	6013      	str	r3, [r2, #0]
	  if(remain == 0){
 8003898:	4b34      	ldr	r3, [pc, #208]	; (800396c <TIM4_IRQHandler+0xf0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d158      	bne.n	8003952 <TIM4_IRQHandler+0xd6>
		  buzzAlarm = 0;
 80038a0:	4b33      	ldr	r3, [pc, #204]	; (8003970 <TIM4_IRQHandler+0xf4>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80038a6:	4b33      	ldr	r3, [pc, #204]	; (8003974 <TIM4_IRQHandler+0xf8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
		  state = 2;
 80038ae:	4b2e      	ldr	r3, [pc, #184]	; (8003968 <TIM4_IRQHandler+0xec>)
 80038b0:	2202      	movs	r2, #2
 80038b2:	601a      	str	r2, [r3, #0]
		  winner = (turn+1) % 2;
 80038b4:	4b30      	ldr	r3, [pc, #192]	; (8003978 <TIM4_IRQHandler+0xfc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	bfb8      	it	lt
 80038c2:	425b      	neglt	r3, r3
 80038c4:	4a2d      	ldr	r2, [pc, #180]	; (800397c <TIM4_IRQHandler+0x100>)
 80038c6:	6013      	str	r3, [r2, #0]
		  clear();
 80038c8:	f7fc ff36 	bl	8000738 <clear>
		  blackScore = getScore(1);
 80038cc:	2001      	movs	r0, #1
 80038ce:	f7fe ffc5 	bl	800285c <getScore>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <TIM4_IRQHandler+0x104>)
 80038d6:	6013      	str	r3, [r2, #0]
		  whiteScore = getScore(0);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fe ffbf 	bl	800285c <getScore>
 80038de:	4603      	mov	r3, r0
 80038e0:	4a28      	ldr	r2, [pc, #160]	; (8003984 <TIM4_IRQHandler+0x108>)
 80038e2:	6013      	str	r3, [r2, #0]

		  createChar(0, white);
 80038e4:	4928      	ldr	r1, [pc, #160]	; (8003988 <TIM4_IRQHandler+0x10c>)
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7fc ffa3 	bl	8000832 <createChar>
		  createChar(1, black);
 80038ec:	4927      	ldr	r1, [pc, #156]	; (800398c <TIM4_IRQHandler+0x110>)
 80038ee:	2001      	movs	r0, #1
 80038f0:	f7fc ff9f 	bl	8000832 <createChar>

		  sprintf(whiteStr, "W: %d ", whiteScore);
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <TIM4_IRQHandler+0x108>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4925      	ldr	r1, [pc, #148]	; (8003990 <TIM4_IRQHandler+0x114>)
 80038fc:	4825      	ldr	r0, [pc, #148]	; (8003994 <TIM4_IRQHandler+0x118>)
 80038fe:	f006 fe71 	bl	800a5e4 <siprintf>
		  sprintf(blackStr, "B: %d ", blackScore);
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <TIM4_IRQHandler+0x104>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4923      	ldr	r1, [pc, #140]	; (8003998 <TIM4_IRQHandler+0x11c>)
 800390a:	4824      	ldr	r0, [pc, #144]	; (800399c <TIM4_IRQHandler+0x120>)
 800390c:	f006 fe6a 	bl	800a5e4 <siprintf>

		  switch(winner){
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <TIM4_IRQHandler+0x100>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d00b      	beq.n	8003930 <TIM4_IRQHandler+0xb4>
 8003918:	2b01      	cmp	r3, #1
 800391a:	dc13      	bgt.n	8003944 <TIM4_IRQHandler+0xc8>
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d00b      	beq.n	800393a <TIM4_IRQHandler+0xbe>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <TIM4_IRQHandler+0xc8>
		  case 0:
			  sprintf(uartRes, "R White win\n");
 8003926:	491e      	ldr	r1, [pc, #120]	; (80039a0 <TIM4_IRQHandler+0x124>)
 8003928:	481e      	ldr	r0, [pc, #120]	; (80039a4 <TIM4_IRQHandler+0x128>)
 800392a:	f006 fe5b 	bl	800a5e4 <siprintf>
			  break;
 800392e:	e009      	b.n	8003944 <TIM4_IRQHandler+0xc8>
		  case 1:
			  sprintf(uartRes, "R Black win\n");
 8003930:	491d      	ldr	r1, [pc, #116]	; (80039a8 <TIM4_IRQHandler+0x12c>)
 8003932:	481c      	ldr	r0, [pc, #112]	; (80039a4 <TIM4_IRQHandler+0x128>)
 8003934:	f006 fe56 	bl	800a5e4 <siprintf>
			  break;
 8003938:	e004      	b.n	8003944 <TIM4_IRQHandler+0xc8>
		  case -1:
			  sprintf(uartRes, "R Tie!!!! 0\n");
 800393a:	491c      	ldr	r1, [pc, #112]	; (80039ac <TIM4_IRQHandler+0x130>)
 800393c:	4819      	ldr	r0, [pc, #100]	; (80039a4 <TIM4_IRQHandler+0x128>)
 800393e:	f006 fe51 	bl	800a5e4 <siprintf>
			  break;
 8003942:	bf00      	nop
		  }
		  HAL_UART_Transmit(&huart2, uartRes, sizeof(uartRes), 1000);
 8003944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003948:	220c      	movs	r2, #12
 800394a:	4916      	ldr	r1, [pc, #88]	; (80039a4 <TIM4_IRQHandler+0x128>)
 800394c:	4818      	ldr	r0, [pc, #96]	; (80039b0 <TIM4_IRQHandler+0x134>)
 800394e:	f005 fb3d 	bl	8008fcc <HAL_UART_Transmit>

	  }
	  if(remain == 10){
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <TIM4_IRQHandler+0xf0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b0a      	cmp	r3, #10
 8003958:	d102      	bne.n	8003960 <TIM4_IRQHandler+0xe4>
		  buzzAlarm = 1;
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <TIM4_IRQHandler+0xf4>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]


  }

  /* USER CODE END TIM4_IRQn 1 */
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	2000025c 	.word	0x2000025c
 8003968:	20000128 	.word	0x20000128
 800396c:	2000006c 	.word	0x2000006c
 8003970:	20000220 	.word	0x20000220
 8003974:	200002f4 	.word	0x200002f4
 8003978:	2000005c 	.word	0x2000005c
 800397c:	20000064 	.word	0x20000064
 8003980:	2000013c 	.word	0x2000013c
 8003984:	20000138 	.word	0x20000138
 8003988:	20000070 	.word	0x20000070
 800398c:	20000078 	.word	0x20000078
 8003990:	0800b8a0 	.word	0x0800b8a0
 8003994:	2000014c 	.word	0x2000014c
 8003998:	0800b8a8 	.word	0x0800b8a8
 800399c:	20000154 	.word	0x20000154
 80039a0:	0800b8b8 	.word	0x0800b8b8
 80039a4:	2000020c 	.word	0x2000020c
 80039a8:	0800b8c8 	.word	0x0800b8c8
 80039ac:	0800b8d8 	.word	0x0800b8d8
 80039b0:	200003d8 	.word	0x200003d8

080039b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039ba:	48a8      	ldr	r0, [pc, #672]	; (8003c5c <USART2_IRQHandler+0x2a8>)
 80039bc:	f005 fbe8 	bl	8009190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(data[0] != '\n'){
 80039c0:	4ba7      	ldr	r3, [pc, #668]	; (8003c60 <USART2_IRQHandler+0x2ac>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b0a      	cmp	r3, #10
 80039c6:	d011      	beq.n	80039ec <USART2_IRQHandler+0x38>

  	  buffer[pos] = data[0];
 80039c8:	4ba6      	ldr	r3, [pc, #664]	; (8003c64 <USART2_IRQHandler+0x2b0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4aa4      	ldr	r2, [pc, #656]	; (8003c60 <USART2_IRQHandler+0x2ac>)
 80039ce:	7811      	ldrb	r1, [r2, #0]
 80039d0:	4aa5      	ldr	r2, [pc, #660]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 80039d2:	54d1      	strb	r1, [r2, r3]
  	  buffer[pos + 1] = '\0';
 80039d4:	4ba3      	ldr	r3, [pc, #652]	; (8003c64 <USART2_IRQHandler+0x2b0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	4aa3      	ldr	r2, [pc, #652]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 80039dc:	2100      	movs	r1, #0
 80039de:	54d1      	strb	r1, [r2, r3]
  	  pos = pos + 1;
 80039e0:	4ba0      	ldr	r3, [pc, #640]	; (8003c64 <USART2_IRQHandler+0x2b0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	4a9f      	ldr	r2, [pc, #636]	; (8003c64 <USART2_IRQHandler+0x2b0>)
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e196      	b.n	8003d1a <USART2_IRQHandler+0x366>
    }
  else if(data[0] == '\n'){
 80039ec:	4b9c      	ldr	r3, [pc, #624]	; (8003c60 <USART2_IRQHandler+0x2ac>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b0a      	cmp	r3, #10
 80039f2:	f040 8192 	bne.w	8003d1a <USART2_IRQHandler+0x366>
//	  uart player
	  if(buffer[0] != 'U'){
 80039f6:	4b9c      	ldr	r3, [pc, #624]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b55      	cmp	r3, #85	; 0x55
 80039fc:	f000 818a 	beq.w	8003d14 <USART2_IRQHandler+0x360>

		  uy = getY(buffer[0]);
 8003a00:	4b99      	ldr	r3, [pc, #612]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ff8b 	bl	8002920 <getY>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4a97      	ldr	r2, [pc, #604]	; (8003c6c <USART2_IRQHandler+0x2b8>)
 8003a0e:	6013      	str	r3, [r2, #0]
		  ux = buffer[1] - '0' - 1;
 8003a10:	4b95      	ldr	r3, [pc, #596]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	3b31      	subs	r3, #49	; 0x31
 8003a16:	4a96      	ldr	r2, [pc, #600]	; (8003c70 <USART2_IRQHandler+0x2bc>)
 8003a18:	6013      	str	r3, [r2, #0]
		  t = getTurn(buffer[3]);
 8003a1a:	4b93      	ldr	r3, [pc, #588]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003a1c:	78db      	ldrb	r3, [r3, #3]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe ffcb 	bl	80029ba <getTurn>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4a93      	ldr	r2, [pc, #588]	; (8003c74 <USART2_IRQHandler+0x2c0>)
 8003a28:	6013      	str	r3, [r2, #0]

		  if(t == turn && uy >= 0 && uy <8 && ux >= 0 && ux <8){
 8003a2a:	4b92      	ldr	r3, [pc, #584]	; (8003c74 <USART2_IRQHandler+0x2c0>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b92      	ldr	r3, [pc, #584]	; (8003c78 <USART2_IRQHandler+0x2c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	f040 8152 	bne.w	8003cdc <USART2_IRQHandler+0x328>
 8003a38:	4b8c      	ldr	r3, [pc, #560]	; (8003c6c <USART2_IRQHandler+0x2b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f2c0 814d 	blt.w	8003cdc <USART2_IRQHandler+0x328>
 8003a42:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <USART2_IRQHandler+0x2b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b07      	cmp	r3, #7
 8003a48:	f300 8148 	bgt.w	8003cdc <USART2_IRQHandler+0x328>
 8003a4c:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <USART2_IRQHandler+0x2bc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f2c0 8143 	blt.w	8003cdc <USART2_IRQHandler+0x328>
 8003a56:	4b86      	ldr	r3, [pc, #536]	; (8003c70 <USART2_IRQHandler+0x2bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b07      	cmp	r3, #7
 8003a5c:	f300 813e 	bgt.w	8003cdc <USART2_IRQHandler+0x328>

			  if(isValid(turn, ux, uy)){
 8003a60:	4b85      	ldr	r3, [pc, #532]	; (8003c78 <USART2_IRQHandler+0x2c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a82      	ldr	r2, [pc, #520]	; (8003c70 <USART2_IRQHandler+0x2bc>)
 8003a66:	6811      	ldr	r1, [r2, #0]
 8003a68:	4a80      	ldr	r2, [pc, #512]	; (8003c6c <USART2_IRQHandler+0x2b8>)
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f96d 	bl	8001d4c <isValid>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80cb 	beq.w	8003c10 <USART2_IRQHandler+0x25c>
				  	  	  sprintf(response, "V %c%c%c%c\n" ,buffer[0], buffer[1], buffer[2], buffer[3]);
 8003a7a:	4b7b      	ldr	r3, [pc, #492]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4b79      	ldr	r3, [pc, #484]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	4618      	mov	r0, r3
 8003a86:	4b78      	ldr	r3, [pc, #480]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003a88:	789b      	ldrb	r3, [r3, #2]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003a8e:	78db      	ldrb	r3, [r3, #3]
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	4603      	mov	r3, r0
 8003a96:	460a      	mov	r2, r1
 8003a98:	4978      	ldr	r1, [pc, #480]	; (8003c7c <USART2_IRQHandler+0x2c8>)
 8003a9a:	4879      	ldr	r0, [pc, #484]	; (8003c80 <USART2_IRQHandler+0x2cc>)
 8003a9c:	f006 fda2 	bl	800a5e4 <siprintf>
						  HAL_UART_Transmit(&huart2, response, sizeof(response), 1000);
 8003aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	4976      	ldr	r1, [pc, #472]	; (8003c80 <USART2_IRQHandler+0x2cc>)
 8003aa8:	486c      	ldr	r0, [pc, #432]	; (8003c5c <USART2_IRQHandler+0x2a8>)
 8003aaa:	f005 fa8f 	bl	8008fcc <HAL_UART_Transmit>

						  x = ux;
 8003aae:	4b70      	ldr	r3, [pc, #448]	; (8003c70 <USART2_IRQHandler+0x2bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a74      	ldr	r2, [pc, #464]	; (8003c84 <USART2_IRQHandler+0x2d0>)
 8003ab4:	6013      	str	r3, [r2, #0]
						  y = uy;
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <USART2_IRQHandler+0x2b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a73      	ldr	r2, [pc, #460]	; (8003c88 <USART2_IRQHandler+0x2d4>)
 8003abc:	6013      	str	r3, [r2, #0]
						  printLocation();
 8003abe:	f7fe f89b 	bl	8001bf8 <printLocation>

			  			  sandwich(turn, x, y);
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <USART2_IRQHandler+0x2c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6f      	ldr	r2, [pc, #444]	; (8003c84 <USART2_IRQHandler+0x2d0>)
 8003ac8:	6811      	ldr	r1, [r2, #0]
 8003aca:	4a6f      	ldr	r2, [pc, #444]	; (8003c88 <USART2_IRQHandler+0x2d4>)
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fbba 	bl	8002248 <sandwich>

			  			  whiteScore = getScore(0);
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f7fe fec1 	bl	800285c <getScore>
 8003ada:	4603      	mov	r3, r0
 8003adc:	4a6b      	ldr	r2, [pc, #428]	; (8003c8c <USART2_IRQHandler+0x2d8>)
 8003ade:	6013      	str	r3, [r2, #0]
			  			  blackScore = getScore(1);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7fe febb 	bl	800285c <getScore>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <USART2_IRQHandler+0x2dc>)
 8003aea:	6013      	str	r3, [r2, #0]

			  			  sprintf(whiteStr, "W: %d ", whiteScore);
 8003aec:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <USART2_IRQHandler+0x2d8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	4968      	ldr	r1, [pc, #416]	; (8003c94 <USART2_IRQHandler+0x2e0>)
 8003af4:	4868      	ldr	r0, [pc, #416]	; (8003c98 <USART2_IRQHandler+0x2e4>)
 8003af6:	f006 fd75 	bl	800a5e4 <siprintf>
			  			  sprintf(blackStr, "B: %d ", blackScore);
 8003afa:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <USART2_IRQHandler+0x2dc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	4966      	ldr	r1, [pc, #408]	; (8003c9c <USART2_IRQHandler+0x2e8>)
 8003b02:	4867      	ldr	r0, [pc, #412]	; (8003ca0 <USART2_IRQHandler+0x2ec>)
 8003b04:	f006 fd6e 	bl	800a5e4 <siprintf>
			  			  printScore();
 8003b08:	f7fe fef4 	bl	80028f4 <printScore>
			  			  printBoard();
 8003b0c:	f7fd ff5c 	bl	80019c8 <printBoard>

			  			  remain = time;
 8003b10:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <USART2_IRQHandler+0x2f0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <USART2_IRQHandler+0x2f4>)
 8003b16:	6013      	str	r3, [r2, #0]


			  			  if(canPlay((turn+1)%2)){
 8003b18:	4b57      	ldr	r3, [pc, #348]	; (8003c78 <USART2_IRQHandler+0x2c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	bfb8      	it	lt
 8003b26:	425b      	neglt	r3, r3
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fadf 	bl	80020ec <canPlay>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d016      	beq.n	8003b62 <USART2_IRQHandler+0x1ae>
			  				  turn = (turn +1) % 2;
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <USART2_IRQHandler+0x2c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	bfb8      	it	lt
 8003b42:	425b      	neglt	r3, r3
 8003b44:	4a4c      	ldr	r2, [pc, #304]	; (8003c78 <USART2_IRQHandler+0x2c4>)
 8003b46:	6013      	str	r3, [r2, #0]
			  				  printTurn();
 8003b48:	f7fe f83c 	bl	8001bc4 <printTurn>
							  sendBoard(0);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f7fe ff9b 	bl	8002a88 <sendBoard>
							  HAL_UART_Transmit(&huart2, uart_Board, sizeof(uart_Board), 1000);
 8003b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b56:	2247      	movs	r2, #71	; 0x47
 8003b58:	4954      	ldr	r1, [pc, #336]	; (8003cac <USART2_IRQHandler+0x2f8>)
 8003b5a:	4840      	ldr	r0, [pc, #256]	; (8003c5c <USART2_IRQHandler+0x2a8>)
 8003b5c:	f005 fa36 	bl	8008fcc <HAL_UART_Transmit>
			  if(isValid(turn, ux, uy)){
 8003b60:	e0d7      	b.n	8003d12 <USART2_IRQHandler+0x35e>
			  			  }
			  			  //end
			  			  else if(canPlay(turn) == 0){
 8003b62:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <USART2_IRQHandler+0x2c4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fac0 	bl	80020ec <canPlay>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 80cf 	bne.w	8003d12 <USART2_IRQHandler+0x35e>
			  					  state = 2;
 8003b74:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <USART2_IRQHandler+0x2fc>)
 8003b76:	2202      	movs	r2, #2
 8003b78:	601a      	str	r2, [r3, #0]
			  					  clear();
 8003b7a:	f7fc fddd 	bl	8000738 <clear>
			  					  blackScore = getScore(1);
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f7fe fe6c 	bl	800285c <getScore>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4a42      	ldr	r2, [pc, #264]	; (8003c90 <USART2_IRQHandler+0x2dc>)
 8003b88:	6013      	str	r3, [r2, #0]
			  					  whiteScore = getScore(0);
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f7fe fe66 	bl	800285c <getScore>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <USART2_IRQHandler+0x2d8>)
 8003b94:	6013      	str	r3, [r2, #0]
			  					  winner = getWinner();
 8003b96:	f7fe fe8f 	bl	80028b8 <getWinner>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4a45      	ldr	r2, [pc, #276]	; (8003cb4 <USART2_IRQHandler+0x300>)
 8003b9e:	6013      	str	r3, [r2, #0]
			  					  createChar(0, white);
 8003ba0:	4945      	ldr	r1, [pc, #276]	; (8003cb8 <USART2_IRQHandler+0x304>)
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7fc fe45 	bl	8000832 <createChar>
			  					  createChar(1, black);
 8003ba8:	4944      	ldr	r1, [pc, #272]	; (8003cbc <USART2_IRQHandler+0x308>)
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7fc fe41 	bl	8000832 <createChar>

			  					  sprintf(whiteStr, "W: %d ", whiteScore);
 8003bb0:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <USART2_IRQHandler+0x2d8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4937      	ldr	r1, [pc, #220]	; (8003c94 <USART2_IRQHandler+0x2e0>)
 8003bb8:	4837      	ldr	r0, [pc, #220]	; (8003c98 <USART2_IRQHandler+0x2e4>)
 8003bba:	f006 fd13 	bl	800a5e4 <siprintf>
			  					  sprintf(blackStr, "B: %d ", blackScore);
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <USART2_IRQHandler+0x2dc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4935      	ldr	r1, [pc, #212]	; (8003c9c <USART2_IRQHandler+0x2e8>)
 8003bc6:	4836      	ldr	r0, [pc, #216]	; (8003ca0 <USART2_IRQHandler+0x2ec>)
 8003bc8:	f006 fd0c 	bl	800a5e4 <siprintf>

			  					  switch(winner){
 8003bcc:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <USART2_IRQHandler+0x300>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d00b      	beq.n	8003bec <USART2_IRQHandler+0x238>
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	dc13      	bgt.n	8003c00 <USART2_IRQHandler+0x24c>
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d00b      	beq.n	8003bf6 <USART2_IRQHandler+0x242>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10e      	bne.n	8003c00 <USART2_IRQHandler+0x24c>
			  					  case 0:
			  						  sprintf(uartRes, "R White win\n");
 8003be2:	4937      	ldr	r1, [pc, #220]	; (8003cc0 <USART2_IRQHandler+0x30c>)
 8003be4:	4837      	ldr	r0, [pc, #220]	; (8003cc4 <USART2_IRQHandler+0x310>)
 8003be6:	f006 fcfd 	bl	800a5e4 <siprintf>
			  						  break;
 8003bea:	e009      	b.n	8003c00 <USART2_IRQHandler+0x24c>
			  					  case 1:
			  						  sprintf(uartRes, "R Black win\n");
 8003bec:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <USART2_IRQHandler+0x314>)
 8003bee:	4835      	ldr	r0, [pc, #212]	; (8003cc4 <USART2_IRQHandler+0x310>)
 8003bf0:	f006 fcf8 	bl	800a5e4 <siprintf>
			  						  break;
 8003bf4:	e004      	b.n	8003c00 <USART2_IRQHandler+0x24c>
			  					  case -1:
			  						  sprintf(uartRes, "R Tie!!!! 0\n");
 8003bf6:	4935      	ldr	r1, [pc, #212]	; (8003ccc <USART2_IRQHandler+0x318>)
 8003bf8:	4832      	ldr	r0, [pc, #200]	; (8003cc4 <USART2_IRQHandler+0x310>)
 8003bfa:	f006 fcf3 	bl	800a5e4 <siprintf>
			  						  break;
 8003bfe:	bf00      	nop
			  					  }
			  					  HAL_UART_Transmit(&huart2, uartRes, sizeof(uartRes), 1000);
 8003c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c04:	220c      	movs	r2, #12
 8003c06:	492f      	ldr	r1, [pc, #188]	; (8003cc4 <USART2_IRQHandler+0x310>)
 8003c08:	4814      	ldr	r0, [pc, #80]	; (8003c5c <USART2_IRQHandler+0x2a8>)
 8003c0a:	f005 f9df 	bl	8008fcc <HAL_UART_Transmit>
			  if(isValid(turn, ux, uy)){
 8003c0e:	e080      	b.n	8003d12 <USART2_IRQHandler+0x35e>

			  			  }
			  }

			  else{
				  resetLED();
 8003c10:	f7fe fdee 	bl	80027f0 <resetLED>
				  invalidAlarm = 1;
 8003c14:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <USART2_IRQHandler+0x31c>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
				  invalidStart = HAL_GetTick();
 8003c1a:	f000 fb5b 	bl	80042d4 <HAL_GetTick>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <USART2_IRQHandler+0x320>)
 8003c24:	601a      	str	r2, [r3, #0]
		  	  	  sprintf(response, "I %c%c%c%c\n" ,buffer[0], buffer[1], buffer[2], buffer[3]);
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	4618      	mov	r0, r3
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003c34:	789b      	ldrb	r3, [r3, #2]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <USART2_IRQHandler+0x2b4>)
 8003c3a:	78db      	ldrb	r3, [r3, #3]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	9200      	str	r2, [sp, #0]
 8003c40:	4603      	mov	r3, r0
 8003c42:	460a      	mov	r2, r1
 8003c44:	4924      	ldr	r1, [pc, #144]	; (8003cd8 <USART2_IRQHandler+0x324>)
 8003c46:	480e      	ldr	r0, [pc, #56]	; (8003c80 <USART2_IRQHandler+0x2cc>)
 8003c48:	f006 fccc 	bl	800a5e4 <siprintf>
				  HAL_UART_Transmit(&huart2, response, sizeof(response), 1000);
 8003c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c50:	2207      	movs	r2, #7
 8003c52:	490b      	ldr	r1, [pc, #44]	; (8003c80 <USART2_IRQHandler+0x2cc>)
 8003c54:	4801      	ldr	r0, [pc, #4]	; (8003c5c <USART2_IRQHandler+0x2a8>)
 8003c56:	f005 f9b9 	bl	8008fcc <HAL_UART_Transmit>
			  if(isValid(turn, ux, uy)){
 8003c5a:	e05a      	b.n	8003d12 <USART2_IRQHandler+0x35e>
 8003c5c:	200003d8 	.word	0x200003d8
 8003c60:	20000110 	.word	0x20000110
 8003c64:	2000015c 	.word	0x2000015c
 8003c68:	20000160 	.word	0x20000160
 8003c6c:	20000058 	.word	0x20000058
 8003c70:	20000054 	.word	0x20000054
 8003c74:	20000060 	.word	0x20000060
 8003c78:	2000005c 	.word	0x2000005c
 8003c7c:	0800b8e8 	.word	0x0800b8e8
 8003c80:	20000218 	.word	0x20000218
 8003c84:	2000004c 	.word	0x2000004c
 8003c88:	20000050 	.word	0x20000050
 8003c8c:	20000138 	.word	0x20000138
 8003c90:	2000013c 	.word	0x2000013c
 8003c94:	0800b8a0 	.word	0x0800b8a0
 8003c98:	2000014c 	.word	0x2000014c
 8003c9c:	0800b8a8 	.word	0x0800b8a8
 8003ca0:	20000154 	.word	0x20000154
 8003ca4:	20000068 	.word	0x20000068
 8003ca8:	2000006c 	.word	0x2000006c
 8003cac:	200001c4 	.word	0x200001c4
 8003cb0:	20000128 	.word	0x20000128
 8003cb4:	20000064 	.word	0x20000064
 8003cb8:	20000070 	.word	0x20000070
 8003cbc:	20000078 	.word	0x20000078
 8003cc0:	0800b8b8 	.word	0x0800b8b8
 8003cc4:	2000020c 	.word	0x2000020c
 8003cc8:	0800b8c8 	.word	0x0800b8c8
 8003ccc:	0800b8d8 	.word	0x0800b8d8
 8003cd0:	2000012c 	.word	0x2000012c
 8003cd4:	20000130 	.word	0x20000130
 8003cd8:	0800b8f4 	.word	0x0800b8f4
			  }
		  }
		  else{
	  	  	  sprintf(response, "I %c%c%c%c\n" ,buffer[0], buffer[1], buffer[2], buffer[3]);
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <USART2_IRQHandler+0x378>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <USART2_IRQHandler+0x378>)
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <USART2_IRQHandler+0x378>)
 8003cea:	789b      	ldrb	r3, [r3, #2]
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <USART2_IRQHandler+0x378>)
 8003cf0:	78db      	ldrb	r3, [r3, #3]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	9200      	str	r2, [sp, #0]
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	490d      	ldr	r1, [pc, #52]	; (8003d30 <USART2_IRQHandler+0x37c>)
 8003cfc:	480d      	ldr	r0, [pc, #52]	; (8003d34 <USART2_IRQHandler+0x380>)
 8003cfe:	f006 fc71 	bl	800a5e4 <siprintf>
			  HAL_UART_Transmit(&huart2, response, sizeof(response), 1000);
 8003d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d06:	2207      	movs	r2, #7
 8003d08:	490a      	ldr	r1, [pc, #40]	; (8003d34 <USART2_IRQHandler+0x380>)
 8003d0a:	480b      	ldr	r0, [pc, #44]	; (8003d38 <USART2_IRQHandler+0x384>)
 8003d0c:	f005 f95e 	bl	8008fcc <HAL_UART_Transmit>
 8003d10:	e000      	b.n	8003d14 <USART2_IRQHandler+0x360>
			  if(isValid(turn, ux, uy)){
 8003d12:	bf00      	nop
		  }
	  }
	  pos = 0;
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <USART2_IRQHandler+0x388>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
  }


  HAL_UART_Receive_IT(&huart2, data, sizeof(data));
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4908      	ldr	r1, [pc, #32]	; (8003d40 <USART2_IRQHandler+0x38c>)
 8003d1e:	4806      	ldr	r0, [pc, #24]	; (8003d38 <USART2_IRQHandler+0x384>)
 8003d20:	f005 f9e8 	bl	80090f4 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000160 	.word	0x20000160
 8003d30:	0800b8f4 	.word	0x0800b8f4
 8003d34:	20000218 	.word	0x20000218
 8003d38:	200003d8 	.word	0x200003d8
 8003d3c:	2000015c 	.word	0x2000015c
 8003d40:	20000110 	.word	0x20000110

08003d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003d48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d4c:	f002 f874 	bl	8005e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(HAL_GetTick() - lastEx12 >= 500 && state == 1){
 8003d50:	f000 fac0 	bl	80042d4 <HAL_GetTick>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a90      	ldr	r2, [pc, #576]	; (8003f98 <EXTI15_10_IRQHandler+0x254>)
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d60:	f0c0 8112 	bcc.w	8003f88 <EXTI15_10_IRQHandler+0x244>
 8003d64:	4b8d      	ldr	r3, [pc, #564]	; (8003f9c <EXTI15_10_IRQHandler+0x258>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 810d 	bne.w	8003f88 <EXTI15_10_IRQHandler+0x244>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2110      	movs	r1, #16
 8003d72:	488b      	ldr	r0, [pc, #556]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003d74:	f002 f82e 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	4888      	ldr	r0, [pc, #544]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003d7e:	f002 f829 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8003d82:	2200      	movs	r2, #0
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4886      	ldr	r0, [pc, #536]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003d88:	f002 f824 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	4883      	ldr	r0, [pc, #524]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003d92:	f002 f81f 	bl	8005dd4 <HAL_GPIO_WritePin>

	  //select

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8003d96:	2201      	movs	r2, #1
 8003d98:	2110      	movs	r1, #16
 8003d9a:	4881      	ldr	r0, [pc, #516]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003d9c:	f002 f81a 	bl	8005dd4 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)){
 8003da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003da4:	487f      	ldr	r0, [pc, #508]	; (8003fa4 <EXTI15_10_IRQHandler+0x260>)
 8003da6:	f001 fffd 	bl	8005da4 <HAL_GPIO_ReadPin>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80d7 	beq.w	8003f60 <EXTI15_10_IRQHandler+0x21c>
		  resetLED();
 8003db2:	f7fe fd1d 	bl	80027f0 <resetLED>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8003db6:	2201      	movs	r2, #1
 8003db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dbc:	487a      	ldr	r0, [pc, #488]	; (8003fa8 <EXTI15_10_IRQHandler+0x264>)
 8003dbe:	f002 f809 	bl	8005dd4 <HAL_GPIO_WritePin>
		  if(isValid(turn, x, y)){
 8003dc2:	4b7a      	ldr	r3, [pc, #488]	; (8003fac <EXTI15_10_IRQHandler+0x268>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7a      	ldr	r2, [pc, #488]	; (8003fb0 <EXTI15_10_IRQHandler+0x26c>)
 8003dc8:	6811      	ldr	r1, [r2, #0]
 8003dca:	4a7a      	ldr	r2, [pc, #488]	; (8003fb4 <EXTI15_10_IRQHandler+0x270>)
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd ffbc 	bl	8001d4c <isValid>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80b7 	beq.w	8003f4a <EXTI15_10_IRQHandler+0x206>
			  buzzAlarm = 0;
 8003ddc:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <EXTI15_10_IRQHandler+0x274>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
			  sandwich(turn, x, y);
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <EXTI15_10_IRQHandler+0x268>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a72      	ldr	r2, [pc, #456]	; (8003fb0 <EXTI15_10_IRQHandler+0x26c>)
 8003de8:	6811      	ldr	r1, [r2, #0]
 8003dea:	4a72      	ldr	r2, [pc, #456]	; (8003fb4 <EXTI15_10_IRQHandler+0x270>)
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fa2a 	bl	8002248 <sandwich>

			  whiteScore = getScore(0);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fe fd31 	bl	800285c <getScore>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4a6f      	ldr	r2, [pc, #444]	; (8003fbc <EXTI15_10_IRQHandler+0x278>)
 8003dfe:	6013      	str	r3, [r2, #0]
			  blackScore = getScore(1);
 8003e00:	2001      	movs	r0, #1
 8003e02:	f7fe fd2b 	bl	800285c <getScore>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a6d      	ldr	r2, [pc, #436]	; (8003fc0 <EXTI15_10_IRQHandler+0x27c>)
 8003e0a:	6013      	str	r3, [r2, #0]

			  sprintf(whiteStr, "W: %d ", whiteScore);
 8003e0c:	4b6b      	ldr	r3, [pc, #428]	; (8003fbc <EXTI15_10_IRQHandler+0x278>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	496c      	ldr	r1, [pc, #432]	; (8003fc4 <EXTI15_10_IRQHandler+0x280>)
 8003e14:	486c      	ldr	r0, [pc, #432]	; (8003fc8 <EXTI15_10_IRQHandler+0x284>)
 8003e16:	f006 fbe5 	bl	800a5e4 <siprintf>
			  sprintf(blackStr, "B: %d ", blackScore);
 8003e1a:	4b69      	ldr	r3, [pc, #420]	; (8003fc0 <EXTI15_10_IRQHandler+0x27c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	496a      	ldr	r1, [pc, #424]	; (8003fcc <EXTI15_10_IRQHandler+0x288>)
 8003e22:	486b      	ldr	r0, [pc, #428]	; (8003fd0 <EXTI15_10_IRQHandler+0x28c>)
 8003e24:	f006 fbde 	bl	800a5e4 <siprintf>
			  printScore();
 8003e28:	f7fe fd64 	bl	80028f4 <printScore>
			  printBoard();
 8003e2c:	f7fd fdcc 	bl	80019c8 <printBoard>

			  remain = time;
 8003e30:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <EXTI15_10_IRQHandler+0x290>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a68      	ldr	r2, [pc, #416]	; (8003fd8 <EXTI15_10_IRQHandler+0x294>)
 8003e36:	6013      	str	r3, [r2, #0]




			  if(!buzzAlarm){
 8003e38:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <EXTI15_10_IRQHandler+0x274>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <EXTI15_10_IRQHandler+0x110>
				  effect = HAL_GetTick();
 8003e40:	f000 fa48 	bl	80042d4 <HAL_GetTick>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <EXTI15_10_IRQHandler+0x298>)
 8003e4a:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 70);
 8003e4c:	4b64      	ldr	r3, [pc, #400]	; (8003fe0 <EXTI15_10_IRQHandler+0x29c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2246      	movs	r2, #70	; 0x46
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
			  }

			  if(canPlay((turn+1)%2)){
 8003e54:	4b55      	ldr	r3, [pc, #340]	; (8003fac <EXTI15_10_IRQHandler+0x268>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	bfb8      	it	lt
 8003e62:	425b      	neglt	r3, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe f941 	bl	80020ec <canPlay>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d016      	beq.n	8003e9e <EXTI15_10_IRQHandler+0x15a>
				  turn = (turn +1) % 2;
 8003e70:	4b4e      	ldr	r3, [pc, #312]	; (8003fac <EXTI15_10_IRQHandler+0x268>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	bfb8      	it	lt
 8003e7e:	425b      	neglt	r3, r3
 8003e80:	4a4a      	ldr	r2, [pc, #296]	; (8003fac <EXTI15_10_IRQHandler+0x268>)
 8003e82:	6013      	str	r3, [r2, #0]
				  printTurn();
 8003e84:	f7fd fe9e 	bl	8001bc4 <printTurn>
				  sendBoard(0);
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7fe fdfd 	bl	8002a88 <sendBoard>
				  HAL_UART_Transmit(&huart2, uart_Board, sizeof(uart_Board), 1000);
 8003e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e92:	2247      	movs	r2, #71	; 0x47
 8003e94:	4953      	ldr	r1, [pc, #332]	; (8003fe4 <EXTI15_10_IRQHandler+0x2a0>)
 8003e96:	4854      	ldr	r0, [pc, #336]	; (8003fe8 <EXTI15_10_IRQHandler+0x2a4>)
 8003e98:	f005 f898 	bl	8008fcc <HAL_UART_Transmit>
 8003e9c:	e060      	b.n	8003f60 <EXTI15_10_IRQHandler+0x21c>
			  }
			  //end
			  else if(canPlay(turn) == 0){
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <EXTI15_10_IRQHandler+0x268>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f922 	bl	80020ec <canPlay>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d158      	bne.n	8003f60 <EXTI15_10_IRQHandler+0x21c>
					  state = 2;
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <EXTI15_10_IRQHandler+0x258>)
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	601a      	str	r2, [r3, #0]
					  clear();
 8003eb4:	f7fc fc40 	bl	8000738 <clear>
					  blackScore = getScore(1);
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7fe fccf 	bl	800285c <getScore>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4a3f      	ldr	r2, [pc, #252]	; (8003fc0 <EXTI15_10_IRQHandler+0x27c>)
 8003ec2:	6013      	str	r3, [r2, #0]
					  whiteScore = getScore(0);
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7fe fcc9 	bl	800285c <getScore>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <EXTI15_10_IRQHandler+0x278>)
 8003ece:	6013      	str	r3, [r2, #0]
					  winner = getWinner();
 8003ed0:	f7fe fcf2 	bl	80028b8 <getWinner>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4a45      	ldr	r2, [pc, #276]	; (8003fec <EXTI15_10_IRQHandler+0x2a8>)
 8003ed8:	6013      	str	r3, [r2, #0]
					  createChar(0, white);
 8003eda:	4945      	ldr	r1, [pc, #276]	; (8003ff0 <EXTI15_10_IRQHandler+0x2ac>)
 8003edc:	2000      	movs	r0, #0
 8003ede:	f7fc fca8 	bl	8000832 <createChar>
					  createChar(1, black);
 8003ee2:	4944      	ldr	r1, [pc, #272]	; (8003ff4 <EXTI15_10_IRQHandler+0x2b0>)
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7fc fca4 	bl	8000832 <createChar>

					  sprintf(whiteStr, "W: %d ", whiteScore);
 8003eea:	4b34      	ldr	r3, [pc, #208]	; (8003fbc <EXTI15_10_IRQHandler+0x278>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4934      	ldr	r1, [pc, #208]	; (8003fc4 <EXTI15_10_IRQHandler+0x280>)
 8003ef2:	4835      	ldr	r0, [pc, #212]	; (8003fc8 <EXTI15_10_IRQHandler+0x284>)
 8003ef4:	f006 fb76 	bl	800a5e4 <siprintf>
					  sprintf(blackStr, "B: %d ", blackScore);
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <EXTI15_10_IRQHandler+0x27c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	4933      	ldr	r1, [pc, #204]	; (8003fcc <EXTI15_10_IRQHandler+0x288>)
 8003f00:	4833      	ldr	r0, [pc, #204]	; (8003fd0 <EXTI15_10_IRQHandler+0x28c>)
 8003f02:	f006 fb6f 	bl	800a5e4 <siprintf>

					  switch(winner){
 8003f06:	4b39      	ldr	r3, [pc, #228]	; (8003fec <EXTI15_10_IRQHandler+0x2a8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d00b      	beq.n	8003f26 <EXTI15_10_IRQHandler+0x1e2>
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	dc13      	bgt.n	8003f3a <EXTI15_10_IRQHandler+0x1f6>
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d00b      	beq.n	8003f30 <EXTI15_10_IRQHandler+0x1ec>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10e      	bne.n	8003f3a <EXTI15_10_IRQHandler+0x1f6>
					  case 0:
						  sprintf(uartRes, "R White win\n");
 8003f1c:	4936      	ldr	r1, [pc, #216]	; (8003ff8 <EXTI15_10_IRQHandler+0x2b4>)
 8003f1e:	4837      	ldr	r0, [pc, #220]	; (8003ffc <EXTI15_10_IRQHandler+0x2b8>)
 8003f20:	f006 fb60 	bl	800a5e4 <siprintf>
						  break;
 8003f24:	e009      	b.n	8003f3a <EXTI15_10_IRQHandler+0x1f6>
					  case 1:
						  sprintf(uartRes, "R Black win\n");
 8003f26:	4936      	ldr	r1, [pc, #216]	; (8004000 <EXTI15_10_IRQHandler+0x2bc>)
 8003f28:	4834      	ldr	r0, [pc, #208]	; (8003ffc <EXTI15_10_IRQHandler+0x2b8>)
 8003f2a:	f006 fb5b 	bl	800a5e4 <siprintf>
						  break;
 8003f2e:	e004      	b.n	8003f3a <EXTI15_10_IRQHandler+0x1f6>
					  case -1:
						  sprintf(uartRes, "R Tie!!!! 0\n");
 8003f30:	4934      	ldr	r1, [pc, #208]	; (8004004 <EXTI15_10_IRQHandler+0x2c0>)
 8003f32:	4832      	ldr	r0, [pc, #200]	; (8003ffc <EXTI15_10_IRQHandler+0x2b8>)
 8003f34:	f006 fb56 	bl	800a5e4 <siprintf>
						  break;
 8003f38:	bf00      	nop
					  }
					  HAL_UART_Transmit(&huart2, uartRes, sizeof(uartRes), 1000);
 8003f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f3e:	220c      	movs	r2, #12
 8003f40:	492e      	ldr	r1, [pc, #184]	; (8003ffc <EXTI15_10_IRQHandler+0x2b8>)
 8003f42:	4829      	ldr	r0, [pc, #164]	; (8003fe8 <EXTI15_10_IRQHandler+0x2a4>)
 8003f44:	f005 f842 	bl	8008fcc <HAL_UART_Transmit>
 8003f48:	e00a      	b.n	8003f60 <EXTI15_10_IRQHandler+0x21c>

			  }

		  }
		  else{
			  resetLED();
 8003f4a:	f7fe fc51 	bl	80027f0 <resetLED>
			  invalidAlarm = 1;
 8003f4e:	4b2e      	ldr	r3, [pc, #184]	; (8004008 <EXTI15_10_IRQHandler+0x2c4>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
			  invalidStart = HAL_GetTick();
 8003f54:	f000 f9be 	bl	80042d4 <HAL_GetTick>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	; (800400c <EXTI15_10_IRQHandler+0x2c8>)
 8003f5e:	601a      	str	r2, [r3, #0]
		  }
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8003f60:	2201      	movs	r2, #1
 8003f62:	2110      	movs	r1, #16
 8003f64:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003f66:	f001 ff35 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003f70:	f001 ff30 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8003f74:	2201      	movs	r2, #1
 8003f76:	2140      	movs	r1, #64	; 0x40
 8003f78:	4809      	ldr	r0, [pc, #36]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003f7a:	f001 ff2b 	bl	8005dd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8003f7e:	2201      	movs	r2, #1
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <EXTI15_10_IRQHandler+0x25c>)
 8003f84:	f001 ff26 	bl	8005dd4 <HAL_GPIO_WritePin>

  }

   lastEx12 = HAL_GetTick();
 8003f88:	f000 f9a4 	bl	80042d4 <HAL_GetTick>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b01      	ldr	r3, [pc, #4]	; (8003f98 <EXTI15_10_IRQHandler+0x254>)
 8003f92:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000124 	.word	0x20000124
 8003f9c:	20000128 	.word	0x20000128
 8003fa0:	48000c00 	.word	0x48000c00
 8003fa4:	48000800 	.word	0x48000800
 8003fa8:	48001000 	.word	0x48001000
 8003fac:	2000005c 	.word	0x2000005c
 8003fb0:	2000004c 	.word	0x2000004c
 8003fb4:	20000050 	.word	0x20000050
 8003fb8:	20000220 	.word	0x20000220
 8003fbc:	20000138 	.word	0x20000138
 8003fc0:	2000013c 	.word	0x2000013c
 8003fc4:	0800b8a0 	.word	0x0800b8a0
 8003fc8:	2000014c 	.word	0x2000014c
 8003fcc:	0800b8a8 	.word	0x0800b8a8
 8003fd0:	20000154 	.word	0x20000154
 8003fd4:	20000068 	.word	0x20000068
 8003fd8:	2000006c 	.word	0x2000006c
 8003fdc:	20000224 	.word	0x20000224
 8003fe0:	200002f4 	.word	0x200002f4
 8003fe4:	200001c4 	.word	0x200001c4
 8003fe8:	200003d8 	.word	0x200003d8
 8003fec:	20000064 	.word	0x20000064
 8003ff0:	20000070 	.word	0x20000070
 8003ff4:	20000078 	.word	0x20000078
 8003ff8:	0800b8b8 	.word	0x0800b8b8
 8003ffc:	2000020c 	.word	0x2000020c
 8004000:	0800b8c8 	.word	0x0800b8c8
 8004004:	0800b8d8 	.word	0x0800b8d8
 8004008:	2000012c 	.word	0x2000012c
 800400c:	20000130 	.word	0x20000130

08004010 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8004014:	480e      	ldr	r0, [pc, #56]	; (8004050 <ADC4_IRQHandler+0x40>)
 8004016:	f000 fcd9 	bl	80049cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */
  volume = HAL_ADC_GetValue(&hadc4);
 800401a:	480d      	ldr	r0, [pc, #52]	; (8004050 <ADC4_IRQHandler+0x40>)
 800401c:	f000 fcc8 	bl	80049b0 <HAL_ADC_GetValue>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <ADC4_IRQHandler+0x44>)
 8004026:	601a      	str	r2, [r3, #0]
  time = (volume*50/4095) + 10;
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <ADC4_IRQHandler+0x44>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2232      	movs	r2, #50	; 0x32
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <ADC4_IRQHandler+0x48>)
 8004034:	fb82 1203 	smull	r1, r2, r2, r3
 8004038:	441a      	add	r2, r3
 800403a:	12d2      	asrs	r2, r2, #11
 800403c:	17db      	asrs	r3, r3, #31
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	330a      	adds	r3, #10
 8004042:	4a06      	ldr	r2, [pc, #24]	; (800405c <ADC4_IRQHandler+0x4c>)
 8004044:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start_IT(&hadc4);
 8004046:	4802      	ldr	r0, [pc, #8]	; (8004050 <ADC4_IRQHandler+0x40>)
 8004048:	f000 fb72 	bl	8004730 <HAL_ADC_Start_IT>
  /* USER CODE END ADC4_IRQn 1 */
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2000045c 	.word	0x2000045c
 8004054:	20000140 	.word	0x20000140
 8004058:	80080081 	.word	0x80080081
 800405c:	20000068 	.word	0x20000068

08004060 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e00a      	b.n	8004088 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004072:	f3af 8000 	nop.w
 8004076:	4601      	mov	r1, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	60ba      	str	r2, [r7, #8]
 800407e:	b2ca      	uxtb	r2, r1
 8004080:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3301      	adds	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	dbf0      	blt.n	8004072 <_read+0x12>
	}

return len;
 8004090:	687b      	ldr	r3, [r7, #4]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b086      	sub	sp, #24
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e009      	b.n	80040c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	60ba      	str	r2, [r7, #8]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	3301      	adds	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	dbf1      	blt.n	80040ac <_write+0x12>
	}
	return len;
 80040c8:	687b      	ldr	r3, [r7, #4]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <_close>:

int _close(int file)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
	return -1;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040fa:	605a      	str	r2, [r3, #4]
	return 0;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <_isatty>:

int _isatty(int file)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
	return 1;
 8004112:	2301      	movs	r3, #1
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
	return 0;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004144:	4a14      	ldr	r2, [pc, #80]	; (8004198 <_sbrk+0x5c>)
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <_sbrk+0x60>)
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <_sbrk+0x64>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <_sbrk+0x64>)
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <_sbrk+0x68>)
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <_sbrk+0x64>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	429a      	cmp	r2, r3
 800416a:	d207      	bcs.n	800417c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800416c:	f006 f97a 	bl	800a464 <__errno>
 8004170:	4603      	mov	r3, r0
 8004172:	220c      	movs	r2, #12
 8004174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	e009      	b.n	8004190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <_sbrk+0x64>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <_sbrk+0x64>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <_sbrk+0x64>)
 800418c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800418e:	68fb      	ldr	r3, [r7, #12]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	2000a000 	.word	0x2000a000
 800419c:	00000400 	.word	0x00000400
 80041a0:	20000228 	.word	0x20000228
 80041a4:	200009b0 	.word	0x200009b0

080041a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <SystemInit+0x20>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	4a05      	ldr	r2, [pc, #20]	; (80041c8 <SystemInit+0x20>)
 80041b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004204 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041d0:	480d      	ldr	r0, [pc, #52]	; (8004208 <LoopForever+0x6>)
  ldr r1, =_edata
 80041d2:	490e      	ldr	r1, [pc, #56]	; (800420c <LoopForever+0xa>)
  ldr r2, =_sidata
 80041d4:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <LoopForever+0xe>)
  movs r3, #0
 80041d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041d8:	e002      	b.n	80041e0 <LoopCopyDataInit>

080041da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041de:	3304      	adds	r3, #4

080041e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041e4:	d3f9      	bcc.n	80041da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041e6:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041e8:	4c0b      	ldr	r4, [pc, #44]	; (8004218 <LoopForever+0x16>)
  movs r3, #0
 80041ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041ec:	e001      	b.n	80041f2 <LoopFillZerobss>

080041ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041f0:	3204      	adds	r2, #4

080041f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041f4:	d3fb      	bcc.n	80041ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80041f6:	f7ff ffd7 	bl	80041a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041fa:	f006 f939 	bl	800a470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041fe:	f7fc fccf 	bl	8000ba0 <main>

08004202 <LoopForever>:

LoopForever:
    b LoopForever
 8004202:	e7fe      	b.n	8004202 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004204:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800420c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8004210:	0800b9d8 	.word	0x0800b9d8
  ldr r2, =_sbss
 8004214:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8004218:	200009ac 	.word	0x200009ac

0800421c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800421c:	e7fe      	b.n	800421c <ADC1_2_IRQHandler>
	...

08004220 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_Init+0x28>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_Init+0x28>)
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004230:	2003      	movs	r0, #3
 8004232:	f001 fb85 	bl	8005940 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004236:	2000      	movs	r0, #0
 8004238:	f000 f808 	bl	800424c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800423c:	f7fd f980 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40022000 	.word	0x40022000

0800424c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_InitTick+0x54>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_InitTick+0x58>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004262:	fbb3 f3f1 	udiv	r3, r3, r1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4618      	mov	r0, r3
 800426c:	f001 fb9d 	bl	80059aa <HAL_SYSTICK_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00e      	b.n	8004298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d80a      	bhi.n	8004296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004280:	2200      	movs	r2, #0
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	f001 fb65 	bl	8005956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800428c:	4a06      	ldr	r2, [pc, #24]	; (80042a8 <HAL_InitTick+0x5c>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000080 	.word	0x20000080
 80042a4:	20000088 	.word	0x20000088
 80042a8:	20000084 	.word	0x20000084

080042ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_IncTick+0x20>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x24>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_IncTick+0x24>)
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000088 	.word	0x20000088
 80042d0:	20000998 	.word	0x20000998

080042d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_GetTick+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000998 	.word	0x20000998

080042ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff ffee 	bl	80042d4 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d005      	beq.n	8004312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_Delay+0x44>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004312:	bf00      	nop
 8004314:	f7ff ffde 	bl	80042d4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d8f7      	bhi.n	8004314 <HAL_Delay+0x28>
  {
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000088 	.word	0x20000088

08004334 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b09a      	sub	sp, #104	; 0x68
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e1c9      	b.n	8004724 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d176      	bne.n	8004490 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d152      	bne.n	8004450 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fd f8df 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d13b      	bne.n	8004450 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f001 f97b 	bl	80056d4 <ADC_Disable>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d12f      	bne.n	8004450 <HAL_ADC_Init+0xe0>
 80043f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d12b      	bne.n	8004450 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004400:	f023 0302 	bic.w	r3, r3, #2
 8004404:	f043 0202 	orr.w	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800441a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800442a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800442c:	4b86      	ldr	r3, [pc, #536]	; (8004648 <HAL_ADC_Init+0x2d8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a86      	ldr	r2, [pc, #536]	; (800464c <HAL_ADC_Init+0x2dc>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	0c9a      	lsrs	r2, r3, #18
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004442:	e002      	b.n	800444a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3b01      	subs	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f9      	bne.n	8004444 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446c:	d110      	bne.n	8004490 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f023 0312 	bic.w	r3, r3, #18
 8004476:	f043 0210 	orr.w	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8136 	bne.w	800470a <HAL_ADC_Init+0x39a>
 800449e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 8131 	bne.w	800470a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 8129 	bne.w	800470a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044c0:	f043 0202 	orr.w	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d0:	d004      	beq.n	80044dc <HAL_ADC_Init+0x16c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5e      	ldr	r2, [pc, #376]	; (8004650 <HAL_ADC_Init+0x2e0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <HAL_ADC_Init+0x170>
 80044dc:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_ADC_Init+0x2e4>)
 80044de:	e000      	b.n	80044e2 <HAL_ADC_Init+0x172>
 80044e0:	4b5d      	ldr	r3, [pc, #372]	; (8004658 <HAL_ADC_Init+0x2e8>)
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ec:	d102      	bne.n	80044f4 <HAL_ADC_Init+0x184>
 80044ee:	4b58      	ldr	r3, [pc, #352]	; (8004650 <HAL_ADC_Init+0x2e0>)
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e01a      	b.n	800452a <HAL_ADC_Init+0x1ba>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a55      	ldr	r2, [pc, #340]	; (8004650 <HAL_ADC_Init+0x2e0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d103      	bne.n	8004506 <HAL_ADC_Init+0x196>
 80044fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e011      	b.n	800452a <HAL_ADC_Init+0x1ba>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a54      	ldr	r2, [pc, #336]	; (800465c <HAL_ADC_Init+0x2ec>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d102      	bne.n	8004516 <HAL_ADC_Init+0x1a6>
 8004510:	4b53      	ldr	r3, [pc, #332]	; (8004660 <HAL_ADC_Init+0x2f0>)
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e009      	b.n	800452a <HAL_ADC_Init+0x1ba>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a51      	ldr	r2, [pc, #324]	; (8004660 <HAL_ADC_Init+0x2f0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d102      	bne.n	8004526 <HAL_ADC_Init+0x1b6>
 8004520:	4b4e      	ldr	r3, [pc, #312]	; (800465c <HAL_ADC_Init+0x2ec>)
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e001      	b.n	800452a <HAL_ADC_Init+0x1ba>
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d108      	bne.n	800454a <HAL_ADC_Init+0x1da>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_ADC_Init+0x1da>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_ADC_Init+0x1dc>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11c      	bne.n	800458a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004550:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004552:	2b00      	cmp	r3, #0
 8004554:	d010      	beq.n	8004578 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_ADC_Init+0x202>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_ADC_Init+0x202>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_ADC_Init+0x204>
 8004572:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004574:	2b00      	cmp	r3, #0
 8004576:	d108      	bne.n	800458a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	431a      	orrs	r2, r3
 8004586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004588:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7e5b      	ldrb	r3, [r3, #25]
 800458e:	035b      	lsls	r3, r3, #13
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004594:	2a01      	cmp	r2, #1
 8004596:	d002      	beq.n	800459e <HAL_ADC_Init+0x22e>
 8004598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800459c:	e000      	b.n	80045a0 <HAL_ADC_Init+0x230>
 800459e:	2200      	movs	r2, #0
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045b0:	4313      	orrs	r3, r2
 80045b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d11b      	bne.n	80045f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7e5b      	ldrb	r3, [r3, #25]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	3b01      	subs	r3, #1
 80045cc:	045a      	lsls	r2, r3, #17
 80045ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d6:	663b      	str	r3, [r7, #96]	; 0x60
 80045d8:	e00d      	b.n	80045f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f043 0201 	orr.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d03a      	beq.n	8004674 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_ADC_Init+0x2ec>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d004      	beq.n	8004612 <HAL_ADC_Init+0x2a2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <HAL_ADC_Init+0x2f0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d128      	bne.n	8004664 <HAL_ADC_Init+0x2f4>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800461a:	d012      	beq.n	8004642 <HAL_ADC_Init+0x2d2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004624:	d00a      	beq.n	800463c <HAL_ADC_Init+0x2cc>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800462e:	d002      	beq.n	8004636 <HAL_ADC_Init+0x2c6>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	e018      	b.n	8004668 <HAL_ADC_Init+0x2f8>
 8004636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800463a:	e015      	b.n	8004668 <HAL_ADC_Init+0x2f8>
 800463c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004640:	e012      	b.n	8004668 <HAL_ADC_Init+0x2f8>
 8004642:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004646:	e00f      	b.n	8004668 <HAL_ADC_Init+0x2f8>
 8004648:	20000080 	.word	0x20000080
 800464c:	431bde83 	.word	0x431bde83
 8004650:	50000100 	.word	0x50000100
 8004654:	50000300 	.word	0x50000300
 8004658:	50000700 	.word	0x50000700
 800465c:	50000400 	.word	0x50000400
 8004660:	50000500 	.word	0x50000500
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800466c:	4313      	orrs	r3, r2
 800466e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004670:	4313      	orrs	r3, r2
 8004672:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b00      	cmp	r3, #0
 8004680:	d114      	bne.n	80046ac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004690:	f023 0302 	bic.w	r3, r3, #2
 8004694:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7e1b      	ldrb	r3, [r3, #24]
 800469a:	039a      	lsls	r2, r3, #14
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046a8:	4313      	orrs	r3, r2
 80046aa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_ADC_Init+0x3bc>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046bc:	430b      	orrs	r3, r1
 80046be:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10c      	bne.n	80046e2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f023 010f 	bic.w	r1, r3, #15
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	1e5a      	subs	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
 80046e0:	e007      	b.n	80046f2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 020f 	bic.w	r2, r2, #15
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f023 0303 	bic.w	r3, r3, #3
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
 8004708:	e00a      	b.n	8004720 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f023 0312 	bic.w	r3, r3, #18
 8004712:	f043 0210 	orr.w	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004720:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004724:	4618      	mov	r0, r3
 8004726:	3768      	adds	r7, #104	; 0x68
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	fff0c007 	.word	0xfff0c007

08004730 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 8123 	bne.w	8004992 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_ADC_Start_IT+0x2a>
 8004756:	2302      	movs	r3, #2
 8004758:	e11e      	b.n	8004998 <HAL_ADC_Start_IT+0x268>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 ff52 	bl	800560c <ADC_Enable>
 8004768:	4603      	mov	r3, r0
 800476a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 810a 	bne.w	8004988 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004790:	d004      	beq.n	800479c <HAL_ADC_Start_IT+0x6c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a82      	ldr	r2, [pc, #520]	; (80049a0 <HAL_ADC_Start_IT+0x270>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d106      	bne.n	80047aa <HAL_ADC_Start_IT+0x7a>
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_ADC_Start_IT+0x274>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_ADC_Start_IT+0x9a>
 80047a8:	e005      	b.n	80047b6 <HAL_ADC_Start_IT+0x86>
 80047aa:	4b7f      	ldr	r3, [pc, #508]	; (80049a8 <HAL_ADC_Start_IT+0x278>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_ADC_Start_IT+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047be:	d004      	beq.n	80047ca <HAL_ADC_Start_IT+0x9a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a79      	ldr	r2, [pc, #484]	; (80049ac <HAL_ADC_Start_IT+0x27c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d115      	bne.n	80047f6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d036      	beq.n	8004852 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80047f4:	e02d      	b.n	8004852 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800480a:	d004      	beq.n	8004816 <HAL_ADC_Start_IT+0xe6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a63      	ldr	r2, [pc, #396]	; (80049a0 <HAL_ADC_Start_IT+0x270>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10a      	bne.n	800482c <HAL_ADC_Start_IT+0xfc>
 8004816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e008      	b.n	800483e <HAL_ADC_Start_IT+0x10e>
 800482c:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <HAL_ADC_Start_IT+0x27c>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800484a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485e:	d106      	bne.n	800486e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	f023 0206 	bic.w	r2, r3, #6
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	645a      	str	r2, [r3, #68]	; 0x44
 800486c:	e002      	b.n	8004874 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	221c      	movs	r2, #28
 8004882:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d110      	bne.n	80048ae <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0204 	bic.w	r2, r2, #4
 800489a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0208 	orr.w	r2, r2, #8
 80048aa:	605a      	str	r2, [r3, #4]
          break;
 80048ac:	e008      	b.n	80048c0 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 020c 	orr.w	r2, r2, #12
 80048bc:	605a      	str	r2, [r3, #4]
          break;
 80048be:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0210 	bic.w	r2, r2, #16
 80048d6:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048e0:	d004      	beq.n	80048ec <HAL_ADC_Start_IT+0x1bc>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2e      	ldr	r2, [pc, #184]	; (80049a0 <HAL_ADC_Start_IT+0x270>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d106      	bne.n	80048fa <HAL_ADC_Start_IT+0x1ca>
 80048ec:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_ADC_Start_IT+0x274>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03e      	beq.n	8004976 <HAL_ADC_Start_IT+0x246>
 80048f8:	e005      	b.n	8004906 <HAL_ADC_Start_IT+0x1d6>
 80048fa:	4b2b      	ldr	r3, [pc, #172]	; (80049a8 <HAL_ADC_Start_IT+0x278>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2b00      	cmp	r3, #0
 8004904:	d037      	beq.n	8004976 <HAL_ADC_Start_IT+0x246>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800490e:	d004      	beq.n	800491a <HAL_ADC_Start_IT+0x1ea>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_ADC_Start_IT+0x270>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d106      	bne.n	8004928 <HAL_ADC_Start_IT+0x1f8>
 800491a:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <HAL_ADC_Start_IT+0x274>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2b05      	cmp	r3, #5
 8004924:	d027      	beq.n	8004976 <HAL_ADC_Start_IT+0x246>
 8004926:	e005      	b.n	8004934 <HAL_ADC_Start_IT+0x204>
 8004928:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <HAL_ADC_Start_IT+0x278>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2b05      	cmp	r3, #5
 8004932:	d020      	beq.n	8004976 <HAL_ADC_Start_IT+0x246>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800493c:	d004      	beq.n	8004948 <HAL_ADC_Start_IT+0x218>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_ADC_Start_IT+0x270>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d106      	bne.n	8004956 <HAL_ADC_Start_IT+0x226>
 8004948:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_ADC_Start_IT+0x274>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2b09      	cmp	r3, #9
 8004952:	d010      	beq.n	8004976 <HAL_ADC_Start_IT+0x246>
 8004954:	e005      	b.n	8004962 <HAL_ADC_Start_IT+0x232>
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <HAL_ADC_Start_IT+0x278>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2b09      	cmp	r3, #9
 8004960:	d009      	beq.n	8004976 <HAL_ADC_Start_IT+0x246>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800496a:	d004      	beq.n	8004976 <HAL_ADC_Start_IT+0x246>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <HAL_ADC_Start_IT+0x27c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10f      	bne.n	8004996 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0204 	orr.w	r2, r2, #4
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	e006      	b.n	8004996 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004990:	e001      	b.n	8004996 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004992:	2302      	movs	r3, #2
 8004994:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004996:	7bfb      	ldrb	r3, [r7, #15]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	50000100 	.word	0x50000100
 80049a4:	50000300 	.word	0x50000300
 80049a8:	50000700 	.word	0x50000700
 80049ac:	50000400 	.word	0x50000400

080049b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d106      	bne.n	80049fc <HAL_ADC_IRQHandler+0x30>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d00f      	beq.n	8004a1c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	f040 80c0 	bne.w	8004b8c <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	f040 80b8 	bne.w	8004b8c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a3c:	d004      	beq.n	8004a48 <HAL_ADC_IRQHandler+0x7c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a95      	ldr	r2, [pc, #596]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d106      	bne.n	8004a56 <HAL_ADC_IRQHandler+0x8a>
 8004a48:	4b94      	ldr	r3, [pc, #592]	; (8004c9c <HAL_ADC_IRQHandler+0x2d0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d03e      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x106>
 8004a54:	e005      	b.n	8004a62 <HAL_ADC_IRQHandler+0x96>
 8004a56:	4b92      	ldr	r3, [pc, #584]	; (8004ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d037      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x106>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a6a:	d004      	beq.n	8004a76 <HAL_ADC_IRQHandler+0xaa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a89      	ldr	r2, [pc, #548]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d106      	bne.n	8004a84 <HAL_ADC_IRQHandler+0xb8>
 8004a76:	4b89      	ldr	r3, [pc, #548]	; (8004c9c <HAL_ADC_IRQHandler+0x2d0>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d027      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x106>
 8004a82:	e005      	b.n	8004a90 <HAL_ADC_IRQHandler+0xc4>
 8004a84:	4b86      	ldr	r3, [pc, #536]	; (8004ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d020      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x106>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a98:	d004      	beq.n	8004aa4 <HAL_ADC_IRQHandler+0xd8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7e      	ldr	r2, [pc, #504]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d106      	bne.n	8004ab2 <HAL_ADC_IRQHandler+0xe6>
 8004aa4:	4b7d      	ldr	r3, [pc, #500]	; (8004c9c <HAL_ADC_IRQHandler+0x2d0>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d010      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x106>
 8004ab0:	e005      	b.n	8004abe <HAL_ADC_IRQHandler+0xf2>
 8004ab2:	4b7b      	ldr	r3, [pc, #492]	; (8004ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2b09      	cmp	r3, #9
 8004abc:	d009      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x106>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac6:	d004      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x106>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a75      	ldr	r2, [pc, #468]	; (8004ca4 <HAL_ADC_IRQHandler+0x2d8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d104      	bne.n	8004adc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e00f      	b.n	8004afc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ae4:	d004      	beq.n	8004af0 <HAL_ADC_IRQHandler+0x124>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a6b      	ldr	r2, [pc, #428]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d102      	bne.n	8004af6 <HAL_ADC_IRQHandler+0x12a>
 8004af0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004af4:	e000      	b.n	8004af8 <HAL_ADC_IRQHandler+0x12c>
 8004af6:	4b6b      	ldr	r3, [pc, #428]	; (8004ca4 <HAL_ADC_IRQHandler+0x2d8>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d139      	bne.n	8004b7e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d134      	bne.n	8004b7e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d12d      	bne.n	8004b7e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11a      	bne.n	8004b66 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 020c 	bic.w	r2, r2, #12
 8004b3e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d112      	bne.n	8004b7e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f043 0201 	orr.w	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40
 8004b64:	e00b      	b.n	8004b7e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f043 0210 	orr.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fbd8 	bl	8004334 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	220c      	movs	r2, #12
 8004b8a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d106      	bne.n	8004ba8 <HAL_ADC_IRQHandler+0x1dc>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d00f      	beq.n	8004bc8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	f040 813c 	bne.w	8004e30 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	f040 8134 	bne.w	8004e30 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bdc:	d004      	beq.n	8004be8 <HAL_ADC_IRQHandler+0x21c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d106      	bne.n	8004bf6 <HAL_ADC_IRQHandler+0x22a>
 8004be8:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_ADC_IRQHandler+0x2d0>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03e      	beq.n	8004c72 <HAL_ADC_IRQHandler+0x2a6>
 8004bf4:	e005      	b.n	8004c02 <HAL_ADC_IRQHandler+0x236>
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	; (8004ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d037      	beq.n	8004c72 <HAL_ADC_IRQHandler+0x2a6>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c0a:	d004      	beq.n	8004c16 <HAL_ADC_IRQHandler+0x24a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d106      	bne.n	8004c24 <HAL_ADC_IRQHandler+0x258>
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_ADC_IRQHandler+0x2d0>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	d027      	beq.n	8004c72 <HAL_ADC_IRQHandler+0x2a6>
 8004c22:	e005      	b.n	8004c30 <HAL_ADC_IRQHandler+0x264>
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	d020      	beq.n	8004c72 <HAL_ADC_IRQHandler+0x2a6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c38:	d004      	beq.n	8004c44 <HAL_ADC_IRQHandler+0x278>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d106      	bne.n	8004c52 <HAL_ADC_IRQHandler+0x286>
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_ADC_IRQHandler+0x2d0>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2b09      	cmp	r3, #9
 8004c4e:	d010      	beq.n	8004c72 <HAL_ADC_IRQHandler+0x2a6>
 8004c50:	e005      	b.n	8004c5e <HAL_ADC_IRQHandler+0x292>
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_ADC_IRQHandler+0x2d4>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	d009      	beq.n	8004c72 <HAL_ADC_IRQHandler+0x2a6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c66:	d004      	beq.n	8004c72 <HAL_ADC_IRQHandler+0x2a6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <HAL_ADC_IRQHandler+0x2d8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d104      	bne.n	8004c7c <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e018      	b.n	8004cae <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c84:	d004      	beq.n	8004c90 <HAL_ADC_IRQHandler+0x2c4>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <HAL_ADC_IRQHandler+0x2cc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_ADC_IRQHandler+0x2dc>
 8004c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c94:	e009      	b.n	8004caa <HAL_ADC_IRQHandler+0x2de>
 8004c96:	bf00      	nop
 8004c98:	50000100 	.word	0x50000100
 8004c9c:	50000300 	.word	0x50000300
 8004ca0:	50000700 	.word	0x50000700
 8004ca4:	50000400 	.word	0x50000400
 8004ca8:	4b9d      	ldr	r3, [pc, #628]	; (8004f20 <HAL_ADC_IRQHandler+0x554>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 80b2 	bne.w	8004e22 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 80a5 	bne.w	8004e22 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 809f 	bne.w	8004e22 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	f040 8097 	bne.w	8004e22 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cfc:	d004      	beq.n	8004d08 <HAL_ADC_IRQHandler+0x33c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a88      	ldr	r2, [pc, #544]	; (8004f24 <HAL_ADC_IRQHandler+0x558>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d106      	bne.n	8004d16 <HAL_ADC_IRQHandler+0x34a>
 8004d08:	4b87      	ldr	r3, [pc, #540]	; (8004f28 <HAL_ADC_IRQHandler+0x55c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d03e      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x3c6>
 8004d14:	e005      	b.n	8004d22 <HAL_ADC_IRQHandler+0x356>
 8004d16:	4b85      	ldr	r3, [pc, #532]	; (8004f2c <HAL_ADC_IRQHandler+0x560>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d037      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x3c6>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d2a:	d004      	beq.n	8004d36 <HAL_ADC_IRQHandler+0x36a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a7c      	ldr	r2, [pc, #496]	; (8004f24 <HAL_ADC_IRQHandler+0x558>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d106      	bne.n	8004d44 <HAL_ADC_IRQHandler+0x378>
 8004d36:	4b7c      	ldr	r3, [pc, #496]	; (8004f28 <HAL_ADC_IRQHandler+0x55c>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2b06      	cmp	r3, #6
 8004d40:	d027      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x3c6>
 8004d42:	e005      	b.n	8004d50 <HAL_ADC_IRQHandler+0x384>
 8004d44:	4b79      	ldr	r3, [pc, #484]	; (8004f2c <HAL_ADC_IRQHandler+0x560>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d020      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x3c6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d58:	d004      	beq.n	8004d64 <HAL_ADC_IRQHandler+0x398>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a71      	ldr	r2, [pc, #452]	; (8004f24 <HAL_ADC_IRQHandler+0x558>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d106      	bne.n	8004d72 <HAL_ADC_IRQHandler+0x3a6>
 8004d64:	4b70      	ldr	r3, [pc, #448]	; (8004f28 <HAL_ADC_IRQHandler+0x55c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2b07      	cmp	r3, #7
 8004d6e:	d010      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x3c6>
 8004d70:	e005      	b.n	8004d7e <HAL_ADC_IRQHandler+0x3b2>
 8004d72:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <HAL_ADC_IRQHandler+0x560>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	2b07      	cmp	r3, #7
 8004d7c:	d009      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x3c6>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d86:	d004      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x3c6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a64      	ldr	r2, [pc, #400]	; (8004f20 <HAL_ADC_IRQHandler+0x554>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d104      	bne.n	8004d9c <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e00f      	b.n	8004dbc <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004da4:	d004      	beq.n	8004db0 <HAL_ADC_IRQHandler+0x3e4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a5e      	ldr	r2, [pc, #376]	; (8004f24 <HAL_ADC_IRQHandler+0x558>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d102      	bne.n	8004db6 <HAL_ADC_IRQHandler+0x3ea>
 8004db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004db4:	e000      	b.n	8004db8 <HAL_ADC_IRQHandler+0x3ec>
 8004db6:	4b5a      	ldr	r3, [pc, #360]	; (8004f20 <HAL_ADC_IRQHandler+0x554>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d12d      	bne.n	8004e22 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11a      	bne.n	8004e0a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004de2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d112      	bne.n	8004e22 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
 8004e08:	e00b      	b.n	8004e22 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0210 	orr.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	f043 0201 	orr.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f8de 	bl	8004fe4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2260      	movs	r2, #96	; 0x60
 8004e2e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d113      	bne.n	8004e66 <HAL_ADC_IRQHandler+0x49a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d10c      	bne.n	8004e66 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fa75 	bl	8004348 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2280      	movs	r2, #128	; 0x80
 8004e64:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e74:	d115      	bne.n	8004ea2 <HAL_ADC_IRQHandler+0x4d6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	d10d      	bne.n	8004ea2 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8ba 	bl	800500c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb0:	d115      	bne.n	8004ede <HAL_ADC_IRQHandler+0x512>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec0:	d10d      	bne.n	8004ede <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8a6 	bl	8005020 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004edc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d151      	bne.n	8004f90 <HAL_ADC_IRQHandler+0x5c4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d14a      	bne.n	8004f90 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d102      	bne.n	8004f08 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8004f02:	2301      	movs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e02d      	b.n	8004f64 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f10:	d004      	beq.n	8004f1c <HAL_ADC_IRQHandler+0x550>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <HAL_ADC_IRQHandler+0x558>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d109      	bne.n	8004f30 <HAL_ADC_IRQHandler+0x564>
 8004f1c:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <HAL_ADC_IRQHandler+0x55c>)
 8004f1e:	e008      	b.n	8004f32 <HAL_ADC_IRQHandler+0x566>
 8004f20:	50000400 	.word	0x50000400
 8004f24:	50000100 	.word	0x50000100
 8004f28:	50000300 	.word	0x50000300
 8004f2c:	50000700 	.word	0x50000700
 8004f30:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_ADC_IRQHandler+0x614>)
 8004f32:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10a      	bne.n	8004f64 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8004f4e:	2301      	movs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e007      	b.n	8004f64 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10e      	bne.n	8004f88 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f043 0202 	orr.w	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff f9ea 	bl	800435c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_ADC_IRQHandler+0x60c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	d113      	bne.n	8004fd8 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	f043 0208 	orr.w	r2, r3, #8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fd0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f810 	bl	8004ff8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	50000700 	.word	0x50000700

08004fe4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b09b      	sub	sp, #108	; 0x6c
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x22>
 8005052:	2302      	movs	r3, #2
 8005054:	e2cb      	b.n	80055ee <HAL_ADC_ConfigChannel+0x5ba>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 82af 	bne.w	80055cc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d81c      	bhi.n	80050b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	461a      	mov	r2, r3
 800508a:	231f      	movs	r3, #31
 800508c:	4093      	lsls	r3, r2
 800508e:	43db      	mvns	r3, r3
 8005090:	4019      	ands	r1, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	fa00 f203 	lsl.w	r2, r0, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
 80050ae:	e063      	b.n	8005178 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b09      	cmp	r3, #9
 80050b6:	d81e      	bhi.n	80050f6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	4413      	add	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	3b1e      	subs	r3, #30
 80050cc:	221f      	movs	r2, #31
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	4019      	ands	r1, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	3b1e      	subs	r3, #30
 80050e8:	fa00 f203 	lsl.w	r2, r0, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34
 80050f4:	e040      	b.n	8005178 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b0e      	cmp	r3, #14
 80050fc:	d81e      	bhi.n	800513c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	3b3c      	subs	r3, #60	; 0x3c
 8005112:	221f      	movs	r2, #31
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	4019      	ands	r1, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	3b3c      	subs	r3, #60	; 0x3c
 800512e:	fa00 f203 	lsl.w	r2, r0, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	639a      	str	r2, [r3, #56]	; 0x38
 800513a:	e01d      	b.n	8005178 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	3b5a      	subs	r3, #90	; 0x5a
 8005150:	221f      	movs	r2, #31
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	4019      	ands	r1, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	3b5a      	subs	r3, #90	; 0x5a
 800516c:	fa00 f203 	lsl.w	r2, r0, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 80e5 	bne.w	8005352 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b09      	cmp	r3, #9
 800518e:	d91c      	bls.n	80051ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6999      	ldr	r1, [r3, #24]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	3b1e      	subs	r3, #30
 80051a2:	2207      	movs	r2, #7
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	4019      	ands	r1, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	6898      	ldr	r0, [r3, #8]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	3b1e      	subs	r3, #30
 80051bc:	fa00 f203 	lsl.w	r2, r0, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]
 80051c8:	e019      	b.n	80051fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6959      	ldr	r1, [r3, #20]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4413      	add	r3, r2
 80051da:	2207      	movs	r2, #7
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	4019      	ands	r1, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	6898      	ldr	r0, [r3, #8]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	fa00 f203 	lsl.w	r2, r0, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	3b01      	subs	r3, #1
 800521c:	2b03      	cmp	r3, #3
 800521e:	d84f      	bhi.n	80052c0 <HAL_ADC_ConfigChannel+0x28c>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <HAL_ADC_ConfigChannel+0x1f4>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	08005239 	.word	0x08005239
 800522c:	0800525b 	.word	0x0800525b
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800529f 	.word	0x0800529f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800523e:	4b9f      	ldr	r3, [pc, #636]	; (80054bc <HAL_ADC_ConfigChannel+0x488>)
 8005240:	4013      	ands	r3, r2
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	0691      	lsls	r1, r2, #26
 8005248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800524a:	430a      	orrs	r2, r1
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005256:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005258:	e07e      	b.n	8005358 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005260:	4b96      	ldr	r3, [pc, #600]	; (80054bc <HAL_ADC_ConfigChannel+0x488>)
 8005262:	4013      	ands	r3, r2
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	0691      	lsls	r1, r2, #26
 800526a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800526c:	430a      	orrs	r2, r1
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005278:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800527a:	e06d      	b.n	8005358 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005282:	4b8e      	ldr	r3, [pc, #568]	; (80054bc <HAL_ADC_ConfigChannel+0x488>)
 8005284:	4013      	ands	r3, r2
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	0691      	lsls	r1, r2, #26
 800528c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800528e:	430a      	orrs	r2, r1
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800529a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800529c:	e05c      	b.n	8005358 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052a4:	4b85      	ldr	r3, [pc, #532]	; (80054bc <HAL_ADC_ConfigChannel+0x488>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	0691      	lsls	r1, r2, #26
 80052ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052b0:	430a      	orrs	r2, r1
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80052be:	e04b      	b.n	8005358 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	069b      	lsls	r3, r3, #26
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	069b      	lsls	r3, r3, #26
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d107      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005306:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800530e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	069b      	lsls	r3, r3, #26
 8005318:	429a      	cmp	r2, r3
 800531a:	d107      	bne.n	800532c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800532a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	069b      	lsls	r3, r3, #26
 800533c:	429a      	cmp	r2, r3
 800533e:	d10a      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800534e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005350:	e001      	b.n	8005356 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005352:	bf00      	nop
 8005354:	e000      	b.n	8005358 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005356:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d108      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x344>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x344>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_ADC_ConfigChannel+0x346>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 8131 	bne.w	80055e2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d00f      	beq.n	80053a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43da      	mvns	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	400a      	ands	r2, r1
 80053a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80053a6:	e049      	b.n	800543c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2201      	movs	r2, #1
 80053b6:	409a      	lsls	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b09      	cmp	r3, #9
 80053c8:	d91c      	bls.n	8005404 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6999      	ldr	r1, [r3, #24]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	3b1b      	subs	r3, #27
 80053dc:	2207      	movs	r2, #7
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43db      	mvns	r3, r3
 80053e4:	4019      	ands	r1, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6898      	ldr	r0, [r3, #8]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	3b1b      	subs	r3, #27
 80053f6:	fa00 f203 	lsl.w	r2, r0, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	619a      	str	r2, [r3, #24]
 8005402:	e01b      	b.n	800543c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6959      	ldr	r1, [r3, #20]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	2207      	movs	r2, #7
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	4019      	ands	r1, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6898      	ldr	r0, [r3, #8]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	4613      	mov	r3, r2
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4413      	add	r3, r2
 8005430:	fa00 f203 	lsl.w	r2, r0, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005444:	d004      	beq.n	8005450 <HAL_ADC_ConfigChannel+0x41c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1d      	ldr	r2, [pc, #116]	; (80054c0 <HAL_ADC_ConfigChannel+0x48c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x420>
 8005450:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <HAL_ADC_ConfigChannel+0x490>)
 8005452:	e000      	b.n	8005456 <HAL_ADC_ConfigChannel+0x422>
 8005454:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <HAL_ADC_ConfigChannel+0x494>)
 8005456:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b10      	cmp	r3, #16
 800545e:	d105      	bne.n	800546c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005468:	2b00      	cmp	r3, #0
 800546a:	d015      	beq.n	8005498 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005470:	2b11      	cmp	r3, #17
 8005472:	d105      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005484:	2b12      	cmp	r3, #18
 8005486:	f040 80ac 	bne.w	80055e2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800548a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005492:	2b00      	cmp	r3, #0
 8005494:	f040 80a5 	bne.w	80055e2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054a0:	d102      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x474>
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <HAL_ADC_ConfigChannel+0x48c>)
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e023      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x4bc>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <HAL_ADC_ConfigChannel+0x48c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10c      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x498>
 80054b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e01a      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x4bc>
 80054ba:	bf00      	nop
 80054bc:	83fff000 	.word	0x83fff000
 80054c0:	50000100 	.word	0x50000100
 80054c4:	50000300 	.word	0x50000300
 80054c8:	50000700 	.word	0x50000700
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a4a      	ldr	r2, [pc, #296]	; (80055fc <HAL_ADC_ConfigChannel+0x5c8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d102      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x4a8>
 80054d6:	4b4a      	ldr	r3, [pc, #296]	; (8005600 <HAL_ADC_ConfigChannel+0x5cc>)
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e009      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x4bc>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a47      	ldr	r2, [pc, #284]	; (8005600 <HAL_ADC_ConfigChannel+0x5cc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d102      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x4b8>
 80054e6:	4b45      	ldr	r3, [pc, #276]	; (80055fc <HAL_ADC_ConfigChannel+0x5c8>)
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e001      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x4bc>
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d108      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x4dc>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x4dc>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_ADC_ConfigChannel+0x4de>
 8005510:	2300      	movs	r3, #0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d150      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005516:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005518:	2b00      	cmp	r3, #0
 800551a:	d010      	beq.n	800553e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d107      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x504>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x504>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <HAL_ADC_ConfigChannel+0x506>
 8005538:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800553a:	2b00      	cmp	r3, #0
 800553c:	d13c      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b10      	cmp	r3, #16
 8005544:	d11d      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x54e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800554e:	d118      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_ADC_ConfigChannel+0x5d0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a29      	ldr	r2, [pc, #164]	; (8005608 <HAL_ADC_ConfigChannel+0x5d4>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	0c9a      	lsrs	r2, r3, #18
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005572:	e002      	b.n	800557a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f9      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005580:	e02e      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b11      	cmp	r3, #17
 8005588:	d10b      	bne.n	80055a2 <HAL_ADC_ConfigChannel+0x56e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005592:	d106      	bne.n	80055a2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800559c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800559e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055a0:	e01e      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b12      	cmp	r3, #18
 80055a8:	d11a      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80055aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055b6:	e013      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80055ca:	e00a      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80055de:	e000      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80055ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	376c      	adds	r7, #108	; 0x6c
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	50000400 	.word	0x50000400
 8005600:	50000500 	.word	0x50000500
 8005604:	20000080 	.word	0x20000080
 8005608:	431bde83 	.word	0x431bde83

0800560c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d108      	bne.n	8005638 <ADC_Enable+0x2c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <ADC_Enable+0x2c>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <ADC_Enable+0x2e>
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d143      	bne.n	80056c6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b22      	ldr	r3, [pc, #136]	; (80056d0 <ADC_Enable+0xc4>)
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00d      	beq.n	8005668 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0210 	orr.w	r2, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e02f      	b.n	80056c8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005678:	f7fe fe2c 	bl	80042d4 <HAL_GetTick>
 800567c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800567e:	e01b      	b.n	80056b8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005680:	f7fe fe28 	bl	80042d4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d914      	bls.n	80056b8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d00d      	beq.n	80056b8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f043 0210 	orr.w	r2, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	f043 0201 	orr.w	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e007      	b.n	80056c8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d1dc      	bne.n	8005680 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	8000003f 	.word	0x8000003f

080056d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d108      	bne.n	8005700 <ADC_Disable+0x2c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <ADC_Disable+0x2c>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <ADC_Disable+0x2e>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d047      	beq.n	8005796 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 030d 	and.w	r3, r3, #13
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10f      	bne.n	8005734 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0202 	orr.w	r2, r2, #2
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2203      	movs	r2, #3
 800572a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800572c:	f7fe fdd2 	bl	80042d4 <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005732:	e029      	b.n	8005788 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f043 0210 	orr.w	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005744:	f043 0201 	orr.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e023      	b.n	8005798 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005750:	f7fe fdc0 	bl	80042d4 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d914      	bls.n	8005788 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10d      	bne.n	8005788 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f043 0210 	orr.w	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b01      	cmp	r3, #1
 8005794:	d0dc      	beq.n	8005750 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <__NVIC_SetPriorityGrouping+0x44>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057bc:	4013      	ands	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057d2:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <__NVIC_SetPriorityGrouping+0x44>)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	60d3      	str	r3, [r2, #12]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000ed00 	.word	0xe000ed00

080057e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <__NVIC_GetPriorityGrouping+0x18>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	f003 0307 	and.w	r3, r3, #7
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	e000ed00 	.word	0xe000ed00

08005804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	2b00      	cmp	r3, #0
 8005814:	db0b      	blt.n	800582e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	f003 021f 	and.w	r2, r3, #31
 800581c:	4907      	ldr	r1, [pc, #28]	; (800583c <__NVIC_EnableIRQ+0x38>)
 800581e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	2001      	movs	r0, #1
 8005826:	fa00 f202 	lsl.w	r2, r0, r2
 800582a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	e000e100 	.word	0xe000e100

08005840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800584c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005850:	2b00      	cmp	r3, #0
 8005852:	db0a      	blt.n	800586a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	490c      	ldr	r1, [pc, #48]	; (800588c <__NVIC_SetPriority+0x4c>)
 800585a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585e:	0112      	lsls	r2, r2, #4
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	440b      	add	r3, r1
 8005864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005868:	e00a      	b.n	8005880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	4908      	ldr	r1, [pc, #32]	; (8005890 <__NVIC_SetPriority+0x50>)
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	3b04      	subs	r3, #4
 8005878:	0112      	lsls	r2, r2, #4
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	440b      	add	r3, r1
 800587e:	761a      	strb	r2, [r3, #24]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	e000e100 	.word	0xe000e100
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005894:	b480      	push	{r7}
 8005896:	b089      	sub	sp, #36	; 0x24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f1c3 0307 	rsb	r3, r3, #7
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	bf28      	it	cs
 80058b2:	2304      	movcs	r3, #4
 80058b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3304      	adds	r3, #4
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d902      	bls.n	80058c4 <NVIC_EncodePriority+0x30>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3b03      	subs	r3, #3
 80058c2:	e000      	b.n	80058c6 <NVIC_EncodePriority+0x32>
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43da      	mvns	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	401a      	ands	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058dc:	f04f 31ff 	mov.w	r1, #4294967295
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	43d9      	mvns	r1, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058ec:	4313      	orrs	r3, r2
         );
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3724      	adds	r7, #36	; 0x24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3b01      	subs	r3, #1
 8005908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800590c:	d301      	bcc.n	8005912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800590e:	2301      	movs	r3, #1
 8005910:	e00f      	b.n	8005932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005912:	4a0a      	ldr	r2, [pc, #40]	; (800593c <SysTick_Config+0x40>)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3b01      	subs	r3, #1
 8005918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800591a:	210f      	movs	r1, #15
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	f7ff ff8e 	bl	8005840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <SysTick_Config+0x40>)
 8005926:	2200      	movs	r2, #0
 8005928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <SysTick_Config+0x40>)
 800592c:	2207      	movs	r2, #7
 800592e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	e000e010 	.word	0xe000e010

08005940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff29 	bl	80057a0 <__NVIC_SetPriorityGrouping>
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af00      	add	r7, sp, #0
 800595c:	4603      	mov	r3, r0
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005968:	f7ff ff3e 	bl	80057e8 <__NVIC_GetPriorityGrouping>
 800596c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	f7ff ff8e 	bl	8005894 <NVIC_EncodePriority>
 8005978:	4602      	mov	r2, r0
 800597a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800597e:	4611      	mov	r1, r2
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff5d 	bl	8005840 <__NVIC_SetPriority>
}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	4603      	mov	r3, r0
 8005996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff ff31 	bl	8005804 <__NVIC_EnableIRQ>
}
 80059a2:	bf00      	nop
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff ffa2 	bl	80058fc <SysTick_Config>
 80059b8:	4603      	mov	r3, r0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d008      	beq.n	80059e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2204      	movs	r2, #4
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e020      	b.n	8005a28 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 020e 	bic.w	r2, r2, #14
 80059f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	2101      	movs	r1, #1
 8005a10:	fa01 f202 	lsl.w	r2, r1, r2
 8005a14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d005      	beq.n	8005a56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	e027      	b.n	8005aa6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 020e 	bic.w	r2, r2, #14
 8005a64:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2101      	movs	r1, #1
 8005a80:	fa01 f202 	lsl.w	r2, r1, r2
 8005a84:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
    } 
  }
  return status;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005abe:	e154      	b.n	8005d6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	4013      	ands	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8146 	beq.w	8005d64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d005      	beq.n	8005af0 <HAL_GPIO_Init+0x40>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d130      	bne.n	8005b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	2203      	movs	r2, #3
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4013      	ands	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b26:	2201      	movs	r2, #1
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4013      	ands	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	091b      	lsrs	r3, r3, #4
 8005b3c:	f003 0201 	and.w	r2, r3, #1
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d017      	beq.n	8005b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	2203      	movs	r2, #3
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4013      	ands	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d123      	bne.n	8005be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	08da      	lsrs	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	220f      	movs	r2, #15
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	08da      	lsrs	r2, r3, #3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3208      	adds	r2, #8
 8005bdc:	6939      	ldr	r1, [r7, #16]
 8005bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	2203      	movs	r2, #3
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0203 	and.w	r2, r3, #3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80a0 	beq.w	8005d64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c24:	4b58      	ldr	r3, [pc, #352]	; (8005d88 <HAL_GPIO_Init+0x2d8>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	4a57      	ldr	r2, [pc, #348]	; (8005d88 <HAL_GPIO_Init+0x2d8>)
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	6193      	str	r3, [r2, #24]
 8005c30:	4b55      	ldr	r3, [pc, #340]	; (8005d88 <HAL_GPIO_Init+0x2d8>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c3c:	4a53      	ldr	r2, [pc, #332]	; (8005d8c <HAL_GPIO_Init+0x2dc>)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	3302      	adds	r3, #2
 8005c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	220f      	movs	r2, #15
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c66:	d019      	beq.n	8005c9c <HAL_GPIO_Init+0x1ec>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a49      	ldr	r2, [pc, #292]	; (8005d90 <HAL_GPIO_Init+0x2e0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <HAL_GPIO_Init+0x1e8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a48      	ldr	r2, [pc, #288]	; (8005d94 <HAL_GPIO_Init+0x2e4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00d      	beq.n	8005c94 <HAL_GPIO_Init+0x1e4>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a47      	ldr	r2, [pc, #284]	; (8005d98 <HAL_GPIO_Init+0x2e8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <HAL_GPIO_Init+0x1e0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a46      	ldr	r2, [pc, #280]	; (8005d9c <HAL_GPIO_Init+0x2ec>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d101      	bne.n	8005c8c <HAL_GPIO_Init+0x1dc>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	e008      	b.n	8005c9e <HAL_GPIO_Init+0x1ee>
 8005c8c:	2305      	movs	r3, #5
 8005c8e:	e006      	b.n	8005c9e <HAL_GPIO_Init+0x1ee>
 8005c90:	2303      	movs	r3, #3
 8005c92:	e004      	b.n	8005c9e <HAL_GPIO_Init+0x1ee>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e002      	b.n	8005c9e <HAL_GPIO_Init+0x1ee>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <HAL_GPIO_Init+0x1ee>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	f002 0203 	and.w	r2, r2, #3
 8005ca4:	0092      	lsls	r2, r2, #2
 8005ca6:	4093      	lsls	r3, r2
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005cae:	4937      	ldr	r1, [pc, #220]	; (8005d8c <HAL_GPIO_Init+0x2dc>)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	089b      	lsrs	r3, r3, #2
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cbc:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ce6:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005d0a:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d10:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d34:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d3a:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	43db      	mvns	r3, r3
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d5e:	4a10      	ldr	r2, [pc, #64]	; (8005da0 <HAL_GPIO_Init+0x2f0>)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3301      	adds	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f47f aea3 	bne.w	8005ac0 <HAL_GPIO_Init+0x10>
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	48000400 	.word	0x48000400
 8005d94:	48000800 	.word	0x48000800
 8005d98:	48000c00 	.word	0x48000c00
 8005d9c:	48001000 	.word	0x48001000
 8005da0:	40010400 	.word	0x40010400

08005da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
 8005dc0:	e001      	b.n	8005dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	807b      	strh	r3, [r7, #2]
 8005de0:	4613      	mov	r3, r2
 8005de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005de4:	787b      	ldrb	r3, [r7, #1]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005df0:	e002      	b.n	8005df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005df2:	887a      	ldrh	r2, [r7, #2]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	041a      	lsls	r2, r3, #16
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	43d9      	mvns	r1, r3
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	400b      	ands	r3, r1
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	619a      	str	r2, [r3, #24]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d006      	beq.n	8005e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e4e:	4a05      	ldr	r2, [pc, #20]	; (8005e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 f806 	bl	8005e68 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40010400 	.word	0x40010400

08005e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e081      	b.n	8005f94 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fb fbb7 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2224      	movs	r2, #36	; 0x24
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ece:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ede:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d107      	bne.n	8005ef8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	e006      	b.n	8005f06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d104      	bne.n	8005f18 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69d9      	ldr	r1, [r3, #28]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d138      	bne.n	8006024 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e032      	b.n	8006026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	; 0x24
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6819      	ldr	r1, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	e000      	b.n	8006026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
  }
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b20      	cmp	r3, #32
 8006046:	d139      	bne.n	80060bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006052:	2302      	movs	r3, #2
 8006054:	e033      	b.n	80060be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2224      	movs	r2, #36	; 0x24
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006084:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	e000      	b.n	80060be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
  }
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060cc:	b08b      	sub	sp, #44	; 0x2c
 80060ce:	af06      	add	r7, sp, #24
 80060d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0d0      	b.n	800627e <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fb fbf1 	bl	80018d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2203      	movs	r2, #3
 80060fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f004 f971 	bl	800a3ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
 800610c:	e04c      	b.n	80061a8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	440b      	add	r3, r1
 800611e:	3301      	adds	r3, #1
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	440b      	add	r3, r1
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	b298      	uxth	r0, r3
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	3336      	adds	r3, #54	; 0x36
 800614c:	4602      	mov	r2, r0
 800614e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	3303      	adds	r3, #3
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	440b      	add	r3, r1
 8006174:	3338      	adds	r3, #56	; 0x38
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800617a:	7bfa      	ldrb	r2, [r7, #15]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	440b      	add	r3, r1
 8006188:	333c      	adds	r3, #60	; 0x3c
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800618e:	7bfa      	ldrb	r2, [r7, #15]
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	440b      	add	r3, r1
 800619c:	3340      	adds	r3, #64	; 0x40
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	3301      	adds	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	7bfa      	ldrb	r2, [r7, #15]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d3ad      	bcc.n	800610e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
 80061b6:	e044      	b.n	8006242 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061b8:	7bfa      	ldrb	r2, [r7, #15]
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	440b      	add	r3, r1
 80061c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061ce:	7bfa      	ldrb	r2, [r7, #15]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	440b      	add	r3, r1
 80061dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	440b      	add	r3, r1
 80061f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	440b      	add	r3, r1
 8006208:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	440b      	add	r3, r1
 800621e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006226:	7bfa      	ldrb	r2, [r7, #15]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	440b      	add	r3, r1
 8006234:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	3301      	adds	r3, #1
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	7bfa      	ldrb	r2, [r7, #15]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	d3b5      	bcc.n	80061b8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	687e      	ldr	r6, [r7, #4]
 8006254:	466d      	mov	r5, sp
 8006256:	f106 0410 	add.w	r4, r6, #16
 800625a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800625c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	1d33      	adds	r3, r6, #4
 8006264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006266:	6838      	ldr	r0, [r7, #0]
 8006268:	f004 f8da 	bl	800a420 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800628e:	af00      	add	r7, sp, #0
 8006290:	1d3b      	adds	r3, r7, #4
 8006292:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006294:	1d3b      	adds	r3, r7, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	f000 bef4 	b.w	800708a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 816a 	beq.w	8006586 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80062b2:	4bb3      	ldr	r3, [pc, #716]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d00c      	beq.n	80062d8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062be:	4bb0      	ldr	r3, [pc, #704]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d159      	bne.n	800637e <HAL_RCC_OscConfig+0xf6>
 80062ca:	4bad      	ldr	r3, [pc, #692]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d6:	d152      	bne.n	800637e <HAL_RCC_OscConfig+0xf6>
 80062d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80062e4:	fa93 f3a3 	rbit	r3, r3
 80062e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f0:	fab3 f383 	clz	r3, r3
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d102      	bne.n	800630a <HAL_RCC_OscConfig+0x82>
 8006304:	4b9e      	ldr	r3, [pc, #632]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	e015      	b.n	8006336 <HAL_RCC_OscConfig+0xae>
 800630a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800630e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006312:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800631e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006322:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006326:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800632a:	fa93 f3a3 	rbit	r3, r3
 800632e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006332:	4b93      	ldr	r3, [pc, #588]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800633a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800633e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006342:	fa92 f2a2 	rbit	r2, r2
 8006346:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800634a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800634e:	fab2 f282 	clz	r2, r2
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	f042 0220 	orr.w	r2, r2, #32
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	f002 021f 	and.w	r2, r2, #31
 800635e:	2101      	movs	r1, #1
 8006360:	fa01 f202 	lsl.w	r2, r1, r2
 8006364:	4013      	ands	r3, r2
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 810c 	beq.w	8006584 <HAL_RCC_OscConfig+0x2fc>
 800636c:	1d3b      	adds	r3, r7, #4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 8106 	bne.w	8006584 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f000 be86 	b.w	800708a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006388:	d106      	bne.n	8006398 <HAL_RCC_OscConfig+0x110>
 800638a:	4b7d      	ldr	r3, [pc, #500]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a7c      	ldr	r2, [pc, #496]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 8006390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e030      	b.n	80063fa <HAL_RCC_OscConfig+0x172>
 8006398:	1d3b      	adds	r3, r7, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10c      	bne.n	80063bc <HAL_RCC_OscConfig+0x134>
 80063a2:	4b77      	ldr	r3, [pc, #476]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a76      	ldr	r2, [pc, #472]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4b74      	ldr	r3, [pc, #464]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a73      	ldr	r2, [pc, #460]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e01e      	b.n	80063fa <HAL_RCC_OscConfig+0x172>
 80063bc:	1d3b      	adds	r3, r7, #4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063c6:	d10c      	bne.n	80063e2 <HAL_RCC_OscConfig+0x15a>
 80063c8:	4b6d      	ldr	r3, [pc, #436]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6c      	ldr	r2, [pc, #432]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4b6a      	ldr	r3, [pc, #424]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a69      	ldr	r2, [pc, #420]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	e00b      	b.n	80063fa <HAL_RCC_OscConfig+0x172>
 80063e2:	4b67      	ldr	r3, [pc, #412]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a66      	ldr	r2, [pc, #408]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	4b64      	ldr	r3, [pc, #400]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a63      	ldr	r2, [pc, #396]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063f8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063fa:	4b61      	ldr	r3, [pc, #388]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	f023 020f 	bic.w	r2, r3, #15
 8006402:	1d3b      	adds	r3, r7, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	495d      	ldr	r1, [pc, #372]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 800640a:	4313      	orrs	r3, r2
 800640c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d059      	beq.n	80064cc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006418:	f7fd ff5c 	bl	80042d4 <HAL_GetTick>
 800641c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006420:	e00a      	b.n	8006438 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006422:	f7fd ff57 	bl	80042d4 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b64      	cmp	r3, #100	; 0x64
 8006430:	d902      	bls.n	8006438 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	f000 be29 	b.w	800708a <HAL_RCC_OscConfig+0xe02>
 8006438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800643c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006444:	fa93 f3a3 	rbit	r3, r3
 8006448:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800644c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006450:	fab3 f383 	clz	r3, r3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	d102      	bne.n	800646a <HAL_RCC_OscConfig+0x1e2>
 8006464:	4b46      	ldr	r3, [pc, #280]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	e015      	b.n	8006496 <HAL_RCC_OscConfig+0x20e>
 800646a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800646e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006472:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006476:	fa93 f3a3 	rbit	r3, r3
 800647a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800647e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006482:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006486:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800648a:	fa93 f3a3 	rbit	r3, r3
 800648e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006492:	4b3b      	ldr	r3, [pc, #236]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800649a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800649e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80064a2:	fa92 f2a2 	rbit	r2, r2
 80064a6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80064aa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80064ae:	fab2 f282 	clz	r2, r2
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	f042 0220 	orr.w	r2, r2, #32
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	f002 021f 	and.w	r2, r2, #31
 80064be:	2101      	movs	r1, #1
 80064c0:	fa01 f202 	lsl.w	r2, r1, r2
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0ab      	beq.n	8006422 <HAL_RCC_OscConfig+0x19a>
 80064ca:	e05c      	b.n	8006586 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064cc:	f7fd ff02 	bl	80042d4 <HAL_GetTick>
 80064d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d4:	e00a      	b.n	80064ec <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064d6:	f7fd fefd 	bl	80042d4 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b64      	cmp	r3, #100	; 0x64
 80064e4:	d902      	bls.n	80064ec <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	f000 bdcf 	b.w	800708a <HAL_RCC_OscConfig+0xe02>
 80064ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80064f8:	fa93 f3a3 	rbit	r3, r3
 80064fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006500:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006504:	fab3 f383 	clz	r3, r3
 8006508:	b2db      	uxtb	r3, r3
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d102      	bne.n	800651e <HAL_RCC_OscConfig+0x296>
 8006518:	4b19      	ldr	r3, [pc, #100]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	e015      	b.n	800654a <HAL_RCC_OscConfig+0x2c2>
 800651e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006522:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006526:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800652a:	fa93 f3a3 	rbit	r3, r3
 800652e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006536:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800653a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800653e:	fa93 f3a3 	rbit	r3, r3
 8006542:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006546:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <HAL_RCC_OscConfig+0x2f8>)
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800654e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006552:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006556:	fa92 f2a2 	rbit	r2, r2
 800655a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800655e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006562:	fab2 f282 	clz	r2, r2
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	f042 0220 	orr.w	r2, r2, #32
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	f002 021f 	and.w	r2, r2, #31
 8006572:	2101      	movs	r1, #1
 8006574:	fa01 f202 	lsl.w	r2, r1, r2
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1ab      	bne.n	80064d6 <HAL_RCC_OscConfig+0x24e>
 800657e:	e002      	b.n	8006586 <HAL_RCC_OscConfig+0x2fe>
 8006580:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 816f 	beq.w	8006874 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006596:	4bd0      	ldr	r3, [pc, #832]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80065a2:	4bcd      	ldr	r3, [pc, #820]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d16c      	bne.n	8006688 <HAL_RCC_OscConfig+0x400>
 80065ae:	4bca      	ldr	r3, [pc, #808]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d166      	bne.n	8006688 <HAL_RCC_OscConfig+0x400>
 80065ba:	2302      	movs	r3, #2
 80065bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80065c4:	fa93 f3a3 	rbit	r3, r3
 80065c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80065cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d0:	fab3 f383 	clz	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d102      	bne.n	80065ea <HAL_RCC_OscConfig+0x362>
 80065e4:	4bbc      	ldr	r3, [pc, #752]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	e013      	b.n	8006612 <HAL_RCC_OscConfig+0x38a>
 80065ea:	2302      	movs	r3, #2
 80065ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80065f4:	fa93 f3a3 	rbit	r3, r3
 80065f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80065fc:	2302      	movs	r3, #2
 80065fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006602:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006606:	fa93 f3a3 	rbit	r3, r3
 800660a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800660e:	4bb2      	ldr	r3, [pc, #712]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	2202      	movs	r2, #2
 8006614:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006618:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800661c:	fa92 f2a2 	rbit	r2, r2
 8006620:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006624:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006628:	fab2 f282 	clz	r2, r2
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	f042 0220 	orr.w	r2, r2, #32
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	f002 021f 	and.w	r2, r2, #31
 8006638:	2101      	movs	r1, #1
 800663a:	fa01 f202 	lsl.w	r2, r1, r2
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_RCC_OscConfig+0x3cc>
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d002      	beq.n	8006654 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f000 bd1b 	b.w	800708a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006654:	4ba0      	ldr	r3, [pc, #640]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800665c:	1d3b      	adds	r3, r7, #4
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	21f8      	movs	r1, #248	; 0xf8
 8006664:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006668:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800666c:	fa91 f1a1 	rbit	r1, r1
 8006670:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006674:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006678:	fab1 f181 	clz	r1, r1
 800667c:	b2c9      	uxtb	r1, r1
 800667e:	408b      	lsls	r3, r1
 8006680:	4995      	ldr	r1, [pc, #596]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006686:	e0f5      	b.n	8006874 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8085 	beq.w	800679e <HAL_RCC_OscConfig+0x516>
 8006694:	2301      	movs	r3, #1
 8006696:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800669a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800669e:	fa93 f3a3 	rbit	r3, r3
 80066a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80066a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066aa:	fab3 f383 	clz	r3, r3
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80066b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	461a      	mov	r2, r3
 80066bc:	2301      	movs	r3, #1
 80066be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c0:	f7fd fe08 	bl	80042d4 <HAL_GetTick>
 80066c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c8:	e00a      	b.n	80066e0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066ca:	f7fd fe03 	bl	80042d4 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d902      	bls.n	80066e0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	f000 bcd5 	b.w	800708a <HAL_RCC_OscConfig+0xe02>
 80066e0:	2302      	movs	r3, #2
 80066e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80066ea:	fa93 f3a3 	rbit	r3, r3
 80066ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80066f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f6:	fab3 f383 	clz	r3, r3
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d102      	bne.n	8006710 <HAL_RCC_OscConfig+0x488>
 800670a:	4b73      	ldr	r3, [pc, #460]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	e013      	b.n	8006738 <HAL_RCC_OscConfig+0x4b0>
 8006710:	2302      	movs	r3, #2
 8006712:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006716:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800671a:	fa93 f3a3 	rbit	r3, r3
 800671e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006722:	2302      	movs	r3, #2
 8006724:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006728:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800672c:	fa93 f3a3 	rbit	r3, r3
 8006730:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006734:	4b68      	ldr	r3, [pc, #416]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2202      	movs	r2, #2
 800673a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800673e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006742:	fa92 f2a2 	rbit	r2, r2
 8006746:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800674a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800674e:	fab2 f282 	clz	r2, r2
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	f042 0220 	orr.w	r2, r2, #32
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	f002 021f 	and.w	r2, r2, #31
 800675e:	2101      	movs	r1, #1
 8006760:	fa01 f202 	lsl.w	r2, r1, r2
 8006764:	4013      	ands	r3, r2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0af      	beq.n	80066ca <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800676a:	4b5b      	ldr	r3, [pc, #364]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	21f8      	movs	r1, #248	; 0xf8
 800677a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006782:	fa91 f1a1 	rbit	r1, r1
 8006786:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800678a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800678e:	fab1 f181 	clz	r1, r1
 8006792:	b2c9      	uxtb	r1, r1
 8006794:	408b      	lsls	r3, r1
 8006796:	4950      	ldr	r1, [pc, #320]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]
 800679c:	e06a      	b.n	8006874 <HAL_RCC_OscConfig+0x5ec>
 800679e:	2301      	movs	r3, #1
 80067a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80067a8:	fa93 f3a3 	rbit	r3, r3
 80067ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80067b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067b4:	fab3 f383 	clz	r3, r3
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80067be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ca:	f7fd fd83 	bl	80042d4 <HAL_GetTick>
 80067ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d2:	e00a      	b.n	80067ea <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067d4:	f7fd fd7e 	bl	80042d4 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d902      	bls.n	80067ea <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	f000 bc50 	b.w	800708a <HAL_RCC_OscConfig+0xe02>
 80067ea:	2302      	movs	r3, #2
 80067ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80067f4:	fa93 f3a3 	rbit	r3, r3
 80067f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006800:	fab3 f383 	clz	r3, r3
 8006804:	b2db      	uxtb	r3, r3
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d102      	bne.n	800681a <HAL_RCC_OscConfig+0x592>
 8006814:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	e013      	b.n	8006842 <HAL_RCC_OscConfig+0x5ba>
 800681a:	2302      	movs	r3, #2
 800681c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006824:	fa93 f3a3 	rbit	r3, r3
 8006828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800682c:	2302      	movs	r3, #2
 800682e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006832:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006836:	fa93 f3a3 	rbit	r3, r3
 800683a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800683e:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <HAL_RCC_OscConfig+0x650>)
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	2202      	movs	r2, #2
 8006844:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006848:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800684c:	fa92 f2a2 	rbit	r2, r2
 8006850:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006854:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006858:	fab2 f282 	clz	r2, r2
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	f042 0220 	orr.w	r2, r2, #32
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	f002 021f 	and.w	r2, r2, #31
 8006868:	2101      	movs	r1, #1
 800686a:	fa01 f202 	lsl.w	r2, r1, r2
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1af      	bne.n	80067d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80da 	beq.w	8006a38 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006884:	1d3b      	adds	r3, r7, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d069      	beq.n	8006962 <HAL_RCC_OscConfig+0x6da>
 800688e:	2301      	movs	r3, #1
 8006890:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006898:	fa93 f3a3 	rbit	r3, r3
 800689c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80068a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068a4:	fab3 f383 	clz	r3, r3
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <HAL_RCC_OscConfig+0x654>)
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	461a      	mov	r2, r3
 80068b4:	2301      	movs	r3, #1
 80068b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b8:	f7fd fd0c 	bl	80042d4 <HAL_GetTick>
 80068bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c0:	e00e      	b.n	80068e0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068c2:	f7fd fd07 	bl	80042d4 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d906      	bls.n	80068e0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e3d9      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
 80068d6:	bf00      	nop
 80068d8:	40021000 	.word	0x40021000
 80068dc:	10908120 	.word	0x10908120
 80068e0:	2302      	movs	r3, #2
 80068e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ea:	fa93 f3a3 	rbit	r3, r3
 80068ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80068f6:	2202      	movs	r2, #2
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	fa93 f2a3 	rbit	r2, r3
 8006904:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800690e:	2202      	movs	r2, #2
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	fa93 f2a3 	rbit	r2, r3
 800691c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006920:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006922:	4ba5      	ldr	r3, [pc, #660]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006926:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800692a:	2102      	movs	r1, #2
 800692c:	6019      	str	r1, [r3, #0]
 800692e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	fa93 f1a3 	rbit	r1, r3
 8006938:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800693c:	6019      	str	r1, [r3, #0]
  return result;
 800693e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	fab3 f383 	clz	r3, r3
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0b0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x63a>
 8006960:	e06a      	b.n	8006a38 <HAL_RCC_OscConfig+0x7b0>
 8006962:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	fa93 f2a3 	rbit	r2, r3
 8006974:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006978:	601a      	str	r2, [r3, #0]
  return result;
 800697a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800697e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006980:	fab3 f383 	clz	r3, r3
 8006984:	b2db      	uxtb	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	4b8c      	ldr	r3, [pc, #560]	; (8006bbc <HAL_RCC_OscConfig+0x934>)
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	461a      	mov	r2, r3
 8006990:	2300      	movs	r3, #0
 8006992:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006994:	f7fd fc9e 	bl	80042d4 <HAL_GetTick>
 8006998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800699c:	e009      	b.n	80069b2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800699e:	f7fd fc99 	bl	80042d4 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e36b      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
 80069b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80069b6:	2202      	movs	r2, #2
 80069b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	fa93 f2a3 	rbit	r2, r3
 80069c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80069ce:	2202      	movs	r2, #2
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	fa93 f2a3 	rbit	r2, r3
 80069dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80069e6:	2202      	movs	r2, #2
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	fa93 f2a3 	rbit	r2, r3
 80069f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80069f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069fa:	4b6f      	ldr	r3, [pc, #444]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 80069fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a02:	2102      	movs	r1, #2
 8006a04:	6019      	str	r1, [r3, #0]
 8006a06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	fa93 f1a3 	rbit	r1, r3
 8006a10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a14:	6019      	str	r1, [r3, #0]
  return result;
 8006a16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	fab3 f383 	clz	r3, r3
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a32:	4013      	ands	r3, r2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1b2      	bne.n	800699e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a38:	1d3b      	adds	r3, r7, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8158 	beq.w	8006cf8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4e:	4b5a      	ldr	r3, [pc, #360]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d112      	bne.n	8006a80 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5a:	4b57      	ldr	r3, [pc, #348]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	4a56      	ldr	r2, [pc, #344]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a64:	61d3      	str	r3, [r2, #28]
 8006a66:	4b54      	ldr	r3, [pc, #336]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006a6e:	f107 0308 	add.w	r3, r7, #8
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a80:	4b4f      	ldr	r3, [pc, #316]	; (8006bc0 <HAL_RCC_OscConfig+0x938>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d11a      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a8c:	4b4c      	ldr	r3, [pc, #304]	; (8006bc0 <HAL_RCC_OscConfig+0x938>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a4b      	ldr	r2, [pc, #300]	; (8006bc0 <HAL_RCC_OscConfig+0x938>)
 8006a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a96:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a98:	f7fd fc1c 	bl	80042d4 <HAL_GetTick>
 8006a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	e009      	b.n	8006ab6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa2:	f7fd fc17 	bl	80042d4 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b64      	cmp	r3, #100	; 0x64
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e2e9      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab6:	4b42      	ldr	r3, [pc, #264]	; (8006bc0 <HAL_RCC_OscConfig+0x938>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0ef      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac2:	1d3b      	adds	r3, r7, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d106      	bne.n	8006ada <HAL_RCC_OscConfig+0x852>
 8006acc:	4b3a      	ldr	r3, [pc, #232]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	4a39      	ldr	r2, [pc, #228]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	6213      	str	r3, [r2, #32]
 8006ad8:	e02f      	b.n	8006b3a <HAL_RCC_OscConfig+0x8b2>
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10c      	bne.n	8006afe <HAL_RCC_OscConfig+0x876>
 8006ae4:	4b34      	ldr	r3, [pc, #208]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	4a33      	ldr	r2, [pc, #204]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	6213      	str	r3, [r2, #32]
 8006af0:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	4a30      	ldr	r2, [pc, #192]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006af6:	f023 0304 	bic.w	r3, r3, #4
 8006afa:	6213      	str	r3, [r2, #32]
 8006afc:	e01d      	b.n	8006b3a <HAL_RCC_OscConfig+0x8b2>
 8006afe:	1d3b      	adds	r3, r7, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d10c      	bne.n	8006b22 <HAL_RCC_OscConfig+0x89a>
 8006b08:	4b2b      	ldr	r3, [pc, #172]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	4a2a      	ldr	r2, [pc, #168]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b0e:	f043 0304 	orr.w	r3, r3, #4
 8006b12:	6213      	str	r3, [r2, #32]
 8006b14:	4b28      	ldr	r3, [pc, #160]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	4a27      	ldr	r2, [pc, #156]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6213      	str	r3, [r2, #32]
 8006b20:	e00b      	b.n	8006b3a <HAL_RCC_OscConfig+0x8b2>
 8006b22:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	4a24      	ldr	r2, [pc, #144]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	6213      	str	r3, [r2, #32]
 8006b2e:	4b22      	ldr	r3, [pc, #136]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	4a21      	ldr	r2, [pc, #132]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006b34:	f023 0304 	bic.w	r3, r3, #4
 8006b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b3a:	1d3b      	adds	r3, r7, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d06b      	beq.n	8006c1c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b44:	f7fd fbc6 	bl	80042d4 <HAL_GetTick>
 8006b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4c:	e00b      	b.n	8006b66 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4e:	f7fd fbc1 	bl	80042d4 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e291      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
 8006b66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	fa93 f2a3 	rbit	r2, r3
 8006b78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006b82:	2202      	movs	r2, #2
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	fa93 f2a3 	rbit	r2, r3
 8006b90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006b94:	601a      	str	r2, [r3, #0]
  return result;
 8006b96:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006b9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f043 0302 	orr.w	r3, r3, #2
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d109      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x93c>
 8006bb0:	4b01      	ldr	r3, [pc, #4]	; (8006bb8 <HAL_RCC_OscConfig+0x930>)
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	e014      	b.n	8006be0 <HAL_RCC_OscConfig+0x958>
 8006bb6:	bf00      	nop
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	10908120 	.word	0x10908120
 8006bc0:	40007000 	.word	0x40007000
 8006bc4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006bc8:	2202      	movs	r2, #2
 8006bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bcc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	fa93 f2a3 	rbit	r2, r3
 8006bd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	4bbb      	ldr	r3, [pc, #748]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006be4:	2102      	movs	r1, #2
 8006be6:	6011      	str	r1, [r2, #0]
 8006be8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	fa92 f1a2 	rbit	r1, r2
 8006bf2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006bf6:	6011      	str	r1, [r2, #0]
  return result;
 8006bf8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	fab2 f282 	clz	r2, r2
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	f002 021f 	and.w	r2, r2, #31
 8006c0e:	2101      	movs	r1, #1
 8006c10:	fa01 f202 	lsl.w	r2, r1, r2
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d099      	beq.n	8006b4e <HAL_RCC_OscConfig+0x8c6>
 8006c1a:	e063      	b.n	8006ce4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c1c:	f7fd fb5a 	bl	80042d4 <HAL_GetTick>
 8006c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c24:	e00b      	b.n	8006c3e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c26:	f7fd fb55 	bl	80042d4 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e225      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
 8006c3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006c42:	2202      	movs	r2, #2
 8006c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	fa93 f2a3 	rbit	r2, r3
 8006c50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	fa93 f2a3 	rbit	r2, r3
 8006c68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c6c:	601a      	str	r2, [r3, #0]
  return result;
 8006c6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c74:	fab3 f383 	clz	r3, r3
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f043 0302 	orr.w	r3, r3, #2
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d102      	bne.n	8006c8e <HAL_RCC_OscConfig+0xa06>
 8006c88:	4b90      	ldr	r3, [pc, #576]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	e00d      	b.n	8006caa <HAL_RCC_OscConfig+0xa22>
 8006c8e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c92:	2202      	movs	r2, #2
 8006c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	fa93 f2a3 	rbit	r2, r3
 8006ca0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	4b89      	ldr	r3, [pc, #548]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006cae:	2102      	movs	r1, #2
 8006cb0:	6011      	str	r1, [r2, #0]
 8006cb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	fa92 f1a2 	rbit	r1, r2
 8006cbc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006cc0:	6011      	str	r1, [r2, #0]
  return result;
 8006cc2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	fab2 f282 	clz	r2, r2
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	f002 021f 	and.w	r2, r2, #31
 8006cd8:	2101      	movs	r1, #1
 8006cda:	fa01 f202 	lsl.w	r2, r1, r2
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1a0      	bne.n	8006c26 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ce4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cec:	4b77      	ldr	r3, [pc, #476]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4a76      	ldr	r2, [pc, #472]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cf8:	1d3b      	adds	r3, r7, #4
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 81c2 	beq.w	8007088 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d04:	4b71      	ldr	r3, [pc, #452]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f003 030c 	and.w	r3, r3, #12
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	f000 819c 	beq.w	800704a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d12:	1d3b      	adds	r3, r7, #4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	f040 8114 	bne.w	8006f46 <HAL_RCC_OscConfig+0xcbe>
 8006d1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006d22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	fa93 f2a3 	rbit	r2, r3
 8006d32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d36:	601a      	str	r2, [r3, #0]
  return result;
 8006d38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d3c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3e:	fab3 f383 	clz	r3, r3
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d54:	f7fd fabe 	bl	80042d4 <HAL_GetTick>
 8006d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d5c:	e009      	b.n	8006d72 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d5e:	f7fd fab9 	bl	80042d4 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e18b      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
 8006d72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	fa93 f2a3 	rbit	r2, r3
 8006d86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d8a:	601a      	str	r2, [r3, #0]
  return result;
 8006d8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d92:	fab3 f383 	clz	r3, r3
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d102      	bne.n	8006dac <HAL_RCC_OscConfig+0xb24>
 8006da6:	4b49      	ldr	r3, [pc, #292]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	e01b      	b.n	8006de4 <HAL_RCC_OscConfig+0xb5c>
 8006dac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	fa93 f2a3 	rbit	r2, r3
 8006dc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	fa93 f2a3 	rbit	r2, r3
 8006dda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	4b3a      	ldr	r3, [pc, #232]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006de8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006dec:	6011      	str	r1, [r2, #0]
 8006dee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	fa92 f1a2 	rbit	r1, r2
 8006df8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006dfc:	6011      	str	r1, [r2, #0]
  return result;
 8006dfe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	fab2 f282 	clz	r2, r2
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	f042 0220 	orr.w	r2, r2, #32
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	f002 021f 	and.w	r2, r2, #31
 8006e14:	2101      	movs	r1, #1
 8006e16:	fa01 f202 	lsl.w	r2, r1, r2
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d19e      	bne.n	8006d5e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e20:	4b2a      	ldr	r3, [pc, #168]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e28:	1d3b      	adds	r3, r7, #4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e2e:	1d3b      	adds	r3, r7, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	4925      	ldr	r1, [pc, #148]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	604b      	str	r3, [r1, #4]
 8006e3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	fa93 f2a3 	rbit	r2, r3
 8006e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006e54:	601a      	str	r2, [r3, #0]
  return result;
 8006e56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006e5a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5c:	fab3 f383 	clz	r3, r3
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2301      	movs	r3, #1
 8006e70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e72:	f7fd fa2f 	bl	80042d4 <HAL_GetTick>
 8006e76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e7a:	e009      	b.n	8006e90 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e7c:	f7fd fa2a 	bl	80042d4 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e0fc      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
 8006e90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	fa93 f2a3 	rbit	r2, r3
 8006ea4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006ea8:	601a      	str	r2, [r3, #0]
  return result;
 8006eaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006eae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006eb0:	fab3 f383 	clz	r3, r3
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d105      	bne.n	8006ed0 <HAL_RCC_OscConfig+0xc48>
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <HAL_RCC_OscConfig+0xc44>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	e01e      	b.n	8006f08 <HAL_RCC_OscConfig+0xc80>
 8006eca:	bf00      	nop
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	fa93 f2a3 	rbit	r2, r3
 8006ee4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	fa93 f2a3 	rbit	r2, r3
 8006efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	4b63      	ldr	r3, [pc, #396]	; (8007094 <HAL_RCC_OscConfig+0xe0c>)
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006f0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006f10:	6011      	str	r1, [r2, #0]
 8006f12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	fa92 f1a2 	rbit	r1, r2
 8006f1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006f20:	6011      	str	r1, [r2, #0]
  return result;
 8006f22:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	fab2 f282 	clz	r2, r2
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	f042 0220 	orr.w	r2, r2, #32
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	f002 021f 	and.w	r2, r2, #31
 8006f38:	2101      	movs	r1, #1
 8006f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d09b      	beq.n	8006e7c <HAL_RCC_OscConfig+0xbf4>
 8006f44:	e0a0      	b.n	8007088 <HAL_RCC_OscConfig+0xe00>
 8006f46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	fa93 f2a3 	rbit	r2, r3
 8006f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f5e:	601a      	str	r2, [r3, #0]
  return result;
 8006f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f66:	fab3 f383 	clz	r3, r3
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	461a      	mov	r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7c:	f7fd f9aa 	bl	80042d4 <HAL_GetTick>
 8006f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f84:	e009      	b.n	8006f9a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f86:	f7fd f9a5 	bl	80042d4 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e077      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
 8006f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	fa93 f2a3 	rbit	r2, r3
 8006fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb2:	601a      	str	r2, [r3, #0]
  return result;
 8006fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fba:	fab3 f383 	clz	r3, r3
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d102      	bne.n	8006fd4 <HAL_RCC_OscConfig+0xd4c>
 8006fce:	4b31      	ldr	r3, [pc, #196]	; (8007094 <HAL_RCC_OscConfig+0xe0c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	e01b      	b.n	800700c <HAL_RCC_OscConfig+0xd84>
 8006fd4:	f107 0320 	add.w	r3, r7, #32
 8006fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fde:	f107 0320 	add.w	r3, r7, #32
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	fa93 f2a3 	rbit	r2, r3
 8006fe8:	f107 031c 	add.w	r3, r7, #28
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	f107 0318 	add.w	r3, r7, #24
 8006ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	f107 0318 	add.w	r3, r7, #24
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	fa93 f2a3 	rbit	r2, r3
 8007002:	f107 0314 	add.w	r3, r7, #20
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	4b22      	ldr	r3, [pc, #136]	; (8007094 <HAL_RCC_OscConfig+0xe0c>)
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	f107 0210 	add.w	r2, r7, #16
 8007010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	f107 0210 	add.w	r2, r7, #16
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	fa92 f1a2 	rbit	r1, r2
 8007020:	f107 020c 	add.w	r2, r7, #12
 8007024:	6011      	str	r1, [r2, #0]
  return result;
 8007026:	f107 020c 	add.w	r2, r7, #12
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	fab2 f282 	clz	r2, r2
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	f042 0220 	orr.w	r2, r2, #32
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	f002 021f 	and.w	r2, r2, #31
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f202 	lsl.w	r2, r1, r2
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d19e      	bne.n	8006f86 <HAL_RCC_OscConfig+0xcfe>
 8007048:	e01e      	b.n	8007088 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e018      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007058:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <HAL_RCC_OscConfig+0xe0c>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007060:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007068:	1d3b      	adds	r3, r7, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	429a      	cmp	r2, r3
 8007070:	d108      	bne.n	8007084 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007072:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800707a:	1d3b      	adds	r3, r7, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40021000 	.word	0x40021000

08007098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b09e      	sub	sp, #120	; 0x78
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e162      	b.n	8007376 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070b0:	4b90      	ldr	r3, [pc, #576]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d910      	bls.n	80070e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070be:	4b8d      	ldr	r3, [pc, #564]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f023 0207 	bic.w	r2, r3, #7
 80070c6:	498b      	ldr	r1, [pc, #556]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b89      	ldr	r3, [pc, #548]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e14a      	b.n	8007376 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ec:	4b82      	ldr	r3, [pc, #520]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	497f      	ldr	r1, [pc, #508]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80dc 	beq.w	80072c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d13c      	bne.n	800718e <HAL_RCC_ClockConfig+0xf6>
 8007114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007118:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800711a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800711c:	fa93 f3a3 	rbit	r3, r3
 8007120:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007124:	fab3 f383 	clz	r3, r3
 8007128:	b2db      	uxtb	r3, r3
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d102      	bne.n	800713e <HAL_RCC_ClockConfig+0xa6>
 8007138:	4b6f      	ldr	r3, [pc, #444]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	e00f      	b.n	800715e <HAL_RCC_ClockConfig+0xc6>
 800713e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007142:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007146:	fa93 f3a3 	rbit	r3, r3
 800714a:	667b      	str	r3, [r7, #100]	; 0x64
 800714c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007150:	663b      	str	r3, [r7, #96]	; 0x60
 8007152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007154:	fa93 f3a3 	rbit	r3, r3
 8007158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800715a:	4b67      	ldr	r3, [pc, #412]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007162:	65ba      	str	r2, [r7, #88]	; 0x58
 8007164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007166:	fa92 f2a2 	rbit	r2, r2
 800716a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800716c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800716e:	fab2 f282 	clz	r2, r2
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	f042 0220 	orr.w	r2, r2, #32
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	f002 021f 	and.w	r2, r2, #31
 800717e:	2101      	movs	r1, #1
 8007180:	fa01 f202 	lsl.w	r2, r1, r2
 8007184:	4013      	ands	r3, r2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d17b      	bne.n	8007282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e0f3      	b.n	8007376 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d13c      	bne.n	8007210 <HAL_RCC_ClockConfig+0x178>
 8007196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800719a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719e:	fa93 f3a3 	rbit	r3, r3
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80071a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a6:	fab3 f383 	clz	r3, r3
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d102      	bne.n	80071c0 <HAL_RCC_ClockConfig+0x128>
 80071ba:	4b4f      	ldr	r3, [pc, #316]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	e00f      	b.n	80071e0 <HAL_RCC_ClockConfig+0x148>
 80071c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c8:	fa93 f3a3 	rbit	r3, r3
 80071cc:	647b      	str	r3, [r7, #68]	; 0x44
 80071ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071d2:	643b      	str	r3, [r7, #64]	; 0x40
 80071d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d6:	fa93 f3a3 	rbit	r3, r3
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071dc:	4b46      	ldr	r3, [pc, #280]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80071e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e8:	fa92 f2a2 	rbit	r2, r2
 80071ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80071ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f0:	fab2 f282 	clz	r2, r2
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	f042 0220 	orr.w	r2, r2, #32
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	f002 021f 	and.w	r2, r2, #31
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f202 	lsl.w	r2, r1, r2
 8007206:	4013      	ands	r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d13a      	bne.n	8007282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0b2      	b.n	8007376 <HAL_RCC_ClockConfig+0x2de>
 8007210:	2302      	movs	r3, #2
 8007212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	fa93 f3a3 	rbit	r3, r3
 800721a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721e:	fab3 f383 	clz	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d102      	bne.n	8007238 <HAL_RCC_ClockConfig+0x1a0>
 8007232:	4b31      	ldr	r3, [pc, #196]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	e00d      	b.n	8007254 <HAL_RCC_ClockConfig+0x1bc>
 8007238:	2302      	movs	r3, #2
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	fa93 f3a3 	rbit	r3, r3
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
 8007244:	2302      	movs	r3, #2
 8007246:	623b      	str	r3, [r7, #32]
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	fa93 f3a3 	rbit	r3, r3
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	4b29      	ldr	r3, [pc, #164]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	2202      	movs	r2, #2
 8007256:	61ba      	str	r2, [r7, #24]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	fa92 f2a2 	rbit	r2, r2
 800725e:	617a      	str	r2, [r7, #20]
  return result;
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	fab2 f282 	clz	r2, r2
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	f042 0220 	orr.w	r2, r2, #32
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	f002 021f 	and.w	r2, r2, #31
 8007272:	2101      	movs	r1, #1
 8007274:	fa01 f202 	lsl.w	r2, r1, r2
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e079      	b.n	8007376 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007282:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f023 0203 	bic.w	r2, r3, #3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	491a      	ldr	r1, [pc, #104]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 8007290:	4313      	orrs	r3, r2
 8007292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007294:	f7fd f81e 	bl	80042d4 <HAL_GetTick>
 8007298:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800729a:	e00a      	b.n	80072b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800729c:	f7fd f81a 	bl	80042d4 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e061      	b.n	8007376 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <HAL_RCC_ClockConfig+0x260>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f003 020c 	and.w	r2, r3, #12
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d1eb      	bne.n	800729c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072c4:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d214      	bcs.n	80072fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 0207 	bic.w	r2, r3, #7
 80072da:	4906      	ldr	r1, [pc, #24]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	4313      	orrs	r3, r2
 80072e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <HAL_RCC_ClockConfig+0x25c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d005      	beq.n	80072fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e040      	b.n	8007376 <HAL_RCC_ClockConfig+0x2de>
 80072f4:	40022000 	.word	0x40022000
 80072f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007308:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <HAL_RCC_ClockConfig+0x2e8>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	491a      	ldr	r1, [pc, #104]	; (8007380 <HAL_RCC_ClockConfig+0x2e8>)
 8007316:	4313      	orrs	r3, r2
 8007318:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007326:	4b16      	ldr	r3, [pc, #88]	; (8007380 <HAL_RCC_ClockConfig+0x2e8>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4912      	ldr	r1, [pc, #72]	; (8007380 <HAL_RCC_ClockConfig+0x2e8>)
 8007336:	4313      	orrs	r3, r2
 8007338:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800733a:	f000 f829 	bl	8007390 <HAL_RCC_GetSysClockFreq>
 800733e:	4601      	mov	r1, r0
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <HAL_RCC_ClockConfig+0x2e8>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007348:	22f0      	movs	r2, #240	; 0xf0
 800734a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	fa92 f2a2 	rbit	r2, r2
 8007352:	60fa      	str	r2, [r7, #12]
  return result;
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	fab2 f282 	clz	r2, r2
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	40d3      	lsrs	r3, r2
 800735e:	4a09      	ldr	r2, [pc, #36]	; (8007384 <HAL_RCC_ClockConfig+0x2ec>)
 8007360:	5cd3      	ldrb	r3, [r2, r3]
 8007362:	fa21 f303 	lsr.w	r3, r1, r3
 8007366:	4a08      	ldr	r2, [pc, #32]	; (8007388 <HAL_RCC_ClockConfig+0x2f0>)
 8007368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800736a:	4b08      	ldr	r3, [pc, #32]	; (800738c <HAL_RCC_ClockConfig+0x2f4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f7fc ff6c 	bl	800424c <HAL_InitTick>
  
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3778      	adds	r7, #120	; 0x78
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40021000 	.word	0x40021000
 8007384:	0800b900 	.word	0x0800b900
 8007388:	20000080 	.word	0x20000080
 800738c:	20000084 	.word	0x20000084

08007390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007390:	b480      	push	{r7}
 8007392:	b08b      	sub	sp, #44	; 0x2c
 8007394:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	2300      	movs	r3, #0
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80073aa:	4b29      	ldr	r3, [pc, #164]	; (8007450 <HAL_RCC_GetSysClockFreq+0xc0>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f003 030c 	and.w	r3, r3, #12
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d002      	beq.n	80073c0 <HAL_RCC_GetSysClockFreq+0x30>
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d003      	beq.n	80073c6 <HAL_RCC_GetSysClockFreq+0x36>
 80073be:	e03c      	b.n	800743a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073c0:	4b24      	ldr	r3, [pc, #144]	; (8007454 <HAL_RCC_GetSysClockFreq+0xc4>)
 80073c2:	623b      	str	r3, [r7, #32]
      break;
 80073c4:	e03c      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80073cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80073d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	fa92 f2a2 	rbit	r2, r2
 80073d8:	607a      	str	r2, [r7, #4]
  return result;
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	fab2 f282 	clz	r2, r2
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	40d3      	lsrs	r3, r2
 80073e4:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_RCC_GetSysClockFreq+0xc8>)
 80073e6:	5cd3      	ldrb	r3, [r2, r3]
 80073e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80073ea:	4b19      	ldr	r3, [pc, #100]	; (8007450 <HAL_RCC_GetSysClockFreq+0xc0>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	220f      	movs	r2, #15
 80073f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	fa92 f2a2 	rbit	r2, r2
 80073fc:	60fa      	str	r2, [r7, #12]
  return result;
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	fab2 f282 	clz	r2, r2
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	40d3      	lsrs	r3, r2
 8007408:	4a14      	ldr	r2, [pc, #80]	; (800745c <HAL_RCC_GetSysClockFreq+0xcc>)
 800740a:	5cd3      	ldrb	r3, [r2, r3]
 800740c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007418:	4a0e      	ldr	r2, [pc, #56]	; (8007454 <HAL_RCC_GetSysClockFreq+0xc4>)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
 8007428:	e004      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	4a0c      	ldr	r2, [pc, #48]	; (8007460 <HAL_RCC_GetSysClockFreq+0xd0>)
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	623b      	str	r3, [r7, #32]
      break;
 8007438:	e002      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800743a:	4b06      	ldr	r3, [pc, #24]	; (8007454 <HAL_RCC_GetSysClockFreq+0xc4>)
 800743c:	623b      	str	r3, [r7, #32]
      break;
 800743e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007440:	6a3b      	ldr	r3, [r7, #32]
}
 8007442:	4618      	mov	r0, r3
 8007444:	372c      	adds	r7, #44	; 0x2c
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40021000 	.word	0x40021000
 8007454:	007a1200 	.word	0x007a1200
 8007458:	0800b918 	.word	0x0800b918
 800745c:	0800b928 	.word	0x0800b928
 8007460:	003d0900 	.word	0x003d0900

08007464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007468:	4b03      	ldr	r3, [pc, #12]	; (8007478 <HAL_RCC_GetHCLKFreq+0x14>)
 800746a:	681b      	ldr	r3, [r3, #0]
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000080 	.word	0x20000080

0800747c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007482:	f7ff ffef 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 8007486:	4601      	mov	r1, r0
 8007488:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007490:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007494:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	fa92 f2a2 	rbit	r2, r2
 800749c:	603a      	str	r2, [r7, #0]
  return result;
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	fab2 f282 	clz	r2, r2
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	40d3      	lsrs	r3, r2
 80074a8:	4a04      	ldr	r2, [pc, #16]	; (80074bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80074aa:	5cd3      	ldrb	r3, [r2, r3]
 80074ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	40021000 	.word	0x40021000
 80074bc:	0800b910 	.word	0x0800b910

080074c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80074c6:	f7ff ffcd 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 80074ca:	4601      	mov	r1, r0
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80074d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80074d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	fa92 f2a2 	rbit	r2, r2
 80074e0:	603a      	str	r2, [r7, #0]
  return result;
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	fab2 f282 	clz	r2, r2
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	40d3      	lsrs	r3, r2
 80074ec:	4a04      	ldr	r2, [pc, #16]	; (8007500 <HAL_RCC_GetPCLK2Freq+0x40>)
 80074ee:	5cd3      	ldrb	r3, [r2, r3]
 80074f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40021000 	.word	0x40021000
 8007500:	0800b910 	.word	0x0800b910

08007504 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b092      	sub	sp, #72	; 0x48
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80d4 	beq.w	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007528:	4b4e      	ldr	r3, [pc, #312]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10e      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007534:	4b4b      	ldr	r3, [pc, #300]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4a4a      	ldr	r2, [pc, #296]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800753a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800753e:	61d3      	str	r3, [r2, #28]
 8007540:	4b48      	ldr	r3, [pc, #288]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007552:	4b45      	ldr	r3, [pc, #276]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755a:	2b00      	cmp	r3, #0
 800755c:	d118      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800755e:	4b42      	ldr	r3, [pc, #264]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a41      	ldr	r2, [pc, #260]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007568:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800756a:	f7fc feb3 	bl	80042d4 <HAL_GetTick>
 800756e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007570:	e008      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007572:	f7fc feaf 	bl	80042d4 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b64      	cmp	r3, #100	; 0x64
 800757e:	d901      	bls.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e169      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007584:	4b38      	ldr	r3, [pc, #224]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0f0      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007590:	4b34      	ldr	r3, [pc, #208]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800759a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8084 	beq.w	80076aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d07c      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075b0:	4b2c      	ldr	r3, [pc, #176]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	fa93 f3a3 	rbit	r3, r3
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075ca:	fab3 f383 	clz	r3, r3
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b26      	ldr	r3, [pc, #152]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	461a      	mov	r2, r3
 80075da:	2301      	movs	r3, #1
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	fa93 f3a3 	rbit	r3, r3
 80075ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80075ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075ee:	fab3 f383 	clz	r3, r3
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	461a      	mov	r2, r3
 80075f6:	4b1d      	ldr	r3, [pc, #116]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	461a      	mov	r2, r3
 80075fe:	2300      	movs	r3, #0
 8007600:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007602:	4a18      	ldr	r2, [pc, #96]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007606:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d04b      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007612:	f7fc fe5f 	bl	80042d4 <HAL_GetTick>
 8007616:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007618:	e00a      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fc fe5b 	bl	80042d4 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e113      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007630:	2302      	movs	r3, #2
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	fa93 f3a3 	rbit	r3, r3
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
 800763c:	2302      	movs	r3, #2
 800763e:	623b      	str	r3, [r7, #32]
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	fa93 f3a3 	rbit	r3, r3
 8007646:	61fb      	str	r3, [r7, #28]
  return result;
 8007648:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800764a:	fab3 f383 	clz	r3, r3
 800764e:	b2db      	uxtb	r3, r3
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f043 0302 	orr.w	r3, r3, #2
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d108      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800765e:	4b01      	ldr	r3, [pc, #4]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	e00d      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007664:	40021000 	.word	0x40021000
 8007668:	40007000 	.word	0x40007000
 800766c:	10908100 	.word	0x10908100
 8007670:	2302      	movs	r3, #2
 8007672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	fa93 f3a3 	rbit	r3, r3
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	4b78      	ldr	r3, [pc, #480]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2202      	movs	r2, #2
 8007682:	613a      	str	r2, [r7, #16]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	fa92 f2a2 	rbit	r2, r2
 800768a:	60fa      	str	r2, [r7, #12]
  return result;
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	fab2 f282 	clz	r2, r2
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	f002 021f 	and.w	r2, r2, #31
 800769e:	2101      	movs	r1, #1
 80076a0:	fa01 f202 	lsl.w	r2, r1, r2
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0b7      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80076aa:	4b6d      	ldr	r3, [pc, #436]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	496a      	ldr	r1, [pc, #424]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80076bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d105      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076c4:	4b66      	ldr	r3, [pc, #408]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4a65      	ldr	r2, [pc, #404]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076dc:	4b60      	ldr	r3, [pc, #384]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	f023 0203 	bic.w	r2, r3, #3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	495d      	ldr	r1, [pc, #372]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076fa:	4b59      	ldr	r3, [pc, #356]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	4956      	ldr	r1, [pc, #344]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007718:	4b51      	ldr	r3, [pc, #324]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	494e      	ldr	r1, [pc, #312]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b00      	cmp	r3, #0
 8007734:	d008      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007736:	4b4a      	ldr	r3, [pc, #296]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	f023 0210 	bic.w	r2, r3, #16
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	4947      	ldr	r1, [pc, #284]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007744:	4313      	orrs	r3, r2
 8007746:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007754:	4b42      	ldr	r3, [pc, #264]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	493f      	ldr	r1, [pc, #252]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007762:	4313      	orrs	r3, r2
 8007764:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d008      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007772:	4b3b      	ldr	r3, [pc, #236]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f023 0220 	bic.w	r2, r3, #32
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	4938      	ldr	r1, [pc, #224]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007780:	4313      	orrs	r3, r2
 8007782:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007790:	4b33      	ldr	r3, [pc, #204]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	4930      	ldr	r1, [pc, #192]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d008      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80077ae:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	4929      	ldr	r1, [pc, #164]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d008      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077cc:	4b24      	ldr	r3, [pc, #144]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	4921      	ldr	r1, [pc, #132]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80077ea:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	491a      	ldr	r1, [pc, #104]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	4912      	ldr	r1, [pc, #72]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007816:	4313      	orrs	r3, r2
 8007818:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d008      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007826:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	490b      	ldr	r1, [pc, #44]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007834:	4313      	orrs	r3, r2
 8007836:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007844:	4b06      	ldr	r3, [pc, #24]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	4903      	ldr	r1, [pc, #12]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007852:	4313      	orrs	r3, r2
 8007854:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3748      	adds	r7, #72	; 0x48
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40021000 	.word	0x40021000

08007864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e049      	b.n	800790a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7f9 ff28 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3304      	adds	r3, #4
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f000 fe02 	bl	80084ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d001      	beq.n	800792c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e04a      	b.n	80079c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a21      	ldr	r2, [pc, #132]	; (80079d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d018      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0x6c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007956:	d013      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0x6c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0x6c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1c      	ldr	r2, [pc, #112]	; (80079d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0x6c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <HAL_TIM_Base_Start_IT+0xc8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0x6c>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a19      	ldr	r2, [pc, #100]	; (80079e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d115      	bne.n	80079ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	4b17      	ldr	r3, [pc, #92]	; (80079e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007988:	4013      	ands	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b06      	cmp	r3, #6
 8007990:	d015      	beq.n	80079be <HAL_TIM_Base_Start_IT+0xaa>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007998:	d011      	beq.n	80079be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0201 	orr.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079aa:	e008      	b.n	80079be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e000      	b.n	80079c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40012c00 	.word	0x40012c00
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40013400 	.word	0x40013400
 80079e0:	40014000 	.word	0x40014000
 80079e4:	00010007 	.word	0x00010007

080079e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e049      	b.n	8007a8e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7f9 fe46 	bl	80016a0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f000 fd40 	bl	80084ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e049      	b.n	8007b3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f841 	bl	8007b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f000 fce9 	bl	80084ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <HAL_TIM_PWM_Start+0x24>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	bf14      	ite	ne
 8007b74:	2301      	movne	r3, #1
 8007b76:	2300      	moveq	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	e03c      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x9e>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d109      	bne.n	8007b96 <HAL_TIM_PWM_Start+0x3e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	bf14      	ite	ne
 8007b8e:	2301      	movne	r3, #1
 8007b90:	2300      	moveq	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	e02f      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x9e>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d109      	bne.n	8007bb0 <HAL_TIM_PWM_Start+0x58>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	bf14      	ite	ne
 8007ba8:	2301      	movne	r3, #1
 8007baa:	2300      	moveq	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	e022      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x9e>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b0c      	cmp	r3, #12
 8007bb4:	d109      	bne.n	8007bca <HAL_TIM_PWM_Start+0x72>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	e015      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x9e>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d109      	bne.n	8007be4 <HAL_TIM_PWM_Start+0x8c>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	bf14      	ite	ne
 8007bdc:	2301      	movne	r3, #1
 8007bde:	2300      	moveq	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	e008      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x9e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	bf14      	ite	ne
 8007bf0:	2301      	movne	r3, #1
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e097      	b.n	8007d2e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <HAL_TIM_PWM_Start+0xb6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c0c:	e023      	b.n	8007c56 <HAL_TIM_PWM_Start+0xfe>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d104      	bne.n	8007c1e <HAL_TIM_PWM_Start+0xc6>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1c:	e01b      	b.n	8007c56 <HAL_TIM_PWM_Start+0xfe>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d104      	bne.n	8007c2e <HAL_TIM_PWM_Start+0xd6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c2c:	e013      	b.n	8007c56 <HAL_TIM_PWM_Start+0xfe>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b0c      	cmp	r3, #12
 8007c32:	d104      	bne.n	8007c3e <HAL_TIM_PWM_Start+0xe6>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c3c:	e00b      	b.n	8007c56 <HAL_TIM_PWM_Start+0xfe>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b10      	cmp	r3, #16
 8007c42:	d104      	bne.n	8007c4e <HAL_TIM_PWM_Start+0xf6>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c4c:	e003      	b.n	8007c56 <HAL_TIM_PWM_Start+0xfe>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f001 f824 	bl	8008cac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a33      	ldr	r2, [pc, #204]	; (8007d38 <HAL_TIM_PWM_Start+0x1e0>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d013      	beq.n	8007c96 <HAL_TIM_PWM_Start+0x13e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a32      	ldr	r2, [pc, #200]	; (8007d3c <HAL_TIM_PWM_Start+0x1e4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00e      	beq.n	8007c96 <HAL_TIM_PWM_Start+0x13e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a30      	ldr	r2, [pc, #192]	; (8007d40 <HAL_TIM_PWM_Start+0x1e8>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d009      	beq.n	8007c96 <HAL_TIM_PWM_Start+0x13e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a2f      	ldr	r2, [pc, #188]	; (8007d44 <HAL_TIM_PWM_Start+0x1ec>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_TIM_PWM_Start+0x13e>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2d      	ldr	r2, [pc, #180]	; (8007d48 <HAL_TIM_PWM_Start+0x1f0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d101      	bne.n	8007c9a <HAL_TIM_PWM_Start+0x142>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <HAL_TIM_PWM_Start+0x144>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a20      	ldr	r2, [pc, #128]	; (8007d38 <HAL_TIM_PWM_Start+0x1e0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d018      	beq.n	8007cec <HAL_TIM_PWM_Start+0x194>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc2:	d013      	beq.n	8007cec <HAL_TIM_PWM_Start+0x194>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <HAL_TIM_PWM_Start+0x1f4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00e      	beq.n	8007cec <HAL_TIM_PWM_Start+0x194>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <HAL_TIM_PWM_Start+0x1f8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d009      	beq.n	8007cec <HAL_TIM_PWM_Start+0x194>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a17      	ldr	r2, [pc, #92]	; (8007d3c <HAL_TIM_PWM_Start+0x1e4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_TIM_PWM_Start+0x194>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a16      	ldr	r2, [pc, #88]	; (8007d40 <HAL_TIM_PWM_Start+0x1e8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d115      	bne.n	8007d18 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <HAL_TIM_PWM_Start+0x1fc>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b06      	cmp	r3, #6
 8007cfc:	d015      	beq.n	8007d2a <HAL_TIM_PWM_Start+0x1d2>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d04:	d011      	beq.n	8007d2a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0201 	orr.w	r2, r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d16:	e008      	b.n	8007d2a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e000      	b.n	8007d2c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40012c00 	.word	0x40012c00
 8007d3c:	40013400 	.word	0x40013400
 8007d40:	40014000 	.word	0x40014000
 8007d44:	40014400 	.word	0x40014400
 8007d48:	40014800 	.word	0x40014800
 8007d4c:	40000400 	.word	0x40000400
 8007d50:	40000800 	.word	0x40000800
 8007d54:	00010007 	.word	0x00010007

08007d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d122      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d11b      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0202 	mvn.w	r2, #2
 8007d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fb67 	bl	800846e <HAL_TIM_IC_CaptureCallback>
 8007da0:	e005      	b.n	8007dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb59 	bl	800845a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fb6a 	bl	8008482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d122      	bne.n	8007e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d11b      	bne.n	8007e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0204 	mvn.w	r2, #4
 8007dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fb3d 	bl	800846e <HAL_TIM_IC_CaptureCallback>
 8007df4:	e005      	b.n	8007e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fb2f 	bl	800845a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fb40 	bl	8008482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d122      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d11b      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0208 	mvn.w	r2, #8
 8007e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2204      	movs	r2, #4
 8007e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb13 	bl	800846e <HAL_TIM_IC_CaptureCallback>
 8007e48:	e005      	b.n	8007e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fb05 	bl	800845a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb16 	bl	8008482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	d122      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d11b      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0210 	mvn.w	r2, #16
 8007e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2208      	movs	r2, #8
 8007e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fae9 	bl	800846e <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fadb 	bl	800845a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 faec 	bl	8008482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d10e      	bne.n	8007edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d107      	bne.n	8007edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0201 	mvn.w	r2, #1
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fab5 	bl	8008446 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee6:	2b80      	cmp	r3, #128	; 0x80
 8007ee8:	d10e      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef4:	2b80      	cmp	r3, #128	; 0x80
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f800 	bl	8008f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f16:	d10e      	bne.n	8007f36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f22:	2b80      	cmp	r3, #128	; 0x80
 8007f24:	d107      	bne.n	8007f36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fff3 	bl	8008f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b40      	cmp	r3, #64	; 0x40
 8007f42:	d10e      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d107      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fa9a 	bl	8008496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d10e      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d107      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f06f 0220 	mvn.w	r2, #32
 8007f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 ffb3 	bl	8008ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e066      	b.n	8008084 <HAL_TIM_OC_ConfigChannel+0xec>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b14      	cmp	r3, #20
 8007fc2:	d857      	bhi.n	8008074 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007fc4:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <HAL_TIM_OC_ConfigChannel+0x34>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08008021 	.word	0x08008021
 8007fd0:	08008075 	.word	0x08008075
 8007fd4:	08008075 	.word	0x08008075
 8007fd8:	08008075 	.word	0x08008075
 8007fdc:	0800802f 	.word	0x0800802f
 8007fe0:	08008075 	.word	0x08008075
 8007fe4:	08008075 	.word	0x08008075
 8007fe8:	08008075 	.word	0x08008075
 8007fec:	0800803d 	.word	0x0800803d
 8007ff0:	08008075 	.word	0x08008075
 8007ff4:	08008075 	.word	0x08008075
 8007ff8:	08008075 	.word	0x08008075
 8007ffc:	0800804b 	.word	0x0800804b
 8008000:	08008075 	.word	0x08008075
 8008004:	08008075 	.word	0x08008075
 8008008:	08008075 	.word	0x08008075
 800800c:	08008059 	.word	0x08008059
 8008010:	08008075 	.word	0x08008075
 8008014:	08008075 	.word	0x08008075
 8008018:	08008075 	.word	0x08008075
 800801c:	08008067 	.word	0x08008067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fad0 	bl	80085cc <TIM_OC1_SetConfig>
      break;
 800802c:	e025      	b.n	800807a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fb59 	bl	80086ec <TIM_OC2_SetConfig>
      break;
 800803a:	e01e      	b.n	800807a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fbdc 	bl	8008800 <TIM_OC3_SetConfig>
      break;
 8008048:	e017      	b.n	800807a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fc5d 	bl	8008910 <TIM_OC4_SetConfig>
      break;
 8008056:	e010      	b.n	800807a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fcc0 	bl	80089e4 <TIM_OC5_SetConfig>
      break;
 8008064:	e009      	b.n	800807a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	4618      	mov	r0, r3
 800806e:	f000 fd1d 	bl	8008aac <TIM_OC6_SetConfig>
      break;
 8008072:	e002      	b.n	800807a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
      break;
 8008078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e0ff      	b.n	80082aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b14      	cmp	r3, #20
 80080b6:	f200 80f0 	bhi.w	800829a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	08008115 	.word	0x08008115
 80080c4:	0800829b 	.word	0x0800829b
 80080c8:	0800829b 	.word	0x0800829b
 80080cc:	0800829b 	.word	0x0800829b
 80080d0:	08008155 	.word	0x08008155
 80080d4:	0800829b 	.word	0x0800829b
 80080d8:	0800829b 	.word	0x0800829b
 80080dc:	0800829b 	.word	0x0800829b
 80080e0:	08008197 	.word	0x08008197
 80080e4:	0800829b 	.word	0x0800829b
 80080e8:	0800829b 	.word	0x0800829b
 80080ec:	0800829b 	.word	0x0800829b
 80080f0:	080081d7 	.word	0x080081d7
 80080f4:	0800829b 	.word	0x0800829b
 80080f8:	0800829b 	.word	0x0800829b
 80080fc:	0800829b 	.word	0x0800829b
 8008100:	08008219 	.word	0x08008219
 8008104:	0800829b 	.word	0x0800829b
 8008108:	0800829b 	.word	0x0800829b
 800810c:	0800829b 	.word	0x0800829b
 8008110:	08008259 	.word	0x08008259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68b9      	ldr	r1, [r7, #8]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fa56 	bl	80085cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0208 	orr.w	r2, r2, #8
 800812e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0204 	bic.w	r2, r2, #4
 800813e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6999      	ldr	r1, [r3, #24]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	691a      	ldr	r2, [r3, #16]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	619a      	str	r2, [r3, #24]
      break;
 8008152:	e0a5      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fac6 	bl	80086ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800816e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800817e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6999      	ldr	r1, [r3, #24]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	021a      	lsls	r2, r3, #8
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	619a      	str	r2, [r3, #24]
      break;
 8008194:	e084      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fb2f 	bl	8008800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69da      	ldr	r2, [r3, #28]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0208 	orr.w	r2, r2, #8
 80081b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69da      	ldr	r2, [r3, #28]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0204 	bic.w	r2, r2, #4
 80081c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69d9      	ldr	r1, [r3, #28]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	61da      	str	r2, [r3, #28]
      break;
 80081d4:	e064      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fb97 	bl	8008910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69da      	ldr	r2, [r3, #28]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69d9      	ldr	r1, [r3, #28]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	021a      	lsls	r2, r3, #8
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	61da      	str	r2, [r3, #28]
      break;
 8008216:	e043      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fbe0 	bl	80089e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0208 	orr.w	r2, r2, #8
 8008232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0204 	bic.w	r2, r2, #4
 8008242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008256:	e023      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fc24 	bl	8008aac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	021a      	lsls	r2, r3, #8
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008298:	e002      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	75fb      	strb	r3, [r7, #23]
      break;
 800829e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop

080082b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_TIM_ConfigClockSource+0x1c>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e0b6      	b.n	800843e <HAL_TIM_ConfigClockSource+0x18a>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830c:	d03e      	beq.n	800838c <HAL_TIM_ConfigClockSource+0xd8>
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008312:	f200 8087 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x170>
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	f000 8086 	beq.w	800842a <HAL_TIM_ConfigClockSource+0x176>
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008322:	d87f      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
 8008324:	2b70      	cmp	r3, #112	; 0x70
 8008326:	d01a      	beq.n	800835e <HAL_TIM_ConfigClockSource+0xaa>
 8008328:	2b70      	cmp	r3, #112	; 0x70
 800832a:	d87b      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
 800832c:	2b60      	cmp	r3, #96	; 0x60
 800832e:	d050      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x11e>
 8008330:	2b60      	cmp	r3, #96	; 0x60
 8008332:	d877      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
 8008334:	2b50      	cmp	r3, #80	; 0x50
 8008336:	d03c      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0xfe>
 8008338:	2b50      	cmp	r3, #80	; 0x50
 800833a:	d873      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
 800833c:	2b40      	cmp	r3, #64	; 0x40
 800833e:	d058      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x13e>
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	d86f      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
 8008344:	2b30      	cmp	r3, #48	; 0x30
 8008346:	d064      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x15e>
 8008348:	2b30      	cmp	r3, #48	; 0x30
 800834a:	d86b      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
 800834c:	2b20      	cmp	r3, #32
 800834e:	d060      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x15e>
 8008350:	2b20      	cmp	r3, #32
 8008352:	d867      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d05c      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x15e>
 8008358:	2b10      	cmp	r3, #16
 800835a:	d05a      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x15e>
 800835c:	e062      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6899      	ldr	r1, [r3, #8]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f000 fc7d 	bl	8008c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	609a      	str	r2, [r3, #8]
      break;
 800838a:	e04f      	b.n	800842c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	6899      	ldr	r1, [r3, #8]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f000 fc66 	bl	8008c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ae:	609a      	str	r2, [r3, #8]
      break;
 80083b0:	e03c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6859      	ldr	r1, [r3, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	461a      	mov	r2, r3
 80083c0:	f000 fbda 	bl	8008b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2150      	movs	r1, #80	; 0x50
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fc33 	bl	8008c36 <TIM_ITRx_SetConfig>
      break;
 80083d0:	e02c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	461a      	mov	r2, r3
 80083e0:	f000 fbf9 	bl	8008bd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2160      	movs	r1, #96	; 0x60
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fc23 	bl	8008c36 <TIM_ITRx_SetConfig>
      break;
 80083f0:	e01c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	6859      	ldr	r1, [r3, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	461a      	mov	r2, r3
 8008400:	f000 fbba 	bl	8008b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2140      	movs	r1, #64	; 0x40
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fc13 	bl	8008c36 <TIM_ITRx_SetConfig>
      break;
 8008410:	e00c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f000 fc0a 	bl	8008c36 <TIM_ITRx_SetConfig>
      break;
 8008422:	e003      	b.n	800842c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
      break;
 8008428:	e000      	b.n	800842c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800842a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
	...

080084ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a3c      	ldr	r2, [pc, #240]	; (80085b0 <TIM_Base_SetConfig+0x104>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00f      	beq.n	80084e4 <TIM_Base_SetConfig+0x38>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ca:	d00b      	beq.n	80084e4 <TIM_Base_SetConfig+0x38>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a39      	ldr	r2, [pc, #228]	; (80085b4 <TIM_Base_SetConfig+0x108>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d007      	beq.n	80084e4 <TIM_Base_SetConfig+0x38>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a38      	ldr	r2, [pc, #224]	; (80085b8 <TIM_Base_SetConfig+0x10c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d003      	beq.n	80084e4 <TIM_Base_SetConfig+0x38>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a37      	ldr	r2, [pc, #220]	; (80085bc <TIM_Base_SetConfig+0x110>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d108      	bne.n	80084f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a2d      	ldr	r2, [pc, #180]	; (80085b0 <TIM_Base_SetConfig+0x104>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d01b      	beq.n	8008536 <TIM_Base_SetConfig+0x8a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008504:	d017      	beq.n	8008536 <TIM_Base_SetConfig+0x8a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a2a      	ldr	r2, [pc, #168]	; (80085b4 <TIM_Base_SetConfig+0x108>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d013      	beq.n	8008536 <TIM_Base_SetConfig+0x8a>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a29      	ldr	r2, [pc, #164]	; (80085b8 <TIM_Base_SetConfig+0x10c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00f      	beq.n	8008536 <TIM_Base_SetConfig+0x8a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a28      	ldr	r2, [pc, #160]	; (80085bc <TIM_Base_SetConfig+0x110>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00b      	beq.n	8008536 <TIM_Base_SetConfig+0x8a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a27      	ldr	r2, [pc, #156]	; (80085c0 <TIM_Base_SetConfig+0x114>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d007      	beq.n	8008536 <TIM_Base_SetConfig+0x8a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a26      	ldr	r2, [pc, #152]	; (80085c4 <TIM_Base_SetConfig+0x118>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d003      	beq.n	8008536 <TIM_Base_SetConfig+0x8a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a25      	ldr	r2, [pc, #148]	; (80085c8 <TIM_Base_SetConfig+0x11c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d108      	bne.n	8008548 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	4313      	orrs	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a10      	ldr	r2, [pc, #64]	; (80085b0 <TIM_Base_SetConfig+0x104>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00f      	beq.n	8008594 <TIM_Base_SetConfig+0xe8>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a11      	ldr	r2, [pc, #68]	; (80085bc <TIM_Base_SetConfig+0x110>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00b      	beq.n	8008594 <TIM_Base_SetConfig+0xe8>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a10      	ldr	r2, [pc, #64]	; (80085c0 <TIM_Base_SetConfig+0x114>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d007      	beq.n	8008594 <TIM_Base_SetConfig+0xe8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a0f      	ldr	r2, [pc, #60]	; (80085c4 <TIM_Base_SetConfig+0x118>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d003      	beq.n	8008594 <TIM_Base_SetConfig+0xe8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a0e      	ldr	r2, [pc, #56]	; (80085c8 <TIM_Base_SetConfig+0x11c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d103      	bne.n	800859c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	615a      	str	r2, [r3, #20]
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	40012c00 	.word	0x40012c00
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40013400 	.word	0x40013400
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40014400 	.word	0x40014400
 80085c8:	40014800 	.word	0x40014800

080085cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f023 0201 	bic.w	r2, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f023 0302 	bic.w	r3, r3, #2
 8008618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a2c      	ldr	r2, [pc, #176]	; (80086d8 <TIM_OC1_SetConfig+0x10c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d00f      	beq.n	800864c <TIM_OC1_SetConfig+0x80>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a2b      	ldr	r2, [pc, #172]	; (80086dc <TIM_OC1_SetConfig+0x110>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00b      	beq.n	800864c <TIM_OC1_SetConfig+0x80>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a2a      	ldr	r2, [pc, #168]	; (80086e0 <TIM_OC1_SetConfig+0x114>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d007      	beq.n	800864c <TIM_OC1_SetConfig+0x80>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a29      	ldr	r2, [pc, #164]	; (80086e4 <TIM_OC1_SetConfig+0x118>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d003      	beq.n	800864c <TIM_OC1_SetConfig+0x80>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a28      	ldr	r2, [pc, #160]	; (80086e8 <TIM_OC1_SetConfig+0x11c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d10c      	bne.n	8008666 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0308 	bic.w	r3, r3, #8
 8008652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f023 0304 	bic.w	r3, r3, #4
 8008664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a1b      	ldr	r2, [pc, #108]	; (80086d8 <TIM_OC1_SetConfig+0x10c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00f      	beq.n	800868e <TIM_OC1_SetConfig+0xc2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <TIM_OC1_SetConfig+0x110>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00b      	beq.n	800868e <TIM_OC1_SetConfig+0xc2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a19      	ldr	r2, [pc, #100]	; (80086e0 <TIM_OC1_SetConfig+0x114>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d007      	beq.n	800868e <TIM_OC1_SetConfig+0xc2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a18      	ldr	r2, [pc, #96]	; (80086e4 <TIM_OC1_SetConfig+0x118>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d003      	beq.n	800868e <TIM_OC1_SetConfig+0xc2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <TIM_OC1_SetConfig+0x11c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d111      	bne.n	80086b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800869c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	621a      	str	r2, [r3, #32]
}
 80086cc:	bf00      	nop
 80086ce:	371c      	adds	r7, #28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	40013400 	.word	0x40013400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800

080086ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f023 0210 	bic.w	r2, r3, #16
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f023 0320 	bic.w	r3, r3, #32
 800873a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a28      	ldr	r2, [pc, #160]	; (80087ec <TIM_OC2_SetConfig+0x100>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d003      	beq.n	8008758 <TIM_OC2_SetConfig+0x6c>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a27      	ldr	r2, [pc, #156]	; (80087f0 <TIM_OC2_SetConfig+0x104>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d10d      	bne.n	8008774 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800875e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	4313      	orrs	r3, r2
 800876a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a1d      	ldr	r2, [pc, #116]	; (80087ec <TIM_OC2_SetConfig+0x100>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00f      	beq.n	800879c <TIM_OC2_SetConfig+0xb0>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a1c      	ldr	r2, [pc, #112]	; (80087f0 <TIM_OC2_SetConfig+0x104>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d00b      	beq.n	800879c <TIM_OC2_SetConfig+0xb0>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a1b      	ldr	r2, [pc, #108]	; (80087f4 <TIM_OC2_SetConfig+0x108>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d007      	beq.n	800879c <TIM_OC2_SetConfig+0xb0>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a1a      	ldr	r2, [pc, #104]	; (80087f8 <TIM_OC2_SetConfig+0x10c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d003      	beq.n	800879c <TIM_OC2_SetConfig+0xb0>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a19      	ldr	r2, [pc, #100]	; (80087fc <TIM_OC2_SetConfig+0x110>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d113      	bne.n	80087c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087a2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087aa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	621a      	str	r2, [r3, #32]
}
 80087de:	bf00      	nop
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40012c00 	.word	0x40012c00
 80087f0:	40013400 	.word	0x40013400
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	40014800 	.word	0x40014800

08008800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0303 	bic.w	r3, r3, #3
 800883a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800884c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a27      	ldr	r2, [pc, #156]	; (80088fc <TIM_OC3_SetConfig+0xfc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d003      	beq.n	800886a <TIM_OC3_SetConfig+0x6a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a26      	ldr	r2, [pc, #152]	; (8008900 <TIM_OC3_SetConfig+0x100>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d10d      	bne.n	8008886 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008884:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <TIM_OC3_SetConfig+0xfc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00f      	beq.n	80088ae <TIM_OC3_SetConfig+0xae>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <TIM_OC3_SetConfig+0x100>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00b      	beq.n	80088ae <TIM_OC3_SetConfig+0xae>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <TIM_OC3_SetConfig+0x104>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d007      	beq.n	80088ae <TIM_OC3_SetConfig+0xae>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a19      	ldr	r2, [pc, #100]	; (8008908 <TIM_OC3_SetConfig+0x108>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d003      	beq.n	80088ae <TIM_OC3_SetConfig+0xae>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a18      	ldr	r2, [pc, #96]	; (800890c <TIM_OC3_SetConfig+0x10c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d113      	bne.n	80088d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	011b      	lsls	r3, r3, #4
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	621a      	str	r2, [r3, #32]
}
 80088f0:	bf00      	nop
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40013400 	.word	0x40013400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800

08008910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800893e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800894a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	021b      	lsls	r3, r3, #8
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800895e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	031b      	lsls	r3, r3, #12
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <TIM_OC4_SetConfig+0xc0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00f      	beq.n	8008994 <TIM_OC4_SetConfig+0x84>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <TIM_OC4_SetConfig+0xc4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d00b      	beq.n	8008994 <TIM_OC4_SetConfig+0x84>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <TIM_OC4_SetConfig+0xc8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d007      	beq.n	8008994 <TIM_OC4_SetConfig+0x84>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a15      	ldr	r2, [pc, #84]	; (80089dc <TIM_OC4_SetConfig+0xcc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d003      	beq.n	8008994 <TIM_OC4_SetConfig+0x84>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a14      	ldr	r2, [pc, #80]	; (80089e0 <TIM_OC4_SetConfig+0xd0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d109      	bne.n	80089a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800899a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	019b      	lsls	r3, r3, #6
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	40012c00 	.word	0x40012c00
 80089d4:	40013400 	.word	0x40013400
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40014400 	.word	0x40014400
 80089e0:	40014800 	.word	0x40014800

080089e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	041b      	lsls	r3, r3, #16
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a17      	ldr	r2, [pc, #92]	; (8008a98 <TIM_OC5_SetConfig+0xb4>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00f      	beq.n	8008a5e <TIM_OC5_SetConfig+0x7a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a16      	ldr	r2, [pc, #88]	; (8008a9c <TIM_OC5_SetConfig+0xb8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00b      	beq.n	8008a5e <TIM_OC5_SetConfig+0x7a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <TIM_OC5_SetConfig+0xbc>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d007      	beq.n	8008a5e <TIM_OC5_SetConfig+0x7a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a14      	ldr	r2, [pc, #80]	; (8008aa4 <TIM_OC5_SetConfig+0xc0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_OC5_SetConfig+0x7a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a13      	ldr	r2, [pc, #76]	; (8008aa8 <TIM_OC5_SetConfig+0xc4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d109      	bne.n	8008a72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	021b      	lsls	r3, r3, #8
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	621a      	str	r2, [r3, #32]
}
 8008a8c:	bf00      	nop
 8008a8e:	371c      	adds	r7, #28
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	40012c00 	.word	0x40012c00
 8008a9c:	40013400 	.word	0x40013400
 8008aa0:	40014000 	.word	0x40014000
 8008aa4:	40014400 	.word	0x40014400
 8008aa8:	40014800 	.word	0x40014800

08008aac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	051b      	lsls	r3, r3, #20
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a18      	ldr	r2, [pc, #96]	; (8008b64 <TIM_OC6_SetConfig+0xb8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00f      	beq.n	8008b28 <TIM_OC6_SetConfig+0x7c>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <TIM_OC6_SetConfig+0xbc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00b      	beq.n	8008b28 <TIM_OC6_SetConfig+0x7c>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <TIM_OC6_SetConfig+0xc0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d007      	beq.n	8008b28 <TIM_OC6_SetConfig+0x7c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a15      	ldr	r2, [pc, #84]	; (8008b70 <TIM_OC6_SetConfig+0xc4>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_OC6_SetConfig+0x7c>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <TIM_OC6_SetConfig+0xc8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d109      	bne.n	8008b3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	029b      	lsls	r3, r3, #10
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	621a      	str	r2, [r3, #32]
}
 8008b56:	bf00      	nop
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40012c00 	.word	0x40012c00
 8008b68:	40013400 	.word	0x40013400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40014400 	.word	0x40014400
 8008b74:	40014800 	.word	0x40014800

08008b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	f023 0201 	bic.w	r2, r3, #1
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	011b      	lsls	r3, r3, #4
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f023 030a 	bic.w	r3, r3, #10
 8008bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	621a      	str	r2, [r3, #32]
}
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b087      	sub	sp, #28
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	f023 0210 	bic.w	r2, r3, #16
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	031b      	lsls	r3, r3, #12
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	f043 0307 	orr.w	r3, r3, #7
 8008c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	609a      	str	r2, [r3, #8]
}
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	021a      	lsls	r2, r3, #8
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	609a      	str	r2, [r3, #8]
}
 8008ca0:	bf00      	nop
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f003 031f 	and.w	r3, r3, #31
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1a      	ldr	r2, [r3, #32]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	401a      	ands	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1a      	ldr	r2, [r3, #32]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f003 031f 	and.w	r3, r3, #31
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e063      	b.n	8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2b      	ldr	r2, [pc, #172]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d004      	beq.n	8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a2a      	ldr	r2, [pc, #168]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d108      	bne.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a1b      	ldr	r2, [pc, #108]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d018      	beq.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d82:	d013      	beq.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a18      	ldr	r2, [pc, #96]	; (8008dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00e      	beq.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d009      	beq.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a12      	ldr	r2, [pc, #72]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d004      	beq.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a13      	ldr	r2, [pc, #76]	; (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d10c      	bne.n	8008dc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008db2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40012c00 	.word	0x40012c00
 8008de8:	40013400 	.word	0x40013400
 8008dec:	40000400 	.word	0x40000400
 8008df0:	40000800 	.word	0x40000800
 8008df4:	40014000 	.word	0x40014000

08008df8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e065      	b.n	8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	041b      	lsls	r3, r3, #16
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a16      	ldr	r2, [pc, #88]	; (8008eec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d004      	beq.n	8008ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a14      	ldr	r2, [pc, #80]	; (8008ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d115      	bne.n	8008ece <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	051b      	lsls	r3, r3, #20
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	40012c00 	.word	0x40012c00
 8008ef0:	40013400 	.word	0x40013400

08008ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e040      	b.n	8008fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7f8 fc76 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2224      	movs	r2, #36	; 0x24
 8008f5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0201 	bic.w	r2, r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fc16 	bl	80097a0 <UART_SetConfig>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e022      	b.n	8008fc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fdde 	bl	8009b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0201 	orr.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fe65 	bl	8009c8c <UART_CheckIdleState>
 8008fc2:	4603      	mov	r3, r0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	; 0x28
 8008fd0:	af02      	add	r7, sp, #8
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	603b      	str	r3, [r7, #0]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	f040 8082 	bne.w	80090ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <HAL_UART_Transmit+0x26>
 8008fec:	88fb      	ldrh	r3, [r7, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e07a      	b.n	80090ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_UART_Transmit+0x38>
 8009000:	2302      	movs	r3, #2
 8009002:	e073      	b.n	80090ec <HAL_UART_Transmit+0x120>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2221      	movs	r2, #33	; 0x21
 8009018:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800901a:	f7fb f95b 	bl	80042d4 <HAL_GetTick>
 800901e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	88fa      	ldrh	r2, [r7, #6]
 8009024:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009038:	d108      	bne.n	800904c <HAL_UART_Transmit+0x80>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	61bb      	str	r3, [r7, #24]
 800904a:	e003      	b.n	8009054 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800905c:	e02d      	b.n	80090ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2200      	movs	r2, #0
 8009066:	2180      	movs	r1, #128	; 0x80
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fe58 	bl	8009d1e <UART_WaitOnFlagUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e039      	b.n	80090ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10b      	bne.n	8009096 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	881a      	ldrh	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800908a:	b292      	uxth	r2, r2
 800908c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	3302      	adds	r3, #2
 8009092:	61bb      	str	r3, [r7, #24]
 8009094:	e008      	b.n	80090a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	781a      	ldrb	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	b292      	uxth	r2, r2
 80090a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3301      	adds	r3, #1
 80090a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	3b01      	subs	r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1cb      	bne.n	800905e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2200      	movs	r2, #0
 80090ce:	2140      	movs	r1, #64	; 0x40
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 fe24 	bl	8009d1e <UART_WaitOnFlagUntilTimeout>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e005      	b.n	80090ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2220      	movs	r2, #32
 80090e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e000      	b.n	80090ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80090ea:	2302      	movs	r3, #2
  }
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08a      	sub	sp, #40	; 0x28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	4613      	mov	r3, r2
 8009100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009106:	2b20      	cmp	r3, #32
 8009108:	d13d      	bne.n	8009186 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <HAL_UART_Receive_IT+0x22>
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e036      	b.n	8009188 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_UART_Receive_IT+0x34>
 8009124:	2302      	movs	r3, #2
 8009126:	e02f      	b.n	8009188 <HAL_UART_Receive_IT+0x94>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d018      	beq.n	8009176 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	613b      	str	r3, [r7, #16]
   return(result);
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	623b      	str	r3, [r7, #32]
 8009164:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	69f9      	ldr	r1, [r7, #28]
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e6      	bne.n	8009144 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009176:	88fb      	ldrh	r3, [r7, #6]
 8009178:	461a      	mov	r2, r3
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 fe93 	bl	8009ea8 <UART_Start_Receive_IT>
 8009182:	4603      	mov	r3, r0
 8009184:	e000      	b.n	8009188 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009186:	2302      	movs	r3, #2
  }
}
 8009188:	4618      	mov	r0, r3
 800918a:	3728      	adds	r7, #40	; 0x28
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b0ba      	sub	sp, #232	; 0xe8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80091be:	4013      	ands	r3, r2
 80091c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80091c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d115      	bne.n	80091f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80091cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00f      	beq.n	80091f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091dc:	f003 0320 	and.w	r3, r3, #32
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 82a3 	beq.w	8009734 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	4798      	blx	r3
      }
      return;
 80091f6:	e29d      	b.n	8009734 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8117 	beq.w	8009430 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d106      	bne.n	800921c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800920e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009212:	4b85      	ldr	r3, [pc, #532]	; (8009428 <HAL_UART_IRQHandler+0x298>)
 8009214:	4013      	ands	r3, r2
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 810a 	beq.w	8009430 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800921c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d011      	beq.n	800924c <HAL_UART_IRQHandler+0xbc>
 8009228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800922c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2201      	movs	r2, #1
 800923a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009242:	f043 0201 	orr.w	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800924c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d011      	beq.n	800927c <HAL_UART_IRQHandler+0xec>
 8009258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00b      	beq.n	800927c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2202      	movs	r2, #2
 800926a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009272:	f043 0204 	orr.w	r2, r3, #4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800927c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009280:	f003 0304 	and.w	r3, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d011      	beq.n	80092ac <HAL_UART_IRQHandler+0x11c>
 8009288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2204      	movs	r2, #4
 800929a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a2:	f043 0202 	orr.w	r2, r3, #2
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d017      	beq.n	80092e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d105      	bne.n	80092d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80092c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00b      	beq.n	80092e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2208      	movs	r2, #8
 80092d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092de:	f043 0208 	orr.w	r2, r3, #8
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d012      	beq.n	800931a <HAL_UART_IRQHandler+0x18a>
 80092f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00c      	beq.n	800931a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009310:	f043 0220 	orr.w	r2, r3, #32
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8209 	beq.w	8009738 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00d      	beq.n	800934e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d007      	beq.n	800934e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009362:	2b40      	cmp	r3, #64	; 0x40
 8009364:	d005      	beq.n	8009372 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800936a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800936e:	2b00      	cmp	r3, #0
 8009370:	d04f      	beq.n	8009412 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fe30 	bl	8009fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009382:	2b40      	cmp	r3, #64	; 0x40
 8009384:	d141      	bne.n	800940a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3308      	adds	r3, #8
 800938c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800939c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3308      	adds	r3, #8
 80093ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1d9      	bne.n	8009386 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d013      	beq.n	8009402 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	4a13      	ldr	r2, [pc, #76]	; (800942c <HAL_UART_IRQHandler+0x29c>)
 80093e0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fc fb24 	bl	8005a34 <HAL_DMA_Abort_IT>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d017      	beq.n	8009422 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009400:	e00f      	b.n	8009422 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f9b6 	bl	8009774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009408:	e00b      	b.n	8009422 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f9b2 	bl	8009774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009410:	e007      	b.n	8009422 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f9ae 	bl	8009774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009420:	e18a      	b.n	8009738 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009422:	bf00      	nop
    return;
 8009424:	e188      	b.n	8009738 <HAL_UART_IRQHandler+0x5a8>
 8009426:	bf00      	nop
 8009428:	04000120 	.word	0x04000120
 800942c:	0800a09f 	.word	0x0800a09f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009434:	2b01      	cmp	r3, #1
 8009436:	f040 8143 	bne.w	80096c0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800943a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 813c 	beq.w	80096c0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800944c:	f003 0310 	and.w	r3, r3, #16
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8135 	beq.w	80096c0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2210      	movs	r2, #16
 800945c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	f040 80b1 	bne.w	80095d0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800947a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 815c 	beq.w	800973c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800948a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800948e:	429a      	cmp	r2, r3
 8009490:	f080 8154 	bcs.w	800973c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800949a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	f000 8085 	beq.w	80095b4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094d8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1da      	bne.n	80094aa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3308      	adds	r3, #8
 80094fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094fe:	e853 3f00 	ldrex	r3, [r3]
 8009502:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009506:	f023 0301 	bic.w	r3, r3, #1
 800950a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009518:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800951c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009520:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800952a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e1      	bne.n	80094f4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3308      	adds	r3, #8
 8009536:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3308      	adds	r3, #8
 8009550:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009554:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800955a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e3      	bne.n	8009530 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2220      	movs	r2, #32
 800956c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009584:	f023 0310 	bic.w	r3, r3, #16
 8009588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009596:	65bb      	str	r3, [r7, #88]	; 0x58
 8009598:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800959c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e4      	bne.n	8009574 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fc fa07 	bl	80059c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f8dd 	bl	8009788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095ce:	e0b5      	b.n	800973c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095dc:	b29b      	uxth	r3, r3
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 80a7 	beq.w	8009740 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80095f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 80a2 	beq.w	8009740 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	461a      	mov	r2, r3
 800961a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800961e:	647b      	str	r3, [r7, #68]	; 0x44
 8009620:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800962c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e4      	bne.n	80095fc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3308      	adds	r3, #8
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	623b      	str	r3, [r7, #32]
   return(result);
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	f023 0301 	bic.w	r3, r3, #1
 8009648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009656:	633a      	str	r2, [r7, #48]	; 0x30
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800965c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e3      	bne.n	8009632 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	60fb      	str	r3, [r7, #12]
   return(result);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 0310 	bic.w	r3, r3, #16
 8009690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	461a      	mov	r2, r3
 800969a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800969e:	61fb      	str	r3, [r7, #28]
 80096a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	617b      	str	r3, [r7, #20]
   return(result);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e4      	bne.n	800967c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f865 	bl	8009788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096be:	e03f      	b.n	8009740 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00e      	beq.n	80096ea <HAL_UART_IRQHandler+0x55a>
 80096cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d008      	beq.n	80096ea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fe77 	bl	800a3d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096e8:	e02d      	b.n	8009746 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00e      	beq.n	8009714 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d008      	beq.n	8009714 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009706:	2b00      	cmp	r3, #0
 8009708:	d01c      	beq.n	8009744 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
    }
    return;
 8009712:	e017      	b.n	8009744 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d012      	beq.n	8009746 <HAL_UART_IRQHandler+0x5b6>
 8009720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00c      	beq.n	8009746 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fccc 	bl	800a0ca <UART_EndTransmit_IT>
    return;
 8009732:	e008      	b.n	8009746 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009734:	bf00      	nop
 8009736:	e006      	b.n	8009746 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009738:	bf00      	nop
 800973a:	e004      	b.n	8009746 <HAL_UART_IRQHandler+0x5b6>
      return;
 800973c:	bf00      	nop
 800973e:	e002      	b.n	8009746 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009744:	bf00      	nop
  }

}
 8009746:	37e8      	adds	r7, #232	; 0xe8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80097ce:	f023 030c 	bic.w	r3, r3, #12
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	6979      	ldr	r1, [r7, #20]
 80097d8:	430b      	orrs	r3, r1
 80097da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	430a      	orrs	r2, r1
 8009814:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4aae      	ldr	r2, [pc, #696]	; (8009ad4 <UART_SetConfig+0x334>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d120      	bne.n	8009862 <UART_SetConfig+0xc2>
 8009820:	4bad      	ldr	r3, [pc, #692]	; (8009ad8 <UART_SetConfig+0x338>)
 8009822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009824:	f003 0303 	and.w	r3, r3, #3
 8009828:	2b03      	cmp	r3, #3
 800982a:	d817      	bhi.n	800985c <UART_SetConfig+0xbc>
 800982c:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <UART_SetConfig+0x94>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	08009845 	.word	0x08009845
 8009838:	08009851 	.word	0x08009851
 800983c:	08009857 	.word	0x08009857
 8009840:	0800984b 	.word	0x0800984b
 8009844:	2301      	movs	r3, #1
 8009846:	77fb      	strb	r3, [r7, #31]
 8009848:	e0b5      	b.n	80099b6 <UART_SetConfig+0x216>
 800984a:	2302      	movs	r3, #2
 800984c:	77fb      	strb	r3, [r7, #31]
 800984e:	e0b2      	b.n	80099b6 <UART_SetConfig+0x216>
 8009850:	2304      	movs	r3, #4
 8009852:	77fb      	strb	r3, [r7, #31]
 8009854:	e0af      	b.n	80099b6 <UART_SetConfig+0x216>
 8009856:	2308      	movs	r3, #8
 8009858:	77fb      	strb	r3, [r7, #31]
 800985a:	e0ac      	b.n	80099b6 <UART_SetConfig+0x216>
 800985c:	2310      	movs	r3, #16
 800985e:	77fb      	strb	r3, [r7, #31]
 8009860:	e0a9      	b.n	80099b6 <UART_SetConfig+0x216>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a9d      	ldr	r2, [pc, #628]	; (8009adc <UART_SetConfig+0x33c>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d124      	bne.n	80098b6 <UART_SetConfig+0x116>
 800986c:	4b9a      	ldr	r3, [pc, #616]	; (8009ad8 <UART_SetConfig+0x338>)
 800986e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009874:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009878:	d011      	beq.n	800989e <UART_SetConfig+0xfe>
 800987a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800987e:	d817      	bhi.n	80098b0 <UART_SetConfig+0x110>
 8009880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009884:	d011      	beq.n	80098aa <UART_SetConfig+0x10a>
 8009886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800988a:	d811      	bhi.n	80098b0 <UART_SetConfig+0x110>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <UART_SetConfig+0xf8>
 8009890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009894:	d006      	beq.n	80098a4 <UART_SetConfig+0x104>
 8009896:	e00b      	b.n	80098b0 <UART_SetConfig+0x110>
 8009898:	2300      	movs	r3, #0
 800989a:	77fb      	strb	r3, [r7, #31]
 800989c:	e08b      	b.n	80099b6 <UART_SetConfig+0x216>
 800989e:	2302      	movs	r3, #2
 80098a0:	77fb      	strb	r3, [r7, #31]
 80098a2:	e088      	b.n	80099b6 <UART_SetConfig+0x216>
 80098a4:	2304      	movs	r3, #4
 80098a6:	77fb      	strb	r3, [r7, #31]
 80098a8:	e085      	b.n	80099b6 <UART_SetConfig+0x216>
 80098aa:	2308      	movs	r3, #8
 80098ac:	77fb      	strb	r3, [r7, #31]
 80098ae:	e082      	b.n	80099b6 <UART_SetConfig+0x216>
 80098b0:	2310      	movs	r3, #16
 80098b2:	77fb      	strb	r3, [r7, #31]
 80098b4:	e07f      	b.n	80099b6 <UART_SetConfig+0x216>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a89      	ldr	r2, [pc, #548]	; (8009ae0 <UART_SetConfig+0x340>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d124      	bne.n	800990a <UART_SetConfig+0x16a>
 80098c0:	4b85      	ldr	r3, [pc, #532]	; (8009ad8 <UART_SetConfig+0x338>)
 80098c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80098c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80098cc:	d011      	beq.n	80098f2 <UART_SetConfig+0x152>
 80098ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80098d2:	d817      	bhi.n	8009904 <UART_SetConfig+0x164>
 80098d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098d8:	d011      	beq.n	80098fe <UART_SetConfig+0x15e>
 80098da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098de:	d811      	bhi.n	8009904 <UART_SetConfig+0x164>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <UART_SetConfig+0x14c>
 80098e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098e8:	d006      	beq.n	80098f8 <UART_SetConfig+0x158>
 80098ea:	e00b      	b.n	8009904 <UART_SetConfig+0x164>
 80098ec:	2300      	movs	r3, #0
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e061      	b.n	80099b6 <UART_SetConfig+0x216>
 80098f2:	2302      	movs	r3, #2
 80098f4:	77fb      	strb	r3, [r7, #31]
 80098f6:	e05e      	b.n	80099b6 <UART_SetConfig+0x216>
 80098f8:	2304      	movs	r3, #4
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e05b      	b.n	80099b6 <UART_SetConfig+0x216>
 80098fe:	2308      	movs	r3, #8
 8009900:	77fb      	strb	r3, [r7, #31]
 8009902:	e058      	b.n	80099b6 <UART_SetConfig+0x216>
 8009904:	2310      	movs	r3, #16
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e055      	b.n	80099b6 <UART_SetConfig+0x216>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a75      	ldr	r2, [pc, #468]	; (8009ae4 <UART_SetConfig+0x344>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d124      	bne.n	800995e <UART_SetConfig+0x1be>
 8009914:	4b70      	ldr	r3, [pc, #448]	; (8009ad8 <UART_SetConfig+0x338>)
 8009916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009918:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800991c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009920:	d011      	beq.n	8009946 <UART_SetConfig+0x1a6>
 8009922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009926:	d817      	bhi.n	8009958 <UART_SetConfig+0x1b8>
 8009928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800992c:	d011      	beq.n	8009952 <UART_SetConfig+0x1b2>
 800992e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009932:	d811      	bhi.n	8009958 <UART_SetConfig+0x1b8>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d003      	beq.n	8009940 <UART_SetConfig+0x1a0>
 8009938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800993c:	d006      	beq.n	800994c <UART_SetConfig+0x1ac>
 800993e:	e00b      	b.n	8009958 <UART_SetConfig+0x1b8>
 8009940:	2300      	movs	r3, #0
 8009942:	77fb      	strb	r3, [r7, #31]
 8009944:	e037      	b.n	80099b6 <UART_SetConfig+0x216>
 8009946:	2302      	movs	r3, #2
 8009948:	77fb      	strb	r3, [r7, #31]
 800994a:	e034      	b.n	80099b6 <UART_SetConfig+0x216>
 800994c:	2304      	movs	r3, #4
 800994e:	77fb      	strb	r3, [r7, #31]
 8009950:	e031      	b.n	80099b6 <UART_SetConfig+0x216>
 8009952:	2308      	movs	r3, #8
 8009954:	77fb      	strb	r3, [r7, #31]
 8009956:	e02e      	b.n	80099b6 <UART_SetConfig+0x216>
 8009958:	2310      	movs	r3, #16
 800995a:	77fb      	strb	r3, [r7, #31]
 800995c:	e02b      	b.n	80099b6 <UART_SetConfig+0x216>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a61      	ldr	r2, [pc, #388]	; (8009ae8 <UART_SetConfig+0x348>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d124      	bne.n	80099b2 <UART_SetConfig+0x212>
 8009968:	4b5b      	ldr	r3, [pc, #364]	; (8009ad8 <UART_SetConfig+0x338>)
 800996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009970:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009974:	d011      	beq.n	800999a <UART_SetConfig+0x1fa>
 8009976:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800997a:	d817      	bhi.n	80099ac <UART_SetConfig+0x20c>
 800997c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009980:	d011      	beq.n	80099a6 <UART_SetConfig+0x206>
 8009982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009986:	d811      	bhi.n	80099ac <UART_SetConfig+0x20c>
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <UART_SetConfig+0x1f4>
 800998c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009990:	d006      	beq.n	80099a0 <UART_SetConfig+0x200>
 8009992:	e00b      	b.n	80099ac <UART_SetConfig+0x20c>
 8009994:	2300      	movs	r3, #0
 8009996:	77fb      	strb	r3, [r7, #31]
 8009998:	e00d      	b.n	80099b6 <UART_SetConfig+0x216>
 800999a:	2302      	movs	r3, #2
 800999c:	77fb      	strb	r3, [r7, #31]
 800999e:	e00a      	b.n	80099b6 <UART_SetConfig+0x216>
 80099a0:	2304      	movs	r3, #4
 80099a2:	77fb      	strb	r3, [r7, #31]
 80099a4:	e007      	b.n	80099b6 <UART_SetConfig+0x216>
 80099a6:	2308      	movs	r3, #8
 80099a8:	77fb      	strb	r3, [r7, #31]
 80099aa:	e004      	b.n	80099b6 <UART_SetConfig+0x216>
 80099ac:	2310      	movs	r3, #16
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e001      	b.n	80099b6 <UART_SetConfig+0x216>
 80099b2:	2310      	movs	r3, #16
 80099b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099be:	d15c      	bne.n	8009a7a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80099c0:	7ffb      	ldrb	r3, [r7, #31]
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d827      	bhi.n	8009a16 <UART_SetConfig+0x276>
 80099c6:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0x22c>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	080099f9 	.word	0x080099f9
 80099d4:	08009a01 	.word	0x08009a01
 80099d8:	08009a17 	.word	0x08009a17
 80099dc:	08009a07 	.word	0x08009a07
 80099e0:	08009a17 	.word	0x08009a17
 80099e4:	08009a17 	.word	0x08009a17
 80099e8:	08009a17 	.word	0x08009a17
 80099ec:	08009a0f 	.word	0x08009a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099f0:	f7fd fd44 	bl	800747c <HAL_RCC_GetPCLK1Freq>
 80099f4:	61b8      	str	r0, [r7, #24]
        break;
 80099f6:	e013      	b.n	8009a20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099f8:	f7fd fd62 	bl	80074c0 <HAL_RCC_GetPCLK2Freq>
 80099fc:	61b8      	str	r0, [r7, #24]
        break;
 80099fe:	e00f      	b.n	8009a20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a00:	4b3a      	ldr	r3, [pc, #232]	; (8009aec <UART_SetConfig+0x34c>)
 8009a02:	61bb      	str	r3, [r7, #24]
        break;
 8009a04:	e00c      	b.n	8009a20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a06:	f7fd fcc3 	bl	8007390 <HAL_RCC_GetSysClockFreq>
 8009a0a:	61b8      	str	r0, [r7, #24]
        break;
 8009a0c:	e008      	b.n	8009a20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a12:	61bb      	str	r3, [r7, #24]
        break;
 8009a14:	e004      	b.n	8009a20 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	77bb      	strb	r3, [r7, #30]
        break;
 8009a1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 8085 	beq.w	8009b32 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	005a      	lsls	r2, r3, #1
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	085b      	lsrs	r3, r3, #1
 8009a32:	441a      	add	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2b0f      	cmp	r3, #15
 8009a44:	d916      	bls.n	8009a74 <UART_SetConfig+0x2d4>
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4c:	d212      	bcs.n	8009a74 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	f023 030f 	bic.w	r3, r3, #15
 8009a56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	085b      	lsrs	r3, r3, #1
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	f003 0307 	and.w	r3, r3, #7
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	89fb      	ldrh	r3, [r7, #14]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	89fa      	ldrh	r2, [r7, #14]
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e05e      	b.n	8009b32 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	77bb      	strb	r3, [r7, #30]
 8009a78:	e05b      	b.n	8009b32 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a7a:	7ffb      	ldrb	r3, [r7, #31]
 8009a7c:	2b08      	cmp	r3, #8
 8009a7e:	d837      	bhi.n	8009af0 <UART_SetConfig+0x350>
 8009a80:	a201      	add	r2, pc, #4	; (adr r2, 8009a88 <UART_SetConfig+0x2e8>)
 8009a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a86:	bf00      	nop
 8009a88:	08009aad 	.word	0x08009aad
 8009a8c:	08009ab5 	.word	0x08009ab5
 8009a90:	08009abd 	.word	0x08009abd
 8009a94:	08009af1 	.word	0x08009af1
 8009a98:	08009ac3 	.word	0x08009ac3
 8009a9c:	08009af1 	.word	0x08009af1
 8009aa0:	08009af1 	.word	0x08009af1
 8009aa4:	08009af1 	.word	0x08009af1
 8009aa8:	08009acb 	.word	0x08009acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aac:	f7fd fce6 	bl	800747c <HAL_RCC_GetPCLK1Freq>
 8009ab0:	61b8      	str	r0, [r7, #24]
        break;
 8009ab2:	e022      	b.n	8009afa <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ab4:	f7fd fd04 	bl	80074c0 <HAL_RCC_GetPCLK2Freq>
 8009ab8:	61b8      	str	r0, [r7, #24]
        break;
 8009aba:	e01e      	b.n	8009afa <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009abc:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <UART_SetConfig+0x34c>)
 8009abe:	61bb      	str	r3, [r7, #24]
        break;
 8009ac0:	e01b      	b.n	8009afa <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ac2:	f7fd fc65 	bl	8007390 <HAL_RCC_GetSysClockFreq>
 8009ac6:	61b8      	str	r0, [r7, #24]
        break;
 8009ac8:	e017      	b.n	8009afa <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ace:	61bb      	str	r3, [r7, #24]
        break;
 8009ad0:	e013      	b.n	8009afa <UART_SetConfig+0x35a>
 8009ad2:	bf00      	nop
 8009ad4:	40013800 	.word	0x40013800
 8009ad8:	40021000 	.word	0x40021000
 8009adc:	40004400 	.word	0x40004400
 8009ae0:	40004800 	.word	0x40004800
 8009ae4:	40004c00 	.word	0x40004c00
 8009ae8:	40005000 	.word	0x40005000
 8009aec:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	77bb      	strb	r3, [r7, #30]
        break;
 8009af8:	bf00      	nop
    }

    if (pclk != 0U)
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d018      	beq.n	8009b32 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	085a      	lsrs	r2, r3, #1
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	441a      	add	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b0f      	cmp	r3, #15
 8009b1a:	d908      	bls.n	8009b2e <UART_SetConfig+0x38e>
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b22:	d204      	bcs.n	8009b2e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	60da      	str	r2, [r3, #12]
 8009b2c:	e001      	b.n	8009b32 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009b3e:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3720      	adds	r7, #32
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00a      	beq.n	8009b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	f003 0302 	and.w	r3, r3, #2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00a      	beq.n	8009b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00a      	beq.n	8009bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	f003 0308 	and.w	r3, r3, #8
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00a      	beq.n	8009bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	f003 0310 	and.w	r3, r3, #16
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00a      	beq.n	8009bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01a      	beq.n	8009c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c46:	d10a      	bne.n	8009c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	605a      	str	r2, [r3, #4]
  }
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c9c:	f7fa fb1a 	bl	80042d4 <HAL_GetTick>
 8009ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d10e      	bne.n	8009cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f82d 	bl	8009d1e <UART_WaitOnFlagUntilTimeout>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e023      	b.n	8009d16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d10e      	bne.n	8009cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f817 	bl	8009d1e <UART_WaitOnFlagUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e00d      	b.n	8009d16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b09c      	sub	sp, #112	; 0x70
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	603b      	str	r3, [r7, #0]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d2e:	e0a5      	b.n	8009e7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d36:	f000 80a1 	beq.w	8009e7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d3a:	f7fa facb 	bl	80042d4 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d302      	bcc.n	8009d50 <UART_WaitOnFlagUntilTimeout+0x32>
 8009d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d13e      	bne.n	8009dce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d64:	667b      	str	r3, [r7, #100]	; 0x64
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e6      	bne.n	8009d50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3308      	adds	r3, #8
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d94:	f023 0301 	bic.w	r3, r3, #1
 8009d98:	663b      	str	r3, [r7, #96]	; 0x60
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3308      	adds	r3, #8
 8009da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009da2:	64ba      	str	r2, [r7, #72]	; 0x48
 8009da4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e5      	bne.n	8009d82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e067      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d04f      	beq.n	8009e7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dea:	d147      	bne.n	8009e7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009df4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
 8009e16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e6      	bne.n	8009df6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	e853 3f00 	ldrex	r3, [r3]
 8009e36:	613b      	str	r3, [r7, #16]
   return(result);
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f023 0301 	bic.w	r3, r3, #1
 8009e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3308      	adds	r3, #8
 8009e46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e48:	623a      	str	r2, [r7, #32]
 8009e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4c:	69f9      	ldr	r1, [r7, #28]
 8009e4e:	6a3a      	ldr	r2, [r7, #32]
 8009e50:	e841 2300 	strex	r3, r2, [r1]
 8009e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1e5      	bne.n	8009e28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2220      	movs	r2, #32
 8009e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e010      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	69da      	ldr	r2, [r3, #28]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	4013      	ands	r3, r2
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	bf0c      	ite	eq
 8009e8c:	2301      	moveq	r3, #1
 8009e8e:	2300      	movne	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	79fb      	ldrb	r3, [r7, #7]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	f43f af4a 	beq.w	8009d30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3770      	adds	r7, #112	; 0x70
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b091      	sub	sp, #68	; 0x44
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	88fa      	ldrh	r2, [r7, #6]
 8009ec0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	88fa      	ldrh	r2, [r7, #6]
 8009ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eda:	d10e      	bne.n	8009efa <UART_Start_Receive_IT+0x52>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d105      	bne.n	8009ef0 <UART_Start_Receive_IT+0x48>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009eea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009eee:	e01a      	b.n	8009f26 <UART_Start_Receive_IT+0x7e>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	22ff      	movs	r2, #255	; 0xff
 8009ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ef8:	e015      	b.n	8009f26 <UART_Start_Receive_IT+0x7e>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10d      	bne.n	8009f1e <UART_Start_Receive_IT+0x76>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <UART_Start_Receive_IT+0x6c>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	22ff      	movs	r2, #255	; 0xff
 8009f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f12:	e008      	b.n	8009f26 <UART_Start_Receive_IT+0x7e>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	227f      	movs	r2, #127	; 0x7f
 8009f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f1c:	e003      	b.n	8009f26 <UART_Start_Receive_IT+0x7e>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2222      	movs	r2, #34	; 0x22
 8009f32:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3308      	adds	r3, #8
 8009f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3308      	adds	r3, #8
 8009f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f54:	637a      	str	r2, [r7, #52]	; 0x34
 8009f56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e5      	bne.n	8009f34 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f70:	d107      	bne.n	8009f82 <UART_Start_Receive_IT+0xda>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4a14      	ldr	r2, [pc, #80]	; (8009fd0 <UART_Start_Receive_IT+0x128>)
 8009f7e:	665a      	str	r2, [r3, #100]	; 0x64
 8009f80:	e002      	b.n	8009f88 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4a13      	ldr	r2, [pc, #76]	; (8009fd4 <UART_Start_Receive_IT+0x12c>)
 8009f86:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	e853 3f00 	ldrex	r3, [r3]
 8009f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	623b      	str	r3, [r7, #32]
 8009fb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb2:	69f9      	ldr	r1, [r7, #28]
 8009fb4:	6a3a      	ldr	r2, [r7, #32]
 8009fb6:	e841 2300 	strex	r3, r2, [r1]
 8009fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e6      	bne.n	8009f90 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3744      	adds	r7, #68	; 0x44
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	0800a27b 	.word	0x0800a27b
 8009fd4:	0800a11f 	.word	0x0800a11f

08009fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b095      	sub	sp, #84	; 0x54
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ffe:	643b      	str	r3, [r7, #64]	; 0x40
 800a000:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e6      	bne.n	8009fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3308      	adds	r3, #8
 800a018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	61fb      	str	r3, [r7, #28]
   return(result);
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	f023 0301 	bic.w	r3, r3, #1
 800a028:	64bb      	str	r3, [r7, #72]	; 0x48
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3308      	adds	r3, #8
 800a030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a032:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a03a:	e841 2300 	strex	r3, r2, [r1]
 800a03e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e5      	bne.n	800a012 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d118      	bne.n	800a080 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	e853 3f00 	ldrex	r3, [r3]
 800a05a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	f023 0310 	bic.w	r3, r3, #16
 800a062:	647b      	str	r3, [r7, #68]	; 0x44
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	461a      	mov	r2, r3
 800a06a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a06c:	61bb      	str	r3, [r7, #24]
 800a06e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	6979      	ldr	r1, [r7, #20]
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	e841 2300 	strex	r3, r2, [r1]
 800a078:	613b      	str	r3, [r7, #16]
   return(result);
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e6      	bne.n	800a04e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2220      	movs	r2, #32
 800a084:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a092:	bf00      	nop
 800a094:	3754      	adds	r7, #84	; 0x54
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f7ff fb59 	bl	8009774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b088      	sub	sp, #32
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	61bb      	str	r3, [r7, #24]
 800a0f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6979      	ldr	r1, [r7, #20]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	e841 2300 	strex	r3, r2, [r1]
 800a0fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1e6      	bne.n	800a0d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2220      	movs	r2, #32
 800a108:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fb1b 	bl	800974c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a116:	bf00      	nop
 800a118:	3720      	adds	r7, #32
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b096      	sub	sp, #88	; 0x58
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a12c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a134:	2b22      	cmp	r3, #34	; 0x22
 800a136:	f040 8094 	bne.w	800a262 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a140:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a144:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a148:	b2d9      	uxtb	r1, r3
 800a14a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a154:	400a      	ands	r2, r1
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d177      	bne.n	800a272 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a196:	653b      	str	r3, [r7, #80]	; 0x50
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a0:	647b      	str	r3, [r7, #68]	; 0x44
 800a1a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e6      	bne.n	800a182 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	f023 0301 	bic.w	r3, r3, #1
 800a1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1d4:	633a      	str	r2, [r7, #48]	; 0x30
 800a1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e5      	bne.n	800a1b4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d12e      	bne.n	800a25a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0310 	bic.w	r3, r3, #16
 800a216:	64bb      	str	r3, [r7, #72]	; 0x48
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a224:	69b9      	ldr	r1, [r7, #24]
 800a226:	69fa      	ldr	r2, [r7, #28]
 800a228:	e841 2300 	strex	r3, r2, [r1]
 800a22c:	617b      	str	r3, [r7, #20]
   return(result);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e6      	bne.n	800a202 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	f003 0310 	and.w	r3, r3, #16
 800a23e:	2b10      	cmp	r3, #16
 800a240:	d103      	bne.n	800a24a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2210      	movs	r2, #16
 800a248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff fa98 	bl	8009788 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a258:	e00b      	b.n	800a272 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fa80 	bl	8009760 <HAL_UART_RxCpltCallback>
}
 800a260:	e007      	b.n	800a272 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	699a      	ldr	r2, [r3, #24]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f042 0208 	orr.w	r2, r2, #8
 800a270:	619a      	str	r2, [r3, #24]
}
 800a272:	bf00      	nop
 800a274:	3758      	adds	r7, #88	; 0x58
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b096      	sub	sp, #88	; 0x58
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a290:	2b22      	cmp	r3, #34	; 0x22
 800a292:	f040 8094 	bne.w	800a3be <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a29c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2a6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a2aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ba:	1c9a      	adds	r2, r3, #2
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d177      	bne.n	800a3ce <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e6      	bne.n	800a2de <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3308      	adds	r3, #8
 800a316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	f023 0301 	bic.w	r3, r3, #1
 800a326:	64bb      	str	r3, [r7, #72]	; 0x48
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3308      	adds	r3, #8
 800a32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a330:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a338:	e841 2300 	strex	r3, r2, [r1]
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e5      	bne.n	800a310 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2220      	movs	r2, #32
 800a348:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a354:	2b01      	cmp	r3, #1
 800a356:	d12e      	bne.n	800a3b6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f023 0310 	bic.w	r3, r3, #16
 800a372:	647b      	str	r3, [r7, #68]	; 0x44
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6979      	ldr	r1, [r7, #20]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	613b      	str	r3, [r7, #16]
   return(result);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e6      	bne.n	800a35e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	d103      	bne.n	800a3a6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff f9ea 	bl	8009788 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3b4:	e00b      	b.n	800a3ce <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff f9d2 	bl	8009760 <HAL_UART_RxCpltCallback>
}
 800a3bc:	e007      	b.n	800a3ce <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0208 	orr.w	r2, r2, #8
 800a3cc:	619a      	str	r2, [r3, #24]
}
 800a3ce:	bf00      	nop
 800a3d0:	3758      	adds	r7, #88	; 0x58
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b083      	sub	sp, #12
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3de:	bf00      	nop
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a3f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a3f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	b29b      	uxth	r3, r3
 800a404:	43db      	mvns	r3, r3
 800a406:	b29b      	uxth	r3, r3
 800a408:	4013      	ands	r3, r2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a420:	b084      	sub	sp, #16
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	f107 0014 	add.w	r0, r7, #20
 800a42e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	b004      	add	sp, #16
 800a460:	4770      	bx	lr
	...

0800a464 <__errno>:
 800a464:	4b01      	ldr	r3, [pc, #4]	; (800a46c <__errno+0x8>)
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	2000008c 	.word	0x2000008c

0800a470 <__libc_init_array>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	4d0d      	ldr	r5, [pc, #52]	; (800a4a8 <__libc_init_array+0x38>)
 800a474:	4c0d      	ldr	r4, [pc, #52]	; (800a4ac <__libc_init_array+0x3c>)
 800a476:	1b64      	subs	r4, r4, r5
 800a478:	10a4      	asrs	r4, r4, #2
 800a47a:	2600      	movs	r6, #0
 800a47c:	42a6      	cmp	r6, r4
 800a47e:	d109      	bne.n	800a494 <__libc_init_array+0x24>
 800a480:	4d0b      	ldr	r5, [pc, #44]	; (800a4b0 <__libc_init_array+0x40>)
 800a482:	4c0c      	ldr	r4, [pc, #48]	; (800a4b4 <__libc_init_array+0x44>)
 800a484:	f001 f9be 	bl	800b804 <_init>
 800a488:	1b64      	subs	r4, r4, r5
 800a48a:	10a4      	asrs	r4, r4, #2
 800a48c:	2600      	movs	r6, #0
 800a48e:	42a6      	cmp	r6, r4
 800a490:	d105      	bne.n	800a49e <__libc_init_array+0x2e>
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	f855 3b04 	ldr.w	r3, [r5], #4
 800a498:	4798      	blx	r3
 800a49a:	3601      	adds	r6, #1
 800a49c:	e7ee      	b.n	800a47c <__libc_init_array+0xc>
 800a49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a2:	4798      	blx	r3
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	e7f2      	b.n	800a48e <__libc_init_array+0x1e>
 800a4a8:	0800b9d0 	.word	0x0800b9d0
 800a4ac:	0800b9d0 	.word	0x0800b9d0
 800a4b0:	0800b9d0 	.word	0x0800b9d0
 800a4b4:	0800b9d4 	.word	0x0800b9d4

0800a4b8 <memset>:
 800a4b8:	4402      	add	r2, r0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d100      	bne.n	800a4c2 <memset+0xa>
 800a4c0:	4770      	bx	lr
 800a4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4c6:	e7f9      	b.n	800a4bc <memset+0x4>

0800a4c8 <iprintf>:
 800a4c8:	b40f      	push	{r0, r1, r2, r3}
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <iprintf+0x2c>)
 800a4cc:	b513      	push	{r0, r1, r4, lr}
 800a4ce:	681c      	ldr	r4, [r3, #0]
 800a4d0:	b124      	cbz	r4, 800a4dc <iprintf+0x14>
 800a4d2:	69a3      	ldr	r3, [r4, #24]
 800a4d4:	b913      	cbnz	r3, 800a4dc <iprintf+0x14>
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 fa7e 	bl	800a9d8 <__sinit>
 800a4dc:	ab05      	add	r3, sp, #20
 800a4de:	9a04      	ldr	r2, [sp, #16]
 800a4e0:	68a1      	ldr	r1, [r4, #8]
 800a4e2:	9301      	str	r3, [sp, #4]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 fdab 	bl	800b040 <_vfiprintf_r>
 800a4ea:	b002      	add	sp, #8
 800a4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f0:	b004      	add	sp, #16
 800a4f2:	4770      	bx	lr
 800a4f4:	2000008c 	.word	0x2000008c

0800a4f8 <_puts_r>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	460e      	mov	r6, r1
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	b118      	cbz	r0, 800a508 <_puts_r+0x10>
 800a500:	6983      	ldr	r3, [r0, #24]
 800a502:	b90b      	cbnz	r3, 800a508 <_puts_r+0x10>
 800a504:	f000 fa68 	bl	800a9d8 <__sinit>
 800a508:	69ab      	ldr	r3, [r5, #24]
 800a50a:	68ac      	ldr	r4, [r5, #8]
 800a50c:	b913      	cbnz	r3, 800a514 <_puts_r+0x1c>
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 fa62 	bl	800a9d8 <__sinit>
 800a514:	4b2c      	ldr	r3, [pc, #176]	; (800a5c8 <_puts_r+0xd0>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d120      	bne.n	800a55c <_puts_r+0x64>
 800a51a:	686c      	ldr	r4, [r5, #4]
 800a51c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a51e:	07db      	lsls	r3, r3, #31
 800a520:	d405      	bmi.n	800a52e <_puts_r+0x36>
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	0598      	lsls	r0, r3, #22
 800a526:	d402      	bmi.n	800a52e <_puts_r+0x36>
 800a528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a52a:	f000 faf3 	bl	800ab14 <__retarget_lock_acquire_recursive>
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	0719      	lsls	r1, r3, #28
 800a532:	d51d      	bpl.n	800a570 <_puts_r+0x78>
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	b1db      	cbz	r3, 800a570 <_puts_r+0x78>
 800a538:	3e01      	subs	r6, #1
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a540:	3b01      	subs	r3, #1
 800a542:	60a3      	str	r3, [r4, #8]
 800a544:	bb39      	cbnz	r1, 800a596 <_puts_r+0x9e>
 800a546:	2b00      	cmp	r3, #0
 800a548:	da38      	bge.n	800a5bc <_puts_r+0xc4>
 800a54a:	4622      	mov	r2, r4
 800a54c:	210a      	movs	r1, #10
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 f868 	bl	800a624 <__swbuf_r>
 800a554:	3001      	adds	r0, #1
 800a556:	d011      	beq.n	800a57c <_puts_r+0x84>
 800a558:	250a      	movs	r5, #10
 800a55a:	e011      	b.n	800a580 <_puts_r+0x88>
 800a55c:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <_puts_r+0xd4>)
 800a55e:	429c      	cmp	r4, r3
 800a560:	d101      	bne.n	800a566 <_puts_r+0x6e>
 800a562:	68ac      	ldr	r4, [r5, #8]
 800a564:	e7da      	b.n	800a51c <_puts_r+0x24>
 800a566:	4b1a      	ldr	r3, [pc, #104]	; (800a5d0 <_puts_r+0xd8>)
 800a568:	429c      	cmp	r4, r3
 800a56a:	bf08      	it	eq
 800a56c:	68ec      	ldreq	r4, [r5, #12]
 800a56e:	e7d5      	b.n	800a51c <_puts_r+0x24>
 800a570:	4621      	mov	r1, r4
 800a572:	4628      	mov	r0, r5
 800a574:	f000 f8a8 	bl	800a6c8 <__swsetup_r>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d0dd      	beq.n	800a538 <_puts_r+0x40>
 800a57c:	f04f 35ff 	mov.w	r5, #4294967295
 800a580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a582:	07da      	lsls	r2, r3, #31
 800a584:	d405      	bmi.n	800a592 <_puts_r+0x9a>
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	059b      	lsls	r3, r3, #22
 800a58a:	d402      	bmi.n	800a592 <_puts_r+0x9a>
 800a58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a58e:	f000 fac2 	bl	800ab16 <__retarget_lock_release_recursive>
 800a592:	4628      	mov	r0, r5
 800a594:	bd70      	pop	{r4, r5, r6, pc}
 800a596:	2b00      	cmp	r3, #0
 800a598:	da04      	bge.n	800a5a4 <_puts_r+0xac>
 800a59a:	69a2      	ldr	r2, [r4, #24]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	dc06      	bgt.n	800a5ae <_puts_r+0xb6>
 800a5a0:	290a      	cmp	r1, #10
 800a5a2:	d004      	beq.n	800a5ae <_puts_r+0xb6>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	6022      	str	r2, [r4, #0]
 800a5aa:	7019      	strb	r1, [r3, #0]
 800a5ac:	e7c5      	b.n	800a53a <_puts_r+0x42>
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 f837 	bl	800a624 <__swbuf_r>
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	d1bf      	bne.n	800a53a <_puts_r+0x42>
 800a5ba:	e7df      	b.n	800a57c <_puts_r+0x84>
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	250a      	movs	r5, #10
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	6022      	str	r2, [r4, #0]
 800a5c4:	701d      	strb	r5, [r3, #0]
 800a5c6:	e7db      	b.n	800a580 <_puts_r+0x88>
 800a5c8:	0800b95c 	.word	0x0800b95c
 800a5cc:	0800b97c 	.word	0x0800b97c
 800a5d0:	0800b93c 	.word	0x0800b93c

0800a5d4 <puts>:
 800a5d4:	4b02      	ldr	r3, [pc, #8]	; (800a5e0 <puts+0xc>)
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	f7ff bf8d 	b.w	800a4f8 <_puts_r>
 800a5de:	bf00      	nop
 800a5e0:	2000008c 	.word	0x2000008c

0800a5e4 <siprintf>:
 800a5e4:	b40e      	push	{r1, r2, r3}
 800a5e6:	b500      	push	{lr}
 800a5e8:	b09c      	sub	sp, #112	; 0x70
 800a5ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a5ec:	9002      	str	r0, [sp, #8]
 800a5ee:	9006      	str	r0, [sp, #24]
 800a5f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5f4:	4809      	ldr	r0, [pc, #36]	; (800a61c <siprintf+0x38>)
 800a5f6:	9107      	str	r1, [sp, #28]
 800a5f8:	9104      	str	r1, [sp, #16]
 800a5fa:	4909      	ldr	r1, [pc, #36]	; (800a620 <siprintf+0x3c>)
 800a5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a600:	9105      	str	r1, [sp, #20]
 800a602:	6800      	ldr	r0, [r0, #0]
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	a902      	add	r1, sp, #8
 800a608:	f000 fbf0 	bl	800adec <_svfiprintf_r>
 800a60c:	9b02      	ldr	r3, [sp, #8]
 800a60e:	2200      	movs	r2, #0
 800a610:	701a      	strb	r2, [r3, #0]
 800a612:	b01c      	add	sp, #112	; 0x70
 800a614:	f85d eb04 	ldr.w	lr, [sp], #4
 800a618:	b003      	add	sp, #12
 800a61a:	4770      	bx	lr
 800a61c:	2000008c 	.word	0x2000008c
 800a620:	ffff0208 	.word	0xffff0208

0800a624 <__swbuf_r>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	460e      	mov	r6, r1
 800a628:	4614      	mov	r4, r2
 800a62a:	4605      	mov	r5, r0
 800a62c:	b118      	cbz	r0, 800a636 <__swbuf_r+0x12>
 800a62e:	6983      	ldr	r3, [r0, #24]
 800a630:	b90b      	cbnz	r3, 800a636 <__swbuf_r+0x12>
 800a632:	f000 f9d1 	bl	800a9d8 <__sinit>
 800a636:	4b21      	ldr	r3, [pc, #132]	; (800a6bc <__swbuf_r+0x98>)
 800a638:	429c      	cmp	r4, r3
 800a63a:	d12b      	bne.n	800a694 <__swbuf_r+0x70>
 800a63c:	686c      	ldr	r4, [r5, #4]
 800a63e:	69a3      	ldr	r3, [r4, #24]
 800a640:	60a3      	str	r3, [r4, #8]
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	071a      	lsls	r2, r3, #28
 800a646:	d52f      	bpl.n	800a6a8 <__swbuf_r+0x84>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	b36b      	cbz	r3, 800a6a8 <__swbuf_r+0x84>
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	6820      	ldr	r0, [r4, #0]
 800a650:	1ac0      	subs	r0, r0, r3
 800a652:	6963      	ldr	r3, [r4, #20]
 800a654:	b2f6      	uxtb	r6, r6
 800a656:	4283      	cmp	r3, r0
 800a658:	4637      	mov	r7, r6
 800a65a:	dc04      	bgt.n	800a666 <__swbuf_r+0x42>
 800a65c:	4621      	mov	r1, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	f000 f926 	bl	800a8b0 <_fflush_r>
 800a664:	bb30      	cbnz	r0, 800a6b4 <__swbuf_r+0x90>
 800a666:	68a3      	ldr	r3, [r4, #8]
 800a668:	3b01      	subs	r3, #1
 800a66a:	60a3      	str	r3, [r4, #8]
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	6022      	str	r2, [r4, #0]
 800a672:	701e      	strb	r6, [r3, #0]
 800a674:	6963      	ldr	r3, [r4, #20]
 800a676:	3001      	adds	r0, #1
 800a678:	4283      	cmp	r3, r0
 800a67a:	d004      	beq.n	800a686 <__swbuf_r+0x62>
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	07db      	lsls	r3, r3, #31
 800a680:	d506      	bpl.n	800a690 <__swbuf_r+0x6c>
 800a682:	2e0a      	cmp	r6, #10
 800a684:	d104      	bne.n	800a690 <__swbuf_r+0x6c>
 800a686:	4621      	mov	r1, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	f000 f911 	bl	800a8b0 <_fflush_r>
 800a68e:	b988      	cbnz	r0, 800a6b4 <__swbuf_r+0x90>
 800a690:	4638      	mov	r0, r7
 800a692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a694:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <__swbuf_r+0x9c>)
 800a696:	429c      	cmp	r4, r3
 800a698:	d101      	bne.n	800a69e <__swbuf_r+0x7a>
 800a69a:	68ac      	ldr	r4, [r5, #8]
 800a69c:	e7cf      	b.n	800a63e <__swbuf_r+0x1a>
 800a69e:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <__swbuf_r+0xa0>)
 800a6a0:	429c      	cmp	r4, r3
 800a6a2:	bf08      	it	eq
 800a6a4:	68ec      	ldreq	r4, [r5, #12]
 800a6a6:	e7ca      	b.n	800a63e <__swbuf_r+0x1a>
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 f80c 	bl	800a6c8 <__swsetup_r>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d0cb      	beq.n	800a64c <__swbuf_r+0x28>
 800a6b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a6b8:	e7ea      	b.n	800a690 <__swbuf_r+0x6c>
 800a6ba:	bf00      	nop
 800a6bc:	0800b95c 	.word	0x0800b95c
 800a6c0:	0800b97c 	.word	0x0800b97c
 800a6c4:	0800b93c 	.word	0x0800b93c

0800a6c8 <__swsetup_r>:
 800a6c8:	4b32      	ldr	r3, [pc, #200]	; (800a794 <__swsetup_r+0xcc>)
 800a6ca:	b570      	push	{r4, r5, r6, lr}
 800a6cc:	681d      	ldr	r5, [r3, #0]
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	b125      	cbz	r5, 800a6de <__swsetup_r+0x16>
 800a6d4:	69ab      	ldr	r3, [r5, #24]
 800a6d6:	b913      	cbnz	r3, 800a6de <__swsetup_r+0x16>
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f000 f97d 	bl	800a9d8 <__sinit>
 800a6de:	4b2e      	ldr	r3, [pc, #184]	; (800a798 <__swsetup_r+0xd0>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d10f      	bne.n	800a704 <__swsetup_r+0x3c>
 800a6e4:	686c      	ldr	r4, [r5, #4]
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6ec:	0719      	lsls	r1, r3, #28
 800a6ee:	d42c      	bmi.n	800a74a <__swsetup_r+0x82>
 800a6f0:	06dd      	lsls	r5, r3, #27
 800a6f2:	d411      	bmi.n	800a718 <__swsetup_r+0x50>
 800a6f4:	2309      	movs	r3, #9
 800a6f6:	6033      	str	r3, [r6, #0]
 800a6f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a702:	e03e      	b.n	800a782 <__swsetup_r+0xba>
 800a704:	4b25      	ldr	r3, [pc, #148]	; (800a79c <__swsetup_r+0xd4>)
 800a706:	429c      	cmp	r4, r3
 800a708:	d101      	bne.n	800a70e <__swsetup_r+0x46>
 800a70a:	68ac      	ldr	r4, [r5, #8]
 800a70c:	e7eb      	b.n	800a6e6 <__swsetup_r+0x1e>
 800a70e:	4b24      	ldr	r3, [pc, #144]	; (800a7a0 <__swsetup_r+0xd8>)
 800a710:	429c      	cmp	r4, r3
 800a712:	bf08      	it	eq
 800a714:	68ec      	ldreq	r4, [r5, #12]
 800a716:	e7e6      	b.n	800a6e6 <__swsetup_r+0x1e>
 800a718:	0758      	lsls	r0, r3, #29
 800a71a:	d512      	bpl.n	800a742 <__swsetup_r+0x7a>
 800a71c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a71e:	b141      	cbz	r1, 800a732 <__swsetup_r+0x6a>
 800a720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a724:	4299      	cmp	r1, r3
 800a726:	d002      	beq.n	800a72e <__swsetup_r+0x66>
 800a728:	4630      	mov	r0, r6
 800a72a:	f000 fa59 	bl	800abe0 <_free_r>
 800a72e:	2300      	movs	r3, #0
 800a730:	6363      	str	r3, [r4, #52]	; 0x34
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	2300      	movs	r3, #0
 800a73c:	6063      	str	r3, [r4, #4]
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f043 0308 	orr.w	r3, r3, #8
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	b94b      	cbnz	r3, 800a762 <__swsetup_r+0x9a>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a758:	d003      	beq.n	800a762 <__swsetup_r+0x9a>
 800a75a:	4621      	mov	r1, r4
 800a75c:	4630      	mov	r0, r6
 800a75e:	f000 f9ff 	bl	800ab60 <__smakebuf_r>
 800a762:	89a0      	ldrh	r0, [r4, #12]
 800a764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a768:	f010 0301 	ands.w	r3, r0, #1
 800a76c:	d00a      	beq.n	800a784 <__swsetup_r+0xbc>
 800a76e:	2300      	movs	r3, #0
 800a770:	60a3      	str	r3, [r4, #8]
 800a772:	6963      	ldr	r3, [r4, #20]
 800a774:	425b      	negs	r3, r3
 800a776:	61a3      	str	r3, [r4, #24]
 800a778:	6923      	ldr	r3, [r4, #16]
 800a77a:	b943      	cbnz	r3, 800a78e <__swsetup_r+0xc6>
 800a77c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a780:	d1ba      	bne.n	800a6f8 <__swsetup_r+0x30>
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	0781      	lsls	r1, r0, #30
 800a786:	bf58      	it	pl
 800a788:	6963      	ldrpl	r3, [r4, #20]
 800a78a:	60a3      	str	r3, [r4, #8]
 800a78c:	e7f4      	b.n	800a778 <__swsetup_r+0xb0>
 800a78e:	2000      	movs	r0, #0
 800a790:	e7f7      	b.n	800a782 <__swsetup_r+0xba>
 800a792:	bf00      	nop
 800a794:	2000008c 	.word	0x2000008c
 800a798:	0800b95c 	.word	0x0800b95c
 800a79c:	0800b97c 	.word	0x0800b97c
 800a7a0:	0800b93c 	.word	0x0800b93c

0800a7a4 <__sflush_r>:
 800a7a4:	898a      	ldrh	r2, [r1, #12]
 800a7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	0710      	lsls	r0, r2, #28
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	d458      	bmi.n	800a864 <__sflush_r+0xc0>
 800a7b2:	684b      	ldr	r3, [r1, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dc05      	bgt.n	800a7c4 <__sflush_r+0x20>
 800a7b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dc02      	bgt.n	800a7c4 <__sflush_r+0x20>
 800a7be:	2000      	movs	r0, #0
 800a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	d0f9      	beq.n	800a7be <__sflush_r+0x1a>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7d0:	682f      	ldr	r7, [r5, #0]
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	d032      	beq.n	800a83c <__sflush_r+0x98>
 800a7d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	075a      	lsls	r2, r3, #29
 800a7dc:	d505      	bpl.n	800a7ea <__sflush_r+0x46>
 800a7de:	6863      	ldr	r3, [r4, #4]
 800a7e0:	1ac0      	subs	r0, r0, r3
 800a7e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7e4:	b10b      	cbz	r3, 800a7ea <__sflush_r+0x46>
 800a7e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7e8:	1ac0      	subs	r0, r0, r3
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7f0:	6a21      	ldr	r1, [r4, #32]
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b0      	blx	r6
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	d106      	bne.n	800a80a <__sflush_r+0x66>
 800a7fc:	6829      	ldr	r1, [r5, #0]
 800a7fe:	291d      	cmp	r1, #29
 800a800:	d82c      	bhi.n	800a85c <__sflush_r+0xb8>
 800a802:	4a2a      	ldr	r2, [pc, #168]	; (800a8ac <__sflush_r+0x108>)
 800a804:	40ca      	lsrs	r2, r1
 800a806:	07d6      	lsls	r6, r2, #31
 800a808:	d528      	bpl.n	800a85c <__sflush_r+0xb8>
 800a80a:	2200      	movs	r2, #0
 800a80c:	6062      	str	r2, [r4, #4]
 800a80e:	04d9      	lsls	r1, r3, #19
 800a810:	6922      	ldr	r2, [r4, #16]
 800a812:	6022      	str	r2, [r4, #0]
 800a814:	d504      	bpl.n	800a820 <__sflush_r+0x7c>
 800a816:	1c42      	adds	r2, r0, #1
 800a818:	d101      	bne.n	800a81e <__sflush_r+0x7a>
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	b903      	cbnz	r3, 800a820 <__sflush_r+0x7c>
 800a81e:	6560      	str	r0, [r4, #84]	; 0x54
 800a820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a822:	602f      	str	r7, [r5, #0]
 800a824:	2900      	cmp	r1, #0
 800a826:	d0ca      	beq.n	800a7be <__sflush_r+0x1a>
 800a828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a82c:	4299      	cmp	r1, r3
 800a82e:	d002      	beq.n	800a836 <__sflush_r+0x92>
 800a830:	4628      	mov	r0, r5
 800a832:	f000 f9d5 	bl	800abe0 <_free_r>
 800a836:	2000      	movs	r0, #0
 800a838:	6360      	str	r0, [r4, #52]	; 0x34
 800a83a:	e7c1      	b.n	800a7c0 <__sflush_r+0x1c>
 800a83c:	6a21      	ldr	r1, [r4, #32]
 800a83e:	2301      	movs	r3, #1
 800a840:	4628      	mov	r0, r5
 800a842:	47b0      	blx	r6
 800a844:	1c41      	adds	r1, r0, #1
 800a846:	d1c7      	bne.n	800a7d8 <__sflush_r+0x34>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0c4      	beq.n	800a7d8 <__sflush_r+0x34>
 800a84e:	2b1d      	cmp	r3, #29
 800a850:	d001      	beq.n	800a856 <__sflush_r+0xb2>
 800a852:	2b16      	cmp	r3, #22
 800a854:	d101      	bne.n	800a85a <__sflush_r+0xb6>
 800a856:	602f      	str	r7, [r5, #0]
 800a858:	e7b1      	b.n	800a7be <__sflush_r+0x1a>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	e7ad      	b.n	800a7c0 <__sflush_r+0x1c>
 800a864:	690f      	ldr	r7, [r1, #16]
 800a866:	2f00      	cmp	r7, #0
 800a868:	d0a9      	beq.n	800a7be <__sflush_r+0x1a>
 800a86a:	0793      	lsls	r3, r2, #30
 800a86c:	680e      	ldr	r6, [r1, #0]
 800a86e:	bf08      	it	eq
 800a870:	694b      	ldreq	r3, [r1, #20]
 800a872:	600f      	str	r7, [r1, #0]
 800a874:	bf18      	it	ne
 800a876:	2300      	movne	r3, #0
 800a878:	eba6 0807 	sub.w	r8, r6, r7
 800a87c:	608b      	str	r3, [r1, #8]
 800a87e:	f1b8 0f00 	cmp.w	r8, #0
 800a882:	dd9c      	ble.n	800a7be <__sflush_r+0x1a>
 800a884:	6a21      	ldr	r1, [r4, #32]
 800a886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a888:	4643      	mov	r3, r8
 800a88a:	463a      	mov	r2, r7
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b0      	blx	r6
 800a890:	2800      	cmp	r0, #0
 800a892:	dc06      	bgt.n	800a8a2 <__sflush_r+0xfe>
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	e78e      	b.n	800a7c0 <__sflush_r+0x1c>
 800a8a2:	4407      	add	r7, r0
 800a8a4:	eba8 0800 	sub.w	r8, r8, r0
 800a8a8:	e7e9      	b.n	800a87e <__sflush_r+0xda>
 800a8aa:	bf00      	nop
 800a8ac:	20400001 	.word	0x20400001

0800a8b0 <_fflush_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	690b      	ldr	r3, [r1, #16]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	b913      	cbnz	r3, 800a8c0 <_fflush_r+0x10>
 800a8ba:	2500      	movs	r5, #0
 800a8bc:	4628      	mov	r0, r5
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	b118      	cbz	r0, 800a8ca <_fflush_r+0x1a>
 800a8c2:	6983      	ldr	r3, [r0, #24]
 800a8c4:	b90b      	cbnz	r3, 800a8ca <_fflush_r+0x1a>
 800a8c6:	f000 f887 	bl	800a9d8 <__sinit>
 800a8ca:	4b14      	ldr	r3, [pc, #80]	; (800a91c <_fflush_r+0x6c>)
 800a8cc:	429c      	cmp	r4, r3
 800a8ce:	d11b      	bne.n	800a908 <_fflush_r+0x58>
 800a8d0:	686c      	ldr	r4, [r5, #4]
 800a8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d0ef      	beq.n	800a8ba <_fflush_r+0xa>
 800a8da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8dc:	07d0      	lsls	r0, r2, #31
 800a8de:	d404      	bmi.n	800a8ea <_fflush_r+0x3a>
 800a8e0:	0599      	lsls	r1, r3, #22
 800a8e2:	d402      	bmi.n	800a8ea <_fflush_r+0x3a>
 800a8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8e6:	f000 f915 	bl	800ab14 <__retarget_lock_acquire_recursive>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	f7ff ff59 	bl	800a7a4 <__sflush_r>
 800a8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8f4:	07da      	lsls	r2, r3, #31
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	d4e0      	bmi.n	800a8bc <_fflush_r+0xc>
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	059b      	lsls	r3, r3, #22
 800a8fe:	d4dd      	bmi.n	800a8bc <_fflush_r+0xc>
 800a900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a902:	f000 f908 	bl	800ab16 <__retarget_lock_release_recursive>
 800a906:	e7d9      	b.n	800a8bc <_fflush_r+0xc>
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <_fflush_r+0x70>)
 800a90a:	429c      	cmp	r4, r3
 800a90c:	d101      	bne.n	800a912 <_fflush_r+0x62>
 800a90e:	68ac      	ldr	r4, [r5, #8]
 800a910:	e7df      	b.n	800a8d2 <_fflush_r+0x22>
 800a912:	4b04      	ldr	r3, [pc, #16]	; (800a924 <_fflush_r+0x74>)
 800a914:	429c      	cmp	r4, r3
 800a916:	bf08      	it	eq
 800a918:	68ec      	ldreq	r4, [r5, #12]
 800a91a:	e7da      	b.n	800a8d2 <_fflush_r+0x22>
 800a91c:	0800b95c 	.word	0x0800b95c
 800a920:	0800b97c 	.word	0x0800b97c
 800a924:	0800b93c 	.word	0x0800b93c

0800a928 <std>:
 800a928:	2300      	movs	r3, #0
 800a92a:	b510      	push	{r4, lr}
 800a92c:	4604      	mov	r4, r0
 800a92e:	e9c0 3300 	strd	r3, r3, [r0]
 800a932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a936:	6083      	str	r3, [r0, #8]
 800a938:	8181      	strh	r1, [r0, #12]
 800a93a:	6643      	str	r3, [r0, #100]	; 0x64
 800a93c:	81c2      	strh	r2, [r0, #14]
 800a93e:	6183      	str	r3, [r0, #24]
 800a940:	4619      	mov	r1, r3
 800a942:	2208      	movs	r2, #8
 800a944:	305c      	adds	r0, #92	; 0x5c
 800a946:	f7ff fdb7 	bl	800a4b8 <memset>
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <std+0x38>)
 800a94c:	6263      	str	r3, [r4, #36]	; 0x24
 800a94e:	4b05      	ldr	r3, [pc, #20]	; (800a964 <std+0x3c>)
 800a950:	62a3      	str	r3, [r4, #40]	; 0x28
 800a952:	4b05      	ldr	r3, [pc, #20]	; (800a968 <std+0x40>)
 800a954:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a956:	4b05      	ldr	r3, [pc, #20]	; (800a96c <std+0x44>)
 800a958:	6224      	str	r4, [r4, #32]
 800a95a:	6323      	str	r3, [r4, #48]	; 0x30
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	bf00      	nop
 800a960:	0800b5e9 	.word	0x0800b5e9
 800a964:	0800b60b 	.word	0x0800b60b
 800a968:	0800b643 	.word	0x0800b643
 800a96c:	0800b667 	.word	0x0800b667

0800a970 <_cleanup_r>:
 800a970:	4901      	ldr	r1, [pc, #4]	; (800a978 <_cleanup_r+0x8>)
 800a972:	f000 b8af 	b.w	800aad4 <_fwalk_reent>
 800a976:	bf00      	nop
 800a978:	0800a8b1 	.word	0x0800a8b1

0800a97c <__sfmoreglue>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	1e4a      	subs	r2, r1, #1
 800a980:	2568      	movs	r5, #104	; 0x68
 800a982:	4355      	muls	r5, r2
 800a984:	460e      	mov	r6, r1
 800a986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a98a:	f000 f979 	bl	800ac80 <_malloc_r>
 800a98e:	4604      	mov	r4, r0
 800a990:	b140      	cbz	r0, 800a9a4 <__sfmoreglue+0x28>
 800a992:	2100      	movs	r1, #0
 800a994:	e9c0 1600 	strd	r1, r6, [r0]
 800a998:	300c      	adds	r0, #12
 800a99a:	60a0      	str	r0, [r4, #8]
 800a99c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9a0:	f7ff fd8a 	bl	800a4b8 <memset>
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}

0800a9a8 <__sfp_lock_acquire>:
 800a9a8:	4801      	ldr	r0, [pc, #4]	; (800a9b0 <__sfp_lock_acquire+0x8>)
 800a9aa:	f000 b8b3 	b.w	800ab14 <__retarget_lock_acquire_recursive>
 800a9ae:	bf00      	nop
 800a9b0:	200009a4 	.word	0x200009a4

0800a9b4 <__sfp_lock_release>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	; (800a9bc <__sfp_lock_release+0x8>)
 800a9b6:	f000 b8ae 	b.w	800ab16 <__retarget_lock_release_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	200009a4 	.word	0x200009a4

0800a9c0 <__sinit_lock_acquire>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	; (800a9c8 <__sinit_lock_acquire+0x8>)
 800a9c2:	f000 b8a7 	b.w	800ab14 <__retarget_lock_acquire_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	2000099f 	.word	0x2000099f

0800a9cc <__sinit_lock_release>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__sinit_lock_release+0x8>)
 800a9ce:	f000 b8a2 	b.w	800ab16 <__retarget_lock_release_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	2000099f 	.word	0x2000099f

0800a9d8 <__sinit>:
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	4604      	mov	r4, r0
 800a9dc:	f7ff fff0 	bl	800a9c0 <__sinit_lock_acquire>
 800a9e0:	69a3      	ldr	r3, [r4, #24]
 800a9e2:	b11b      	cbz	r3, 800a9ec <__sinit+0x14>
 800a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e8:	f7ff bff0 	b.w	800a9cc <__sinit_lock_release>
 800a9ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9f0:	6523      	str	r3, [r4, #80]	; 0x50
 800a9f2:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <__sinit+0x68>)
 800a9f4:	4a13      	ldr	r2, [pc, #76]	; (800aa44 <__sinit+0x6c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	bf04      	itt	eq
 800a9fe:	2301      	moveq	r3, #1
 800aa00:	61a3      	streq	r3, [r4, #24]
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 f820 	bl	800aa48 <__sfp>
 800aa08:	6060      	str	r0, [r4, #4]
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 f81c 	bl	800aa48 <__sfp>
 800aa10:	60a0      	str	r0, [r4, #8]
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 f818 	bl	800aa48 <__sfp>
 800aa18:	2200      	movs	r2, #0
 800aa1a:	60e0      	str	r0, [r4, #12]
 800aa1c:	2104      	movs	r1, #4
 800aa1e:	6860      	ldr	r0, [r4, #4]
 800aa20:	f7ff ff82 	bl	800a928 <std>
 800aa24:	68a0      	ldr	r0, [r4, #8]
 800aa26:	2201      	movs	r2, #1
 800aa28:	2109      	movs	r1, #9
 800aa2a:	f7ff ff7d 	bl	800a928 <std>
 800aa2e:	68e0      	ldr	r0, [r4, #12]
 800aa30:	2202      	movs	r2, #2
 800aa32:	2112      	movs	r1, #18
 800aa34:	f7ff ff78 	bl	800a928 <std>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	61a3      	str	r3, [r4, #24]
 800aa3c:	e7d2      	b.n	800a9e4 <__sinit+0xc>
 800aa3e:	bf00      	nop
 800aa40:	0800b938 	.word	0x0800b938
 800aa44:	0800a971 	.word	0x0800a971

0800aa48 <__sfp>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	f7ff ffac 	bl	800a9a8 <__sfp_lock_acquire>
 800aa50:	4b1e      	ldr	r3, [pc, #120]	; (800aacc <__sfp+0x84>)
 800aa52:	681e      	ldr	r6, [r3, #0]
 800aa54:	69b3      	ldr	r3, [r6, #24]
 800aa56:	b913      	cbnz	r3, 800aa5e <__sfp+0x16>
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f7ff ffbd 	bl	800a9d8 <__sinit>
 800aa5e:	3648      	adds	r6, #72	; 0x48
 800aa60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa64:	3b01      	subs	r3, #1
 800aa66:	d503      	bpl.n	800aa70 <__sfp+0x28>
 800aa68:	6833      	ldr	r3, [r6, #0]
 800aa6a:	b30b      	cbz	r3, 800aab0 <__sfp+0x68>
 800aa6c:	6836      	ldr	r6, [r6, #0]
 800aa6e:	e7f7      	b.n	800aa60 <__sfp+0x18>
 800aa70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa74:	b9d5      	cbnz	r5, 800aaac <__sfp+0x64>
 800aa76:	4b16      	ldr	r3, [pc, #88]	; (800aad0 <__sfp+0x88>)
 800aa78:	60e3      	str	r3, [r4, #12]
 800aa7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa7e:	6665      	str	r5, [r4, #100]	; 0x64
 800aa80:	f000 f847 	bl	800ab12 <__retarget_lock_init_recursive>
 800aa84:	f7ff ff96 	bl	800a9b4 <__sfp_lock_release>
 800aa88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa90:	6025      	str	r5, [r4, #0]
 800aa92:	61a5      	str	r5, [r4, #24]
 800aa94:	2208      	movs	r2, #8
 800aa96:	4629      	mov	r1, r5
 800aa98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa9c:	f7ff fd0c 	bl	800a4b8 <memset>
 800aaa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aaa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaac:	3468      	adds	r4, #104	; 0x68
 800aaae:	e7d9      	b.n	800aa64 <__sfp+0x1c>
 800aab0:	2104      	movs	r1, #4
 800aab2:	4638      	mov	r0, r7
 800aab4:	f7ff ff62 	bl	800a97c <__sfmoreglue>
 800aab8:	4604      	mov	r4, r0
 800aaba:	6030      	str	r0, [r6, #0]
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d1d5      	bne.n	800aa6c <__sfp+0x24>
 800aac0:	f7ff ff78 	bl	800a9b4 <__sfp_lock_release>
 800aac4:	230c      	movs	r3, #12
 800aac6:	603b      	str	r3, [r7, #0]
 800aac8:	e7ee      	b.n	800aaa8 <__sfp+0x60>
 800aaca:	bf00      	nop
 800aacc:	0800b938 	.word	0x0800b938
 800aad0:	ffff0001 	.word	0xffff0001

0800aad4 <_fwalk_reent>:
 800aad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad8:	4606      	mov	r6, r0
 800aada:	4688      	mov	r8, r1
 800aadc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aae0:	2700      	movs	r7, #0
 800aae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aae6:	f1b9 0901 	subs.w	r9, r9, #1
 800aaea:	d505      	bpl.n	800aaf8 <_fwalk_reent+0x24>
 800aaec:	6824      	ldr	r4, [r4, #0]
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	d1f7      	bne.n	800aae2 <_fwalk_reent+0xe>
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf8:	89ab      	ldrh	r3, [r5, #12]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d907      	bls.n	800ab0e <_fwalk_reent+0x3a>
 800aafe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab02:	3301      	adds	r3, #1
 800ab04:	d003      	beq.n	800ab0e <_fwalk_reent+0x3a>
 800ab06:	4629      	mov	r1, r5
 800ab08:	4630      	mov	r0, r6
 800ab0a:	47c0      	blx	r8
 800ab0c:	4307      	orrs	r7, r0
 800ab0e:	3568      	adds	r5, #104	; 0x68
 800ab10:	e7e9      	b.n	800aae6 <_fwalk_reent+0x12>

0800ab12 <__retarget_lock_init_recursive>:
 800ab12:	4770      	bx	lr

0800ab14 <__retarget_lock_acquire_recursive>:
 800ab14:	4770      	bx	lr

0800ab16 <__retarget_lock_release_recursive>:
 800ab16:	4770      	bx	lr

0800ab18 <__swhatbuf_r>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	460e      	mov	r6, r1
 800ab1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab20:	2900      	cmp	r1, #0
 800ab22:	b096      	sub	sp, #88	; 0x58
 800ab24:	4614      	mov	r4, r2
 800ab26:	461d      	mov	r5, r3
 800ab28:	da07      	bge.n	800ab3a <__swhatbuf_r+0x22>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	602b      	str	r3, [r5, #0]
 800ab2e:	89b3      	ldrh	r3, [r6, #12]
 800ab30:	061a      	lsls	r2, r3, #24
 800ab32:	d410      	bmi.n	800ab56 <__swhatbuf_r+0x3e>
 800ab34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab38:	e00e      	b.n	800ab58 <__swhatbuf_r+0x40>
 800ab3a:	466a      	mov	r2, sp
 800ab3c:	f000 fdba 	bl	800b6b4 <_fstat_r>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	dbf2      	blt.n	800ab2a <__swhatbuf_r+0x12>
 800ab44:	9a01      	ldr	r2, [sp, #4]
 800ab46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab4e:	425a      	negs	r2, r3
 800ab50:	415a      	adcs	r2, r3
 800ab52:	602a      	str	r2, [r5, #0]
 800ab54:	e7ee      	b.n	800ab34 <__swhatbuf_r+0x1c>
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	2000      	movs	r0, #0
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	b016      	add	sp, #88	; 0x58
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}

0800ab60 <__smakebuf_r>:
 800ab60:	898b      	ldrh	r3, [r1, #12]
 800ab62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab64:	079d      	lsls	r5, r3, #30
 800ab66:	4606      	mov	r6, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	d507      	bpl.n	800ab7c <__smakebuf_r+0x1c>
 800ab6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	2301      	movs	r3, #1
 800ab76:	6163      	str	r3, [r4, #20]
 800ab78:	b002      	add	sp, #8
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	ab01      	add	r3, sp, #4
 800ab7e:	466a      	mov	r2, sp
 800ab80:	f7ff ffca 	bl	800ab18 <__swhatbuf_r>
 800ab84:	9900      	ldr	r1, [sp, #0]
 800ab86:	4605      	mov	r5, r0
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f000 f879 	bl	800ac80 <_malloc_r>
 800ab8e:	b948      	cbnz	r0, 800aba4 <__smakebuf_r+0x44>
 800ab90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab94:	059a      	lsls	r2, r3, #22
 800ab96:	d4ef      	bmi.n	800ab78 <__smakebuf_r+0x18>
 800ab98:	f023 0303 	bic.w	r3, r3, #3
 800ab9c:	f043 0302 	orr.w	r3, r3, #2
 800aba0:	81a3      	strh	r3, [r4, #12]
 800aba2:	e7e3      	b.n	800ab6c <__smakebuf_r+0xc>
 800aba4:	4b0d      	ldr	r3, [pc, #52]	; (800abdc <__smakebuf_r+0x7c>)
 800aba6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	6020      	str	r0, [r4, #0]
 800abac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	9b00      	ldr	r3, [sp, #0]
 800abb4:	6163      	str	r3, [r4, #20]
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	6120      	str	r0, [r4, #16]
 800abba:	b15b      	cbz	r3, 800abd4 <__smakebuf_r+0x74>
 800abbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc0:	4630      	mov	r0, r6
 800abc2:	f000 fd89 	bl	800b6d8 <_isatty_r>
 800abc6:	b128      	cbz	r0, 800abd4 <__smakebuf_r+0x74>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	f023 0303 	bic.w	r3, r3, #3
 800abce:	f043 0301 	orr.w	r3, r3, #1
 800abd2:	81a3      	strh	r3, [r4, #12]
 800abd4:	89a0      	ldrh	r0, [r4, #12]
 800abd6:	4305      	orrs	r5, r0
 800abd8:	81a5      	strh	r5, [r4, #12]
 800abda:	e7cd      	b.n	800ab78 <__smakebuf_r+0x18>
 800abdc:	0800a971 	.word	0x0800a971

0800abe0 <_free_r>:
 800abe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abe2:	2900      	cmp	r1, #0
 800abe4:	d048      	beq.n	800ac78 <_free_r+0x98>
 800abe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abea:	9001      	str	r0, [sp, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f1a1 0404 	sub.w	r4, r1, #4
 800abf2:	bfb8      	it	lt
 800abf4:	18e4      	addlt	r4, r4, r3
 800abf6:	f000 fdb9 	bl	800b76c <__malloc_lock>
 800abfa:	4a20      	ldr	r2, [pc, #128]	; (800ac7c <_free_r+0x9c>)
 800abfc:	9801      	ldr	r0, [sp, #4]
 800abfe:	6813      	ldr	r3, [r2, #0]
 800ac00:	4615      	mov	r5, r2
 800ac02:	b933      	cbnz	r3, 800ac12 <_free_r+0x32>
 800ac04:	6063      	str	r3, [r4, #4]
 800ac06:	6014      	str	r4, [r2, #0]
 800ac08:	b003      	add	sp, #12
 800ac0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac0e:	f000 bdb3 	b.w	800b778 <__malloc_unlock>
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	d90b      	bls.n	800ac2e <_free_r+0x4e>
 800ac16:	6821      	ldr	r1, [r4, #0]
 800ac18:	1862      	adds	r2, r4, r1
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	bf04      	itt	eq
 800ac1e:	681a      	ldreq	r2, [r3, #0]
 800ac20:	685b      	ldreq	r3, [r3, #4]
 800ac22:	6063      	str	r3, [r4, #4]
 800ac24:	bf04      	itt	eq
 800ac26:	1852      	addeq	r2, r2, r1
 800ac28:	6022      	streq	r2, [r4, #0]
 800ac2a:	602c      	str	r4, [r5, #0]
 800ac2c:	e7ec      	b.n	800ac08 <_free_r+0x28>
 800ac2e:	461a      	mov	r2, r3
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	b10b      	cbz	r3, 800ac38 <_free_r+0x58>
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	d9fa      	bls.n	800ac2e <_free_r+0x4e>
 800ac38:	6811      	ldr	r1, [r2, #0]
 800ac3a:	1855      	adds	r5, r2, r1
 800ac3c:	42a5      	cmp	r5, r4
 800ac3e:	d10b      	bne.n	800ac58 <_free_r+0x78>
 800ac40:	6824      	ldr	r4, [r4, #0]
 800ac42:	4421      	add	r1, r4
 800ac44:	1854      	adds	r4, r2, r1
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	6011      	str	r1, [r2, #0]
 800ac4a:	d1dd      	bne.n	800ac08 <_free_r+0x28>
 800ac4c:	681c      	ldr	r4, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	6053      	str	r3, [r2, #4]
 800ac52:	4421      	add	r1, r4
 800ac54:	6011      	str	r1, [r2, #0]
 800ac56:	e7d7      	b.n	800ac08 <_free_r+0x28>
 800ac58:	d902      	bls.n	800ac60 <_free_r+0x80>
 800ac5a:	230c      	movs	r3, #12
 800ac5c:	6003      	str	r3, [r0, #0]
 800ac5e:	e7d3      	b.n	800ac08 <_free_r+0x28>
 800ac60:	6825      	ldr	r5, [r4, #0]
 800ac62:	1961      	adds	r1, r4, r5
 800ac64:	428b      	cmp	r3, r1
 800ac66:	bf04      	itt	eq
 800ac68:	6819      	ldreq	r1, [r3, #0]
 800ac6a:	685b      	ldreq	r3, [r3, #4]
 800ac6c:	6063      	str	r3, [r4, #4]
 800ac6e:	bf04      	itt	eq
 800ac70:	1949      	addeq	r1, r1, r5
 800ac72:	6021      	streq	r1, [r4, #0]
 800ac74:	6054      	str	r4, [r2, #4]
 800ac76:	e7c7      	b.n	800ac08 <_free_r+0x28>
 800ac78:	b003      	add	sp, #12
 800ac7a:	bd30      	pop	{r4, r5, pc}
 800ac7c:	2000022c 	.word	0x2000022c

0800ac80 <_malloc_r>:
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	1ccd      	adds	r5, r1, #3
 800ac84:	f025 0503 	bic.w	r5, r5, #3
 800ac88:	3508      	adds	r5, #8
 800ac8a:	2d0c      	cmp	r5, #12
 800ac8c:	bf38      	it	cc
 800ac8e:	250c      	movcc	r5, #12
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	4606      	mov	r6, r0
 800ac94:	db01      	blt.n	800ac9a <_malloc_r+0x1a>
 800ac96:	42a9      	cmp	r1, r5
 800ac98:	d903      	bls.n	800aca2 <_malloc_r+0x22>
 800ac9a:	230c      	movs	r3, #12
 800ac9c:	6033      	str	r3, [r6, #0]
 800ac9e:	2000      	movs	r0, #0
 800aca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca2:	f000 fd63 	bl	800b76c <__malloc_lock>
 800aca6:	4921      	ldr	r1, [pc, #132]	; (800ad2c <_malloc_r+0xac>)
 800aca8:	680a      	ldr	r2, [r1, #0]
 800acaa:	4614      	mov	r4, r2
 800acac:	b99c      	cbnz	r4, 800acd6 <_malloc_r+0x56>
 800acae:	4f20      	ldr	r7, [pc, #128]	; (800ad30 <_malloc_r+0xb0>)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	b923      	cbnz	r3, 800acbe <_malloc_r+0x3e>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4630      	mov	r0, r6
 800acb8:	f000 fc86 	bl	800b5c8 <_sbrk_r>
 800acbc:	6038      	str	r0, [r7, #0]
 800acbe:	4629      	mov	r1, r5
 800acc0:	4630      	mov	r0, r6
 800acc2:	f000 fc81 	bl	800b5c8 <_sbrk_r>
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	d123      	bne.n	800ad12 <_malloc_r+0x92>
 800acca:	230c      	movs	r3, #12
 800accc:	6033      	str	r3, [r6, #0]
 800acce:	4630      	mov	r0, r6
 800acd0:	f000 fd52 	bl	800b778 <__malloc_unlock>
 800acd4:	e7e3      	b.n	800ac9e <_malloc_r+0x1e>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	1b5b      	subs	r3, r3, r5
 800acda:	d417      	bmi.n	800ad0c <_malloc_r+0x8c>
 800acdc:	2b0b      	cmp	r3, #11
 800acde:	d903      	bls.n	800ace8 <_malloc_r+0x68>
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	441c      	add	r4, r3
 800ace4:	6025      	str	r5, [r4, #0]
 800ace6:	e004      	b.n	800acf2 <_malloc_r+0x72>
 800ace8:	6863      	ldr	r3, [r4, #4]
 800acea:	42a2      	cmp	r2, r4
 800acec:	bf0c      	ite	eq
 800acee:	600b      	streq	r3, [r1, #0]
 800acf0:	6053      	strne	r3, [r2, #4]
 800acf2:	4630      	mov	r0, r6
 800acf4:	f000 fd40 	bl	800b778 <__malloc_unlock>
 800acf8:	f104 000b 	add.w	r0, r4, #11
 800acfc:	1d23      	adds	r3, r4, #4
 800acfe:	f020 0007 	bic.w	r0, r0, #7
 800ad02:	1ac2      	subs	r2, r0, r3
 800ad04:	d0cc      	beq.n	800aca0 <_malloc_r+0x20>
 800ad06:	1a1b      	subs	r3, r3, r0
 800ad08:	50a3      	str	r3, [r4, r2]
 800ad0a:	e7c9      	b.n	800aca0 <_malloc_r+0x20>
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	6864      	ldr	r4, [r4, #4]
 800ad10:	e7cc      	b.n	800acac <_malloc_r+0x2c>
 800ad12:	1cc4      	adds	r4, r0, #3
 800ad14:	f024 0403 	bic.w	r4, r4, #3
 800ad18:	42a0      	cmp	r0, r4
 800ad1a:	d0e3      	beq.n	800ace4 <_malloc_r+0x64>
 800ad1c:	1a21      	subs	r1, r4, r0
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f000 fc52 	bl	800b5c8 <_sbrk_r>
 800ad24:	3001      	adds	r0, #1
 800ad26:	d1dd      	bne.n	800ace4 <_malloc_r+0x64>
 800ad28:	e7cf      	b.n	800acca <_malloc_r+0x4a>
 800ad2a:	bf00      	nop
 800ad2c:	2000022c 	.word	0x2000022c
 800ad30:	20000230 	.word	0x20000230

0800ad34 <__ssputs_r>:
 800ad34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad38:	688e      	ldr	r6, [r1, #8]
 800ad3a:	429e      	cmp	r6, r3
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	4690      	mov	r8, r2
 800ad42:	461f      	mov	r7, r3
 800ad44:	d838      	bhi.n	800adb8 <__ssputs_r+0x84>
 800ad46:	898a      	ldrh	r2, [r1, #12]
 800ad48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad4c:	d032      	beq.n	800adb4 <__ssputs_r+0x80>
 800ad4e:	6825      	ldr	r5, [r4, #0]
 800ad50:	6909      	ldr	r1, [r1, #16]
 800ad52:	eba5 0901 	sub.w	r9, r5, r1
 800ad56:	6965      	ldr	r5, [r4, #20]
 800ad58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad60:	3301      	adds	r3, #1
 800ad62:	444b      	add	r3, r9
 800ad64:	106d      	asrs	r5, r5, #1
 800ad66:	429d      	cmp	r5, r3
 800ad68:	bf38      	it	cc
 800ad6a:	461d      	movcc	r5, r3
 800ad6c:	0553      	lsls	r3, r2, #21
 800ad6e:	d531      	bpl.n	800add4 <__ssputs_r+0xa0>
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7ff ff85 	bl	800ac80 <_malloc_r>
 800ad76:	4606      	mov	r6, r0
 800ad78:	b950      	cbnz	r0, 800ad90 <__ssputs_r+0x5c>
 800ad7a:	230c      	movs	r3, #12
 800ad7c:	f8ca 3000 	str.w	r3, [sl]
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad86:	81a3      	strh	r3, [r4, #12]
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad90:	6921      	ldr	r1, [r4, #16]
 800ad92:	464a      	mov	r2, r9
 800ad94:	f000 fcc2 	bl	800b71c <memcpy>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	6126      	str	r6, [r4, #16]
 800ada6:	6165      	str	r5, [r4, #20]
 800ada8:	444e      	add	r6, r9
 800adaa:	eba5 0509 	sub.w	r5, r5, r9
 800adae:	6026      	str	r6, [r4, #0]
 800adb0:	60a5      	str	r5, [r4, #8]
 800adb2:	463e      	mov	r6, r7
 800adb4:	42be      	cmp	r6, r7
 800adb6:	d900      	bls.n	800adba <__ssputs_r+0x86>
 800adb8:	463e      	mov	r6, r7
 800adba:	4632      	mov	r2, r6
 800adbc:	6820      	ldr	r0, [r4, #0]
 800adbe:	4641      	mov	r1, r8
 800adc0:	f000 fcba 	bl	800b738 <memmove>
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	6822      	ldr	r2, [r4, #0]
 800adc8:	1b9b      	subs	r3, r3, r6
 800adca:	4432      	add	r2, r6
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	6022      	str	r2, [r4, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e7db      	b.n	800ad8c <__ssputs_r+0x58>
 800add4:	462a      	mov	r2, r5
 800add6:	f000 fcd5 	bl	800b784 <_realloc_r>
 800adda:	4606      	mov	r6, r0
 800addc:	2800      	cmp	r0, #0
 800adde:	d1e1      	bne.n	800ada4 <__ssputs_r+0x70>
 800ade0:	6921      	ldr	r1, [r4, #16]
 800ade2:	4650      	mov	r0, sl
 800ade4:	f7ff fefc 	bl	800abe0 <_free_r>
 800ade8:	e7c7      	b.n	800ad7a <__ssputs_r+0x46>
	...

0800adec <_svfiprintf_r>:
 800adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	4698      	mov	r8, r3
 800adf2:	898b      	ldrh	r3, [r1, #12]
 800adf4:	061b      	lsls	r3, r3, #24
 800adf6:	b09d      	sub	sp, #116	; 0x74
 800adf8:	4607      	mov	r7, r0
 800adfa:	460d      	mov	r5, r1
 800adfc:	4614      	mov	r4, r2
 800adfe:	d50e      	bpl.n	800ae1e <_svfiprintf_r+0x32>
 800ae00:	690b      	ldr	r3, [r1, #16]
 800ae02:	b963      	cbnz	r3, 800ae1e <_svfiprintf_r+0x32>
 800ae04:	2140      	movs	r1, #64	; 0x40
 800ae06:	f7ff ff3b 	bl	800ac80 <_malloc_r>
 800ae0a:	6028      	str	r0, [r5, #0]
 800ae0c:	6128      	str	r0, [r5, #16]
 800ae0e:	b920      	cbnz	r0, 800ae1a <_svfiprintf_r+0x2e>
 800ae10:	230c      	movs	r3, #12
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295
 800ae18:	e0d1      	b.n	800afbe <_svfiprintf_r+0x1d2>
 800ae1a:	2340      	movs	r3, #64	; 0x40
 800ae1c:	616b      	str	r3, [r5, #20]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9309      	str	r3, [sp, #36]	; 0x24
 800ae22:	2320      	movs	r3, #32
 800ae24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2c:	2330      	movs	r3, #48	; 0x30
 800ae2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afd8 <_svfiprintf_r+0x1ec>
 800ae32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae36:	f04f 0901 	mov.w	r9, #1
 800ae3a:	4623      	mov	r3, r4
 800ae3c:	469a      	mov	sl, r3
 800ae3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae42:	b10a      	cbz	r2, 800ae48 <_svfiprintf_r+0x5c>
 800ae44:	2a25      	cmp	r2, #37	; 0x25
 800ae46:	d1f9      	bne.n	800ae3c <_svfiprintf_r+0x50>
 800ae48:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4c:	d00b      	beq.n	800ae66 <_svfiprintf_r+0x7a>
 800ae4e:	465b      	mov	r3, fp
 800ae50:	4622      	mov	r2, r4
 800ae52:	4629      	mov	r1, r5
 800ae54:	4638      	mov	r0, r7
 800ae56:	f7ff ff6d 	bl	800ad34 <__ssputs_r>
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	f000 80aa 	beq.w	800afb4 <_svfiprintf_r+0x1c8>
 800ae60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae62:	445a      	add	r2, fp
 800ae64:	9209      	str	r2, [sp, #36]	; 0x24
 800ae66:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80a2 	beq.w	800afb4 <_svfiprintf_r+0x1c8>
 800ae70:	2300      	movs	r3, #0
 800ae72:	f04f 32ff 	mov.w	r2, #4294967295
 800ae76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae7a:	f10a 0a01 	add.w	sl, sl, #1
 800ae7e:	9304      	str	r3, [sp, #16]
 800ae80:	9307      	str	r3, [sp, #28]
 800ae82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae86:	931a      	str	r3, [sp, #104]	; 0x68
 800ae88:	4654      	mov	r4, sl
 800ae8a:	2205      	movs	r2, #5
 800ae8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae90:	4851      	ldr	r0, [pc, #324]	; (800afd8 <_svfiprintf_r+0x1ec>)
 800ae92:	f7f5 f9a5 	bl	80001e0 <memchr>
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	b9d8      	cbnz	r0, 800aed2 <_svfiprintf_r+0xe6>
 800ae9a:	06d0      	lsls	r0, r2, #27
 800ae9c:	bf44      	itt	mi
 800ae9e:	2320      	movmi	r3, #32
 800aea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea4:	0711      	lsls	r1, r2, #28
 800aea6:	bf44      	itt	mi
 800aea8:	232b      	movmi	r3, #43	; 0x2b
 800aeaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeae:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb2:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb4:	d015      	beq.n	800aee2 <_svfiprintf_r+0xf6>
 800aeb6:	9a07      	ldr	r2, [sp, #28]
 800aeb8:	4654      	mov	r4, sl
 800aeba:	2000      	movs	r0, #0
 800aebc:	f04f 0c0a 	mov.w	ip, #10
 800aec0:	4621      	mov	r1, r4
 800aec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec6:	3b30      	subs	r3, #48	; 0x30
 800aec8:	2b09      	cmp	r3, #9
 800aeca:	d94e      	bls.n	800af6a <_svfiprintf_r+0x17e>
 800aecc:	b1b0      	cbz	r0, 800aefc <_svfiprintf_r+0x110>
 800aece:	9207      	str	r2, [sp, #28]
 800aed0:	e014      	b.n	800aefc <_svfiprintf_r+0x110>
 800aed2:	eba0 0308 	sub.w	r3, r0, r8
 800aed6:	fa09 f303 	lsl.w	r3, r9, r3
 800aeda:	4313      	orrs	r3, r2
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	46a2      	mov	sl, r4
 800aee0:	e7d2      	b.n	800ae88 <_svfiprintf_r+0x9c>
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	1d19      	adds	r1, r3, #4
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	9103      	str	r1, [sp, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bfbb      	ittet	lt
 800aeee:	425b      	neglt	r3, r3
 800aef0:	f042 0202 	orrlt.w	r2, r2, #2
 800aef4:	9307      	strge	r3, [sp, #28]
 800aef6:	9307      	strlt	r3, [sp, #28]
 800aef8:	bfb8      	it	lt
 800aefa:	9204      	strlt	r2, [sp, #16]
 800aefc:	7823      	ldrb	r3, [r4, #0]
 800aefe:	2b2e      	cmp	r3, #46	; 0x2e
 800af00:	d10c      	bne.n	800af1c <_svfiprintf_r+0x130>
 800af02:	7863      	ldrb	r3, [r4, #1]
 800af04:	2b2a      	cmp	r3, #42	; 0x2a
 800af06:	d135      	bne.n	800af74 <_svfiprintf_r+0x188>
 800af08:	9b03      	ldr	r3, [sp, #12]
 800af0a:	1d1a      	adds	r2, r3, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	9203      	str	r2, [sp, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	bfb8      	it	lt
 800af14:	f04f 33ff 	movlt.w	r3, #4294967295
 800af18:	3402      	adds	r4, #2
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afe8 <_svfiprintf_r+0x1fc>
 800af20:	7821      	ldrb	r1, [r4, #0]
 800af22:	2203      	movs	r2, #3
 800af24:	4650      	mov	r0, sl
 800af26:	f7f5 f95b 	bl	80001e0 <memchr>
 800af2a:	b140      	cbz	r0, 800af3e <_svfiprintf_r+0x152>
 800af2c:	2340      	movs	r3, #64	; 0x40
 800af2e:	eba0 000a 	sub.w	r0, r0, sl
 800af32:	fa03 f000 	lsl.w	r0, r3, r0
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	4303      	orrs	r3, r0
 800af3a:	3401      	adds	r4, #1
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af42:	4826      	ldr	r0, [pc, #152]	; (800afdc <_svfiprintf_r+0x1f0>)
 800af44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af48:	2206      	movs	r2, #6
 800af4a:	f7f5 f949 	bl	80001e0 <memchr>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d038      	beq.n	800afc4 <_svfiprintf_r+0x1d8>
 800af52:	4b23      	ldr	r3, [pc, #140]	; (800afe0 <_svfiprintf_r+0x1f4>)
 800af54:	bb1b      	cbnz	r3, 800af9e <_svfiprintf_r+0x1b2>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	3307      	adds	r3, #7
 800af5a:	f023 0307 	bic.w	r3, r3, #7
 800af5e:	3308      	adds	r3, #8
 800af60:	9303      	str	r3, [sp, #12]
 800af62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af64:	4433      	add	r3, r6
 800af66:	9309      	str	r3, [sp, #36]	; 0x24
 800af68:	e767      	b.n	800ae3a <_svfiprintf_r+0x4e>
 800af6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6e:	460c      	mov	r4, r1
 800af70:	2001      	movs	r0, #1
 800af72:	e7a5      	b.n	800aec0 <_svfiprintf_r+0xd4>
 800af74:	2300      	movs	r3, #0
 800af76:	3401      	adds	r4, #1
 800af78:	9305      	str	r3, [sp, #20]
 800af7a:	4619      	mov	r1, r3
 800af7c:	f04f 0c0a 	mov.w	ip, #10
 800af80:	4620      	mov	r0, r4
 800af82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af86:	3a30      	subs	r2, #48	; 0x30
 800af88:	2a09      	cmp	r2, #9
 800af8a:	d903      	bls.n	800af94 <_svfiprintf_r+0x1a8>
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0c5      	beq.n	800af1c <_svfiprintf_r+0x130>
 800af90:	9105      	str	r1, [sp, #20]
 800af92:	e7c3      	b.n	800af1c <_svfiprintf_r+0x130>
 800af94:	fb0c 2101 	mla	r1, ip, r1, r2
 800af98:	4604      	mov	r4, r0
 800af9a:	2301      	movs	r3, #1
 800af9c:	e7f0      	b.n	800af80 <_svfiprintf_r+0x194>
 800af9e:	ab03      	add	r3, sp, #12
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	462a      	mov	r2, r5
 800afa4:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <_svfiprintf_r+0x1f8>)
 800afa6:	a904      	add	r1, sp, #16
 800afa8:	4638      	mov	r0, r7
 800afaa:	f3af 8000 	nop.w
 800afae:	1c42      	adds	r2, r0, #1
 800afb0:	4606      	mov	r6, r0
 800afb2:	d1d6      	bne.n	800af62 <_svfiprintf_r+0x176>
 800afb4:	89ab      	ldrh	r3, [r5, #12]
 800afb6:	065b      	lsls	r3, r3, #25
 800afb8:	f53f af2c 	bmi.w	800ae14 <_svfiprintf_r+0x28>
 800afbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afbe:	b01d      	add	sp, #116	; 0x74
 800afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc4:	ab03      	add	r3, sp, #12
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	462a      	mov	r2, r5
 800afca:	4b06      	ldr	r3, [pc, #24]	; (800afe4 <_svfiprintf_r+0x1f8>)
 800afcc:	a904      	add	r1, sp, #16
 800afce:	4638      	mov	r0, r7
 800afd0:	f000 f9d4 	bl	800b37c <_printf_i>
 800afd4:	e7eb      	b.n	800afae <_svfiprintf_r+0x1c2>
 800afd6:	bf00      	nop
 800afd8:	0800b99c 	.word	0x0800b99c
 800afdc:	0800b9a6 	.word	0x0800b9a6
 800afe0:	00000000 	.word	0x00000000
 800afe4:	0800ad35 	.word	0x0800ad35
 800afe8:	0800b9a2 	.word	0x0800b9a2

0800afec <__sfputc_r>:
 800afec:	6893      	ldr	r3, [r2, #8]
 800afee:	3b01      	subs	r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	b410      	push	{r4}
 800aff4:	6093      	str	r3, [r2, #8]
 800aff6:	da08      	bge.n	800b00a <__sfputc_r+0x1e>
 800aff8:	6994      	ldr	r4, [r2, #24]
 800affa:	42a3      	cmp	r3, r4
 800affc:	db01      	blt.n	800b002 <__sfputc_r+0x16>
 800affe:	290a      	cmp	r1, #10
 800b000:	d103      	bne.n	800b00a <__sfputc_r+0x1e>
 800b002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b006:	f7ff bb0d 	b.w	800a624 <__swbuf_r>
 800b00a:	6813      	ldr	r3, [r2, #0]
 800b00c:	1c58      	adds	r0, r3, #1
 800b00e:	6010      	str	r0, [r2, #0]
 800b010:	7019      	strb	r1, [r3, #0]
 800b012:	4608      	mov	r0, r1
 800b014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <__sfputs_r>:
 800b01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01c:	4606      	mov	r6, r0
 800b01e:	460f      	mov	r7, r1
 800b020:	4614      	mov	r4, r2
 800b022:	18d5      	adds	r5, r2, r3
 800b024:	42ac      	cmp	r4, r5
 800b026:	d101      	bne.n	800b02c <__sfputs_r+0x12>
 800b028:	2000      	movs	r0, #0
 800b02a:	e007      	b.n	800b03c <__sfputs_r+0x22>
 800b02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b030:	463a      	mov	r2, r7
 800b032:	4630      	mov	r0, r6
 800b034:	f7ff ffda 	bl	800afec <__sfputc_r>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d1f3      	bne.n	800b024 <__sfputs_r+0xa>
 800b03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b040 <_vfiprintf_r>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	460d      	mov	r5, r1
 800b046:	b09d      	sub	sp, #116	; 0x74
 800b048:	4614      	mov	r4, r2
 800b04a:	4698      	mov	r8, r3
 800b04c:	4606      	mov	r6, r0
 800b04e:	b118      	cbz	r0, 800b058 <_vfiprintf_r+0x18>
 800b050:	6983      	ldr	r3, [r0, #24]
 800b052:	b90b      	cbnz	r3, 800b058 <_vfiprintf_r+0x18>
 800b054:	f7ff fcc0 	bl	800a9d8 <__sinit>
 800b058:	4b89      	ldr	r3, [pc, #548]	; (800b280 <_vfiprintf_r+0x240>)
 800b05a:	429d      	cmp	r5, r3
 800b05c:	d11b      	bne.n	800b096 <_vfiprintf_r+0x56>
 800b05e:	6875      	ldr	r5, [r6, #4]
 800b060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b062:	07d9      	lsls	r1, r3, #31
 800b064:	d405      	bmi.n	800b072 <_vfiprintf_r+0x32>
 800b066:	89ab      	ldrh	r3, [r5, #12]
 800b068:	059a      	lsls	r2, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_vfiprintf_r+0x32>
 800b06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b06e:	f7ff fd51 	bl	800ab14 <__retarget_lock_acquire_recursive>
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	071b      	lsls	r3, r3, #28
 800b076:	d501      	bpl.n	800b07c <_vfiprintf_r+0x3c>
 800b078:	692b      	ldr	r3, [r5, #16]
 800b07a:	b9eb      	cbnz	r3, 800b0b8 <_vfiprintf_r+0x78>
 800b07c:	4629      	mov	r1, r5
 800b07e:	4630      	mov	r0, r6
 800b080:	f7ff fb22 	bl	800a6c8 <__swsetup_r>
 800b084:	b1c0      	cbz	r0, 800b0b8 <_vfiprintf_r+0x78>
 800b086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b088:	07dc      	lsls	r4, r3, #31
 800b08a:	d50e      	bpl.n	800b0aa <_vfiprintf_r+0x6a>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	b01d      	add	sp, #116	; 0x74
 800b092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b096:	4b7b      	ldr	r3, [pc, #492]	; (800b284 <_vfiprintf_r+0x244>)
 800b098:	429d      	cmp	r5, r3
 800b09a:	d101      	bne.n	800b0a0 <_vfiprintf_r+0x60>
 800b09c:	68b5      	ldr	r5, [r6, #8]
 800b09e:	e7df      	b.n	800b060 <_vfiprintf_r+0x20>
 800b0a0:	4b79      	ldr	r3, [pc, #484]	; (800b288 <_vfiprintf_r+0x248>)
 800b0a2:	429d      	cmp	r5, r3
 800b0a4:	bf08      	it	eq
 800b0a6:	68f5      	ldreq	r5, [r6, #12]
 800b0a8:	e7da      	b.n	800b060 <_vfiprintf_r+0x20>
 800b0aa:	89ab      	ldrh	r3, [r5, #12]
 800b0ac:	0598      	lsls	r0, r3, #22
 800b0ae:	d4ed      	bmi.n	800b08c <_vfiprintf_r+0x4c>
 800b0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0b2:	f7ff fd30 	bl	800ab16 <__retarget_lock_release_recursive>
 800b0b6:	e7e9      	b.n	800b08c <_vfiprintf_r+0x4c>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b0bc:	2320      	movs	r3, #32
 800b0be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0c6:	2330      	movs	r3, #48	; 0x30
 800b0c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b28c <_vfiprintf_r+0x24c>
 800b0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0d0:	f04f 0901 	mov.w	r9, #1
 800b0d4:	4623      	mov	r3, r4
 800b0d6:	469a      	mov	sl, r3
 800b0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0dc:	b10a      	cbz	r2, 800b0e2 <_vfiprintf_r+0xa2>
 800b0de:	2a25      	cmp	r2, #37	; 0x25
 800b0e0:	d1f9      	bne.n	800b0d6 <_vfiprintf_r+0x96>
 800b0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b0e6:	d00b      	beq.n	800b100 <_vfiprintf_r+0xc0>
 800b0e8:	465b      	mov	r3, fp
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7ff ff93 	bl	800b01a <__sfputs_r>
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f000 80aa 	beq.w	800b24e <_vfiprintf_r+0x20e>
 800b0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0fc:	445a      	add	r2, fp
 800b0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b100:	f89a 3000 	ldrb.w	r3, [sl]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 80a2 	beq.w	800b24e <_vfiprintf_r+0x20e>
 800b10a:	2300      	movs	r3, #0
 800b10c:	f04f 32ff 	mov.w	r2, #4294967295
 800b110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b114:	f10a 0a01 	add.w	sl, sl, #1
 800b118:	9304      	str	r3, [sp, #16]
 800b11a:	9307      	str	r3, [sp, #28]
 800b11c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b120:	931a      	str	r3, [sp, #104]	; 0x68
 800b122:	4654      	mov	r4, sl
 800b124:	2205      	movs	r2, #5
 800b126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12a:	4858      	ldr	r0, [pc, #352]	; (800b28c <_vfiprintf_r+0x24c>)
 800b12c:	f7f5 f858 	bl	80001e0 <memchr>
 800b130:	9a04      	ldr	r2, [sp, #16]
 800b132:	b9d8      	cbnz	r0, 800b16c <_vfiprintf_r+0x12c>
 800b134:	06d1      	lsls	r1, r2, #27
 800b136:	bf44      	itt	mi
 800b138:	2320      	movmi	r3, #32
 800b13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b13e:	0713      	lsls	r3, r2, #28
 800b140:	bf44      	itt	mi
 800b142:	232b      	movmi	r3, #43	; 0x2b
 800b144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b148:	f89a 3000 	ldrb.w	r3, [sl]
 800b14c:	2b2a      	cmp	r3, #42	; 0x2a
 800b14e:	d015      	beq.n	800b17c <_vfiprintf_r+0x13c>
 800b150:	9a07      	ldr	r2, [sp, #28]
 800b152:	4654      	mov	r4, sl
 800b154:	2000      	movs	r0, #0
 800b156:	f04f 0c0a 	mov.w	ip, #10
 800b15a:	4621      	mov	r1, r4
 800b15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b160:	3b30      	subs	r3, #48	; 0x30
 800b162:	2b09      	cmp	r3, #9
 800b164:	d94e      	bls.n	800b204 <_vfiprintf_r+0x1c4>
 800b166:	b1b0      	cbz	r0, 800b196 <_vfiprintf_r+0x156>
 800b168:	9207      	str	r2, [sp, #28]
 800b16a:	e014      	b.n	800b196 <_vfiprintf_r+0x156>
 800b16c:	eba0 0308 	sub.w	r3, r0, r8
 800b170:	fa09 f303 	lsl.w	r3, r9, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	9304      	str	r3, [sp, #16]
 800b178:	46a2      	mov	sl, r4
 800b17a:	e7d2      	b.n	800b122 <_vfiprintf_r+0xe2>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	1d19      	adds	r1, r3, #4
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	9103      	str	r1, [sp, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	bfbb      	ittet	lt
 800b188:	425b      	neglt	r3, r3
 800b18a:	f042 0202 	orrlt.w	r2, r2, #2
 800b18e:	9307      	strge	r3, [sp, #28]
 800b190:	9307      	strlt	r3, [sp, #28]
 800b192:	bfb8      	it	lt
 800b194:	9204      	strlt	r2, [sp, #16]
 800b196:	7823      	ldrb	r3, [r4, #0]
 800b198:	2b2e      	cmp	r3, #46	; 0x2e
 800b19a:	d10c      	bne.n	800b1b6 <_vfiprintf_r+0x176>
 800b19c:	7863      	ldrb	r3, [r4, #1]
 800b19e:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a0:	d135      	bne.n	800b20e <_vfiprintf_r+0x1ce>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	1d1a      	adds	r2, r3, #4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	9203      	str	r2, [sp, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfb8      	it	lt
 800b1ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1b2:	3402      	adds	r4, #2
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b29c <_vfiprintf_r+0x25c>
 800b1ba:	7821      	ldrb	r1, [r4, #0]
 800b1bc:	2203      	movs	r2, #3
 800b1be:	4650      	mov	r0, sl
 800b1c0:	f7f5 f80e 	bl	80001e0 <memchr>
 800b1c4:	b140      	cbz	r0, 800b1d8 <_vfiprintf_r+0x198>
 800b1c6:	2340      	movs	r3, #64	; 0x40
 800b1c8:	eba0 000a 	sub.w	r0, r0, sl
 800b1cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b1d0:	9b04      	ldr	r3, [sp, #16]
 800b1d2:	4303      	orrs	r3, r0
 800b1d4:	3401      	adds	r4, #1
 800b1d6:	9304      	str	r3, [sp, #16]
 800b1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1dc:	482c      	ldr	r0, [pc, #176]	; (800b290 <_vfiprintf_r+0x250>)
 800b1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1e2:	2206      	movs	r2, #6
 800b1e4:	f7f4 fffc 	bl	80001e0 <memchr>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d03f      	beq.n	800b26c <_vfiprintf_r+0x22c>
 800b1ec:	4b29      	ldr	r3, [pc, #164]	; (800b294 <_vfiprintf_r+0x254>)
 800b1ee:	bb1b      	cbnz	r3, 800b238 <_vfiprintf_r+0x1f8>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	3307      	adds	r3, #7
 800b1f4:	f023 0307 	bic.w	r3, r3, #7
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fe:	443b      	add	r3, r7
 800b200:	9309      	str	r3, [sp, #36]	; 0x24
 800b202:	e767      	b.n	800b0d4 <_vfiprintf_r+0x94>
 800b204:	fb0c 3202 	mla	r2, ip, r2, r3
 800b208:	460c      	mov	r4, r1
 800b20a:	2001      	movs	r0, #1
 800b20c:	e7a5      	b.n	800b15a <_vfiprintf_r+0x11a>
 800b20e:	2300      	movs	r3, #0
 800b210:	3401      	adds	r4, #1
 800b212:	9305      	str	r3, [sp, #20]
 800b214:	4619      	mov	r1, r3
 800b216:	f04f 0c0a 	mov.w	ip, #10
 800b21a:	4620      	mov	r0, r4
 800b21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b220:	3a30      	subs	r2, #48	; 0x30
 800b222:	2a09      	cmp	r2, #9
 800b224:	d903      	bls.n	800b22e <_vfiprintf_r+0x1ee>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0c5      	beq.n	800b1b6 <_vfiprintf_r+0x176>
 800b22a:	9105      	str	r1, [sp, #20]
 800b22c:	e7c3      	b.n	800b1b6 <_vfiprintf_r+0x176>
 800b22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b232:	4604      	mov	r4, r0
 800b234:	2301      	movs	r3, #1
 800b236:	e7f0      	b.n	800b21a <_vfiprintf_r+0x1da>
 800b238:	ab03      	add	r3, sp, #12
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	462a      	mov	r2, r5
 800b23e:	4b16      	ldr	r3, [pc, #88]	; (800b298 <_vfiprintf_r+0x258>)
 800b240:	a904      	add	r1, sp, #16
 800b242:	4630      	mov	r0, r6
 800b244:	f3af 8000 	nop.w
 800b248:	4607      	mov	r7, r0
 800b24a:	1c78      	adds	r0, r7, #1
 800b24c:	d1d6      	bne.n	800b1fc <_vfiprintf_r+0x1bc>
 800b24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b250:	07d9      	lsls	r1, r3, #31
 800b252:	d405      	bmi.n	800b260 <_vfiprintf_r+0x220>
 800b254:	89ab      	ldrh	r3, [r5, #12]
 800b256:	059a      	lsls	r2, r3, #22
 800b258:	d402      	bmi.n	800b260 <_vfiprintf_r+0x220>
 800b25a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b25c:	f7ff fc5b 	bl	800ab16 <__retarget_lock_release_recursive>
 800b260:	89ab      	ldrh	r3, [r5, #12]
 800b262:	065b      	lsls	r3, r3, #25
 800b264:	f53f af12 	bmi.w	800b08c <_vfiprintf_r+0x4c>
 800b268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b26a:	e711      	b.n	800b090 <_vfiprintf_r+0x50>
 800b26c:	ab03      	add	r3, sp, #12
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	462a      	mov	r2, r5
 800b272:	4b09      	ldr	r3, [pc, #36]	; (800b298 <_vfiprintf_r+0x258>)
 800b274:	a904      	add	r1, sp, #16
 800b276:	4630      	mov	r0, r6
 800b278:	f000 f880 	bl	800b37c <_printf_i>
 800b27c:	e7e4      	b.n	800b248 <_vfiprintf_r+0x208>
 800b27e:	bf00      	nop
 800b280:	0800b95c 	.word	0x0800b95c
 800b284:	0800b97c 	.word	0x0800b97c
 800b288:	0800b93c 	.word	0x0800b93c
 800b28c:	0800b99c 	.word	0x0800b99c
 800b290:	0800b9a6 	.word	0x0800b9a6
 800b294:	00000000 	.word	0x00000000
 800b298:	0800b01b 	.word	0x0800b01b
 800b29c:	0800b9a2 	.word	0x0800b9a2

0800b2a0 <_printf_common>:
 800b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	4699      	mov	r9, r3
 800b2a8:	688a      	ldr	r2, [r1, #8]
 800b2aa:	690b      	ldr	r3, [r1, #16]
 800b2ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	bfb8      	it	lt
 800b2b4:	4613      	movlt	r3, r2
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2bc:	4607      	mov	r7, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	b10a      	cbz	r2, 800b2c6 <_printf_common+0x26>
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	6033      	str	r3, [r6, #0]
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	0699      	lsls	r1, r3, #26
 800b2ca:	bf42      	ittt	mi
 800b2cc:	6833      	ldrmi	r3, [r6, #0]
 800b2ce:	3302      	addmi	r3, #2
 800b2d0:	6033      	strmi	r3, [r6, #0]
 800b2d2:	6825      	ldr	r5, [r4, #0]
 800b2d4:	f015 0506 	ands.w	r5, r5, #6
 800b2d8:	d106      	bne.n	800b2e8 <_printf_common+0x48>
 800b2da:	f104 0a19 	add.w	sl, r4, #25
 800b2de:	68e3      	ldr	r3, [r4, #12]
 800b2e0:	6832      	ldr	r2, [r6, #0]
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	42ab      	cmp	r3, r5
 800b2e6:	dc26      	bgt.n	800b336 <_printf_common+0x96>
 800b2e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2ec:	1e13      	subs	r3, r2, #0
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	bf18      	it	ne
 800b2f2:	2301      	movne	r3, #1
 800b2f4:	0692      	lsls	r2, r2, #26
 800b2f6:	d42b      	bmi.n	800b350 <_printf_common+0xb0>
 800b2f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	4638      	mov	r0, r7
 800b300:	47c0      	blx	r8
 800b302:	3001      	adds	r0, #1
 800b304:	d01e      	beq.n	800b344 <_printf_common+0xa4>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	68e5      	ldr	r5, [r4, #12]
 800b30a:	6832      	ldr	r2, [r6, #0]
 800b30c:	f003 0306 	and.w	r3, r3, #6
 800b310:	2b04      	cmp	r3, #4
 800b312:	bf08      	it	eq
 800b314:	1aad      	subeq	r5, r5, r2
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	6922      	ldr	r2, [r4, #16]
 800b31a:	bf0c      	ite	eq
 800b31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b320:	2500      	movne	r5, #0
 800b322:	4293      	cmp	r3, r2
 800b324:	bfc4      	itt	gt
 800b326:	1a9b      	subgt	r3, r3, r2
 800b328:	18ed      	addgt	r5, r5, r3
 800b32a:	2600      	movs	r6, #0
 800b32c:	341a      	adds	r4, #26
 800b32e:	42b5      	cmp	r5, r6
 800b330:	d11a      	bne.n	800b368 <_printf_common+0xc8>
 800b332:	2000      	movs	r0, #0
 800b334:	e008      	b.n	800b348 <_printf_common+0xa8>
 800b336:	2301      	movs	r3, #1
 800b338:	4652      	mov	r2, sl
 800b33a:	4649      	mov	r1, r9
 800b33c:	4638      	mov	r0, r7
 800b33e:	47c0      	blx	r8
 800b340:	3001      	adds	r0, #1
 800b342:	d103      	bne.n	800b34c <_printf_common+0xac>
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34c:	3501      	adds	r5, #1
 800b34e:	e7c6      	b.n	800b2de <_printf_common+0x3e>
 800b350:	18e1      	adds	r1, r4, r3
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	2030      	movs	r0, #48	; 0x30
 800b356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b35a:	4422      	add	r2, r4
 800b35c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b364:	3302      	adds	r3, #2
 800b366:	e7c7      	b.n	800b2f8 <_printf_common+0x58>
 800b368:	2301      	movs	r3, #1
 800b36a:	4622      	mov	r2, r4
 800b36c:	4649      	mov	r1, r9
 800b36e:	4638      	mov	r0, r7
 800b370:	47c0      	blx	r8
 800b372:	3001      	adds	r0, #1
 800b374:	d0e6      	beq.n	800b344 <_printf_common+0xa4>
 800b376:	3601      	adds	r6, #1
 800b378:	e7d9      	b.n	800b32e <_printf_common+0x8e>
	...

0800b37c <_printf_i>:
 800b37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b380:	460c      	mov	r4, r1
 800b382:	4691      	mov	r9, r2
 800b384:	7e27      	ldrb	r7, [r4, #24]
 800b386:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b388:	2f78      	cmp	r7, #120	; 0x78
 800b38a:	4680      	mov	r8, r0
 800b38c:	469a      	mov	sl, r3
 800b38e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b392:	d807      	bhi.n	800b3a4 <_printf_i+0x28>
 800b394:	2f62      	cmp	r7, #98	; 0x62
 800b396:	d80a      	bhi.n	800b3ae <_printf_i+0x32>
 800b398:	2f00      	cmp	r7, #0
 800b39a:	f000 80d8 	beq.w	800b54e <_printf_i+0x1d2>
 800b39e:	2f58      	cmp	r7, #88	; 0x58
 800b3a0:	f000 80a3 	beq.w	800b4ea <_printf_i+0x16e>
 800b3a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3ac:	e03a      	b.n	800b424 <_printf_i+0xa8>
 800b3ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3b2:	2b15      	cmp	r3, #21
 800b3b4:	d8f6      	bhi.n	800b3a4 <_printf_i+0x28>
 800b3b6:	a001      	add	r0, pc, #4	; (adr r0, 800b3bc <_printf_i+0x40>)
 800b3b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b3bc:	0800b415 	.word	0x0800b415
 800b3c0:	0800b429 	.word	0x0800b429
 800b3c4:	0800b3a5 	.word	0x0800b3a5
 800b3c8:	0800b3a5 	.word	0x0800b3a5
 800b3cc:	0800b3a5 	.word	0x0800b3a5
 800b3d0:	0800b3a5 	.word	0x0800b3a5
 800b3d4:	0800b429 	.word	0x0800b429
 800b3d8:	0800b3a5 	.word	0x0800b3a5
 800b3dc:	0800b3a5 	.word	0x0800b3a5
 800b3e0:	0800b3a5 	.word	0x0800b3a5
 800b3e4:	0800b3a5 	.word	0x0800b3a5
 800b3e8:	0800b535 	.word	0x0800b535
 800b3ec:	0800b459 	.word	0x0800b459
 800b3f0:	0800b517 	.word	0x0800b517
 800b3f4:	0800b3a5 	.word	0x0800b3a5
 800b3f8:	0800b3a5 	.word	0x0800b3a5
 800b3fc:	0800b557 	.word	0x0800b557
 800b400:	0800b3a5 	.word	0x0800b3a5
 800b404:	0800b459 	.word	0x0800b459
 800b408:	0800b3a5 	.word	0x0800b3a5
 800b40c:	0800b3a5 	.word	0x0800b3a5
 800b410:	0800b51f 	.word	0x0800b51f
 800b414:	680b      	ldr	r3, [r1, #0]
 800b416:	1d1a      	adds	r2, r3, #4
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	600a      	str	r2, [r1, #0]
 800b41c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b424:	2301      	movs	r3, #1
 800b426:	e0a3      	b.n	800b570 <_printf_i+0x1f4>
 800b428:	6825      	ldr	r5, [r4, #0]
 800b42a:	6808      	ldr	r0, [r1, #0]
 800b42c:	062e      	lsls	r6, r5, #24
 800b42e:	f100 0304 	add.w	r3, r0, #4
 800b432:	d50a      	bpl.n	800b44a <_printf_i+0xce>
 800b434:	6805      	ldr	r5, [r0, #0]
 800b436:	600b      	str	r3, [r1, #0]
 800b438:	2d00      	cmp	r5, #0
 800b43a:	da03      	bge.n	800b444 <_printf_i+0xc8>
 800b43c:	232d      	movs	r3, #45	; 0x2d
 800b43e:	426d      	negs	r5, r5
 800b440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b444:	485e      	ldr	r0, [pc, #376]	; (800b5c0 <_printf_i+0x244>)
 800b446:	230a      	movs	r3, #10
 800b448:	e019      	b.n	800b47e <_printf_i+0x102>
 800b44a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b44e:	6805      	ldr	r5, [r0, #0]
 800b450:	600b      	str	r3, [r1, #0]
 800b452:	bf18      	it	ne
 800b454:	b22d      	sxthne	r5, r5
 800b456:	e7ef      	b.n	800b438 <_printf_i+0xbc>
 800b458:	680b      	ldr	r3, [r1, #0]
 800b45a:	6825      	ldr	r5, [r4, #0]
 800b45c:	1d18      	adds	r0, r3, #4
 800b45e:	6008      	str	r0, [r1, #0]
 800b460:	0628      	lsls	r0, r5, #24
 800b462:	d501      	bpl.n	800b468 <_printf_i+0xec>
 800b464:	681d      	ldr	r5, [r3, #0]
 800b466:	e002      	b.n	800b46e <_printf_i+0xf2>
 800b468:	0669      	lsls	r1, r5, #25
 800b46a:	d5fb      	bpl.n	800b464 <_printf_i+0xe8>
 800b46c:	881d      	ldrh	r5, [r3, #0]
 800b46e:	4854      	ldr	r0, [pc, #336]	; (800b5c0 <_printf_i+0x244>)
 800b470:	2f6f      	cmp	r7, #111	; 0x6f
 800b472:	bf0c      	ite	eq
 800b474:	2308      	moveq	r3, #8
 800b476:	230a      	movne	r3, #10
 800b478:	2100      	movs	r1, #0
 800b47a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b47e:	6866      	ldr	r6, [r4, #4]
 800b480:	60a6      	str	r6, [r4, #8]
 800b482:	2e00      	cmp	r6, #0
 800b484:	bfa2      	ittt	ge
 800b486:	6821      	ldrge	r1, [r4, #0]
 800b488:	f021 0104 	bicge.w	r1, r1, #4
 800b48c:	6021      	strge	r1, [r4, #0]
 800b48e:	b90d      	cbnz	r5, 800b494 <_printf_i+0x118>
 800b490:	2e00      	cmp	r6, #0
 800b492:	d04d      	beq.n	800b530 <_printf_i+0x1b4>
 800b494:	4616      	mov	r6, r2
 800b496:	fbb5 f1f3 	udiv	r1, r5, r3
 800b49a:	fb03 5711 	mls	r7, r3, r1, r5
 800b49e:	5dc7      	ldrb	r7, [r0, r7]
 800b4a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4a4:	462f      	mov	r7, r5
 800b4a6:	42bb      	cmp	r3, r7
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	d9f4      	bls.n	800b496 <_printf_i+0x11a>
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d10b      	bne.n	800b4c8 <_printf_i+0x14c>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	07df      	lsls	r7, r3, #31
 800b4b4:	d508      	bpl.n	800b4c8 <_printf_i+0x14c>
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	6861      	ldr	r1, [r4, #4]
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	bfde      	ittt	le
 800b4be:	2330      	movle	r3, #48	; 0x30
 800b4c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4c8:	1b92      	subs	r2, r2, r6
 800b4ca:	6122      	str	r2, [r4, #16]
 800b4cc:	f8cd a000 	str.w	sl, [sp]
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	aa03      	add	r2, sp, #12
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f7ff fee2 	bl	800b2a0 <_printf_common>
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d14c      	bne.n	800b57a <_printf_i+0x1fe>
 800b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e4:	b004      	add	sp, #16
 800b4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ea:	4835      	ldr	r0, [pc, #212]	; (800b5c0 <_printf_i+0x244>)
 800b4ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	680e      	ldr	r6, [r1, #0]
 800b4f4:	061f      	lsls	r7, r3, #24
 800b4f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b4fa:	600e      	str	r6, [r1, #0]
 800b4fc:	d514      	bpl.n	800b528 <_printf_i+0x1ac>
 800b4fe:	07d9      	lsls	r1, r3, #31
 800b500:	bf44      	itt	mi
 800b502:	f043 0320 	orrmi.w	r3, r3, #32
 800b506:	6023      	strmi	r3, [r4, #0]
 800b508:	b91d      	cbnz	r5, 800b512 <_printf_i+0x196>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	f023 0320 	bic.w	r3, r3, #32
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	2310      	movs	r3, #16
 800b514:	e7b0      	b.n	800b478 <_printf_i+0xfc>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	f043 0320 	orr.w	r3, r3, #32
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	2378      	movs	r3, #120	; 0x78
 800b520:	4828      	ldr	r0, [pc, #160]	; (800b5c4 <_printf_i+0x248>)
 800b522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b526:	e7e3      	b.n	800b4f0 <_printf_i+0x174>
 800b528:	065e      	lsls	r6, r3, #25
 800b52a:	bf48      	it	mi
 800b52c:	b2ad      	uxthmi	r5, r5
 800b52e:	e7e6      	b.n	800b4fe <_printf_i+0x182>
 800b530:	4616      	mov	r6, r2
 800b532:	e7bb      	b.n	800b4ac <_printf_i+0x130>
 800b534:	680b      	ldr	r3, [r1, #0]
 800b536:	6826      	ldr	r6, [r4, #0]
 800b538:	6960      	ldr	r0, [r4, #20]
 800b53a:	1d1d      	adds	r5, r3, #4
 800b53c:	600d      	str	r5, [r1, #0]
 800b53e:	0635      	lsls	r5, r6, #24
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	d501      	bpl.n	800b548 <_printf_i+0x1cc>
 800b544:	6018      	str	r0, [r3, #0]
 800b546:	e002      	b.n	800b54e <_printf_i+0x1d2>
 800b548:	0671      	lsls	r1, r6, #25
 800b54a:	d5fb      	bpl.n	800b544 <_printf_i+0x1c8>
 800b54c:	8018      	strh	r0, [r3, #0]
 800b54e:	2300      	movs	r3, #0
 800b550:	6123      	str	r3, [r4, #16]
 800b552:	4616      	mov	r6, r2
 800b554:	e7ba      	b.n	800b4cc <_printf_i+0x150>
 800b556:	680b      	ldr	r3, [r1, #0]
 800b558:	1d1a      	adds	r2, r3, #4
 800b55a:	600a      	str	r2, [r1, #0]
 800b55c:	681e      	ldr	r6, [r3, #0]
 800b55e:	6862      	ldr	r2, [r4, #4]
 800b560:	2100      	movs	r1, #0
 800b562:	4630      	mov	r0, r6
 800b564:	f7f4 fe3c 	bl	80001e0 <memchr>
 800b568:	b108      	cbz	r0, 800b56e <_printf_i+0x1f2>
 800b56a:	1b80      	subs	r0, r0, r6
 800b56c:	6060      	str	r0, [r4, #4]
 800b56e:	6863      	ldr	r3, [r4, #4]
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	2300      	movs	r3, #0
 800b574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b578:	e7a8      	b.n	800b4cc <_printf_i+0x150>
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	4632      	mov	r2, r6
 800b57e:	4649      	mov	r1, r9
 800b580:	4640      	mov	r0, r8
 800b582:	47d0      	blx	sl
 800b584:	3001      	adds	r0, #1
 800b586:	d0ab      	beq.n	800b4e0 <_printf_i+0x164>
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	079b      	lsls	r3, r3, #30
 800b58c:	d413      	bmi.n	800b5b6 <_printf_i+0x23a>
 800b58e:	68e0      	ldr	r0, [r4, #12]
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	4298      	cmp	r0, r3
 800b594:	bfb8      	it	lt
 800b596:	4618      	movlt	r0, r3
 800b598:	e7a4      	b.n	800b4e4 <_printf_i+0x168>
 800b59a:	2301      	movs	r3, #1
 800b59c:	4632      	mov	r2, r6
 800b59e:	4649      	mov	r1, r9
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	47d0      	blx	sl
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d09b      	beq.n	800b4e0 <_printf_i+0x164>
 800b5a8:	3501      	adds	r5, #1
 800b5aa:	68e3      	ldr	r3, [r4, #12]
 800b5ac:	9903      	ldr	r1, [sp, #12]
 800b5ae:	1a5b      	subs	r3, r3, r1
 800b5b0:	42ab      	cmp	r3, r5
 800b5b2:	dcf2      	bgt.n	800b59a <_printf_i+0x21e>
 800b5b4:	e7eb      	b.n	800b58e <_printf_i+0x212>
 800b5b6:	2500      	movs	r5, #0
 800b5b8:	f104 0619 	add.w	r6, r4, #25
 800b5bc:	e7f5      	b.n	800b5aa <_printf_i+0x22e>
 800b5be:	bf00      	nop
 800b5c0:	0800b9ad 	.word	0x0800b9ad
 800b5c4:	0800b9be 	.word	0x0800b9be

0800b5c8 <_sbrk_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d06      	ldr	r5, [pc, #24]	; (800b5e4 <_sbrk_r+0x1c>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	602b      	str	r3, [r5, #0]
 800b5d4:	f7f8 fdb2 	bl	800413c <_sbrk>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_sbrk_r+0x1a>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_sbrk_r+0x1a>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	200009a8 	.word	0x200009a8

0800b5e8 <__sread>:
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f0:	f000 f8ee 	bl	800b7d0 <_read_r>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	bfab      	itete	ge
 800b5f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b5fc:	181b      	addge	r3, r3, r0
 800b5fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b602:	bfac      	ite	ge
 800b604:	6563      	strge	r3, [r4, #84]	; 0x54
 800b606:	81a3      	strhlt	r3, [r4, #12]
 800b608:	bd10      	pop	{r4, pc}

0800b60a <__swrite>:
 800b60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60e:	461f      	mov	r7, r3
 800b610:	898b      	ldrh	r3, [r1, #12]
 800b612:	05db      	lsls	r3, r3, #23
 800b614:	4605      	mov	r5, r0
 800b616:	460c      	mov	r4, r1
 800b618:	4616      	mov	r6, r2
 800b61a:	d505      	bpl.n	800b628 <__swrite+0x1e>
 800b61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b620:	2302      	movs	r3, #2
 800b622:	2200      	movs	r2, #0
 800b624:	f000 f868 	bl	800b6f8 <_lseek_r>
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	4628      	mov	r0, r5
 800b63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63e:	f000 b817 	b.w	800b670 <_write_r>

0800b642 <__sseek>:
 800b642:	b510      	push	{r4, lr}
 800b644:	460c      	mov	r4, r1
 800b646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64a:	f000 f855 	bl	800b6f8 <_lseek_r>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	bf15      	itete	ne
 800b654:	6560      	strne	r0, [r4, #84]	; 0x54
 800b656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b65a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b65e:	81a3      	strheq	r3, [r4, #12]
 800b660:	bf18      	it	ne
 800b662:	81a3      	strhne	r3, [r4, #12]
 800b664:	bd10      	pop	{r4, pc}

0800b666 <__sclose>:
 800b666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b66a:	f000 b813 	b.w	800b694 <_close_r>
	...

0800b670 <_write_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_write_r+0x20>)
 800b674:	4604      	mov	r4, r0
 800b676:	4608      	mov	r0, r1
 800b678:	4611      	mov	r1, r2
 800b67a:	2200      	movs	r2, #0
 800b67c:	602a      	str	r2, [r5, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f7f8 fd0b 	bl	800409a <_write>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_write_r+0x1e>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_write_r+0x1e>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	200009a8 	.word	0x200009a8

0800b694 <_close_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d06      	ldr	r5, [pc, #24]	; (800b6b0 <_close_r+0x1c>)
 800b698:	2300      	movs	r3, #0
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	f7f8 fd17 	bl	80040d2 <_close>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_close_r+0x1a>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_close_r+0x1a>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	200009a8 	.word	0x200009a8

0800b6b4 <_fstat_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	; (800b6d4 <_fstat_r+0x20>)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	4611      	mov	r1, r2
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	f7f8 fd12 	bl	80040ea <_fstat>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d102      	bne.n	800b6d0 <_fstat_r+0x1c>
 800b6ca:	682b      	ldr	r3, [r5, #0]
 800b6cc:	b103      	cbz	r3, 800b6d0 <_fstat_r+0x1c>
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	bd38      	pop	{r3, r4, r5, pc}
 800b6d2:	bf00      	nop
 800b6d4:	200009a8 	.word	0x200009a8

0800b6d8 <_isatty_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d06      	ldr	r5, [pc, #24]	; (800b6f4 <_isatty_r+0x1c>)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	602b      	str	r3, [r5, #0]
 800b6e4:	f7f8 fd11 	bl	800410a <_isatty>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	d102      	bne.n	800b6f2 <_isatty_r+0x1a>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	b103      	cbz	r3, 800b6f2 <_isatty_r+0x1a>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	200009a8 	.word	0x200009a8

0800b6f8 <_lseek_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4d07      	ldr	r5, [pc, #28]	; (800b718 <_lseek_r+0x20>)
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	4608      	mov	r0, r1
 800b700:	4611      	mov	r1, r2
 800b702:	2200      	movs	r2, #0
 800b704:	602a      	str	r2, [r5, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	f7f8 fd0a 	bl	8004120 <_lseek>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d102      	bne.n	800b716 <_lseek_r+0x1e>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	b103      	cbz	r3, 800b716 <_lseek_r+0x1e>
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	bd38      	pop	{r3, r4, r5, pc}
 800b718:	200009a8 	.word	0x200009a8

0800b71c <memcpy>:
 800b71c:	440a      	add	r2, r1
 800b71e:	4291      	cmp	r1, r2
 800b720:	f100 33ff 	add.w	r3, r0, #4294967295
 800b724:	d100      	bne.n	800b728 <memcpy+0xc>
 800b726:	4770      	bx	lr
 800b728:	b510      	push	{r4, lr}
 800b72a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b72e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b732:	4291      	cmp	r1, r2
 800b734:	d1f9      	bne.n	800b72a <memcpy+0xe>
 800b736:	bd10      	pop	{r4, pc}

0800b738 <memmove>:
 800b738:	4288      	cmp	r0, r1
 800b73a:	b510      	push	{r4, lr}
 800b73c:	eb01 0402 	add.w	r4, r1, r2
 800b740:	d902      	bls.n	800b748 <memmove+0x10>
 800b742:	4284      	cmp	r4, r0
 800b744:	4623      	mov	r3, r4
 800b746:	d807      	bhi.n	800b758 <memmove+0x20>
 800b748:	1e43      	subs	r3, r0, #1
 800b74a:	42a1      	cmp	r1, r4
 800b74c:	d008      	beq.n	800b760 <memmove+0x28>
 800b74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b752:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b756:	e7f8      	b.n	800b74a <memmove+0x12>
 800b758:	4402      	add	r2, r0
 800b75a:	4601      	mov	r1, r0
 800b75c:	428a      	cmp	r2, r1
 800b75e:	d100      	bne.n	800b762 <memmove+0x2a>
 800b760:	bd10      	pop	{r4, pc}
 800b762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b76a:	e7f7      	b.n	800b75c <memmove+0x24>

0800b76c <__malloc_lock>:
 800b76c:	4801      	ldr	r0, [pc, #4]	; (800b774 <__malloc_lock+0x8>)
 800b76e:	f7ff b9d1 	b.w	800ab14 <__retarget_lock_acquire_recursive>
 800b772:	bf00      	nop
 800b774:	200009a0 	.word	0x200009a0

0800b778 <__malloc_unlock>:
 800b778:	4801      	ldr	r0, [pc, #4]	; (800b780 <__malloc_unlock+0x8>)
 800b77a:	f7ff b9cc 	b.w	800ab16 <__retarget_lock_release_recursive>
 800b77e:	bf00      	nop
 800b780:	200009a0 	.word	0x200009a0

0800b784 <_realloc_r>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	4607      	mov	r7, r0
 800b788:	4614      	mov	r4, r2
 800b78a:	460e      	mov	r6, r1
 800b78c:	b921      	cbnz	r1, 800b798 <_realloc_r+0x14>
 800b78e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b792:	4611      	mov	r1, r2
 800b794:	f7ff ba74 	b.w	800ac80 <_malloc_r>
 800b798:	b922      	cbnz	r2, 800b7a4 <_realloc_r+0x20>
 800b79a:	f7ff fa21 	bl	800abe0 <_free_r>
 800b79e:	4625      	mov	r5, r4
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a4:	f000 f826 	bl	800b7f4 <_malloc_usable_size_r>
 800b7a8:	42a0      	cmp	r0, r4
 800b7aa:	d20f      	bcs.n	800b7cc <_realloc_r+0x48>
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f7ff fa66 	bl	800ac80 <_malloc_r>
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d0f2      	beq.n	800b7a0 <_realloc_r+0x1c>
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4622      	mov	r2, r4
 800b7be:	f7ff ffad 	bl	800b71c <memcpy>
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff fa0b 	bl	800abe0 <_free_r>
 800b7ca:	e7e9      	b.n	800b7a0 <_realloc_r+0x1c>
 800b7cc:	4635      	mov	r5, r6
 800b7ce:	e7e7      	b.n	800b7a0 <_realloc_r+0x1c>

0800b7d0 <_read_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d07      	ldr	r5, [pc, #28]	; (800b7f0 <_read_r+0x20>)
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	4608      	mov	r0, r1
 800b7d8:	4611      	mov	r1, r2
 800b7da:	2200      	movs	r2, #0
 800b7dc:	602a      	str	r2, [r5, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f7f8 fc3e 	bl	8004060 <_read>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_read_r+0x1e>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_read_r+0x1e>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	200009a8 	.word	0x200009a8

0800b7f4 <_malloc_usable_size_r>:
 800b7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f8:	1f18      	subs	r0, r3, #4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bfbc      	itt	lt
 800b7fe:	580b      	ldrlt	r3, [r1, r0]
 800b800:	18c0      	addlt	r0, r0, r3
 800b802:	4770      	bx	lr

0800b804 <_init>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	bf00      	nop
 800b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80a:	bc08      	pop	{r3}
 800b80c:	469e      	mov	lr, r3
 800b80e:	4770      	bx	lr

0800b810 <_fini>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr
